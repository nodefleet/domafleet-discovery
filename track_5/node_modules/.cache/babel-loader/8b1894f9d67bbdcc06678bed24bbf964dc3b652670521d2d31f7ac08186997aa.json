{"ast":null,"code":"import { GraphQLClient } from 'graphql-request';\n\n// Doma Protocol API Configuration\nconst DOMA_CONFIG = {\n  testnet: {\n    chainId: process.env.REACT_APP_DOMA_CHAIN_ID || '97476',\n    currency: process.env.REACT_APP_DOMA_CURRENCY || 'ETH',\n    bridge: process.env.REACT_APP_DOMA_BRIDGE_URL || 'https://bridge-testnet.doma.xyz',\n    rpc: process.env.REACT_APP_DOMA_RPC_URL || 'https://rpc-testnet.doma.xyz',\n    explorer: process.env.REACT_APP_DOMA_EXPLORER_URL || 'https://explorer-testnet.doma.xyz',\n    api: process.env.REACT_APP_DOMA_API_BASE_URL || 'https://api-testnet.doma.xyz',\n    subgraph: process.env.REACT_APP_DOMA_SUBGRAPH_URL || 'https://api-testnet.doma.xyz/graphql'\n  }\n};\n\n// GraphQL client for subgraph queries\nexport const createGraphQLClient = apiKey => {\n  const headers = {\n    'Content-Type': 'application/json'\n  };\n  if (apiKey) {\n    headers['Api-Key'] = apiKey;\n  }\n  return new GraphQLClient(DOMA_CONFIG.testnet.subgraph, {\n    headers\n  });\n};\n\n// REST API client for orderbook and other operations\nexport class DomaAPIClient {\n  constructor(apiKey) {\n    this.baseUrl = void 0;\n    this.apiKey = void 0;\n    this.baseUrl = DOMA_CONFIG.testnet.api;\n    this.apiKey = apiKey;\n  }\n  async request(endpoint, options = {}) {\n    const headers = {\n      'Content-Type': 'application/json',\n      ...options.headers\n    };\n    if (this.apiKey) {\n      headers['Api-Key'] = this.apiKey;\n    }\n    const response = await fetch(`${this.baseUrl}${endpoint}`, {\n      ...options,\n      headers\n    });\n    if (!response.ok) {\n      throw new Error(`API request failed: ${response.status} ${response.statusText}`);\n    }\n    return response.json();\n  }\n\n  // Orderbook API methods\n  async createListing(params) {\n    return this.request('/v1/orderbook/list', {\n      method: 'POST',\n      body: JSON.stringify(params)\n    });\n  }\n  async createOffer(params) {\n    return this.request('/v1/orderbook/offer', {\n      method: 'POST',\n      body: JSON.stringify(params)\n    });\n  }\n  async getListingFulfillmentData(orderId, buyer) {\n    return this.request(`/v1/orderbook/listing/${orderId}/${buyer}`);\n  }\n  async getOfferFulfillmentData(orderId, fulfiller) {\n    return this.request(`/v1/orderbook/offer/${orderId}/${fulfiller}`);\n  }\n  async cancelListing(params) {\n    return this.request('/v1/orderbook/listing/cancel', {\n      method: 'POST',\n      body: JSON.stringify(params)\n    });\n  }\n  async cancelOffer(params) {\n    return this.request('/v1/orderbook/offer/cancel', {\n      method: 'POST',\n      body: JSON.stringify(params)\n    });\n  }\n  async getOrderbookFees(orderbook, chainId, contractAddress) {\n    return this.request(`/v1/orderbook/fee/${orderbook}/${chainId}/${contractAddress}`);\n  }\n  async getSupportedCurrencies(chainId, contractAddress, orderbook) {\n    return this.request(`/v1/orderbook/currencies/${chainId}/${contractAddress}/${orderbook}`);\n  }\n\n  // Poll API methods for real-time events\n  async pollEvents(params) {\n    const searchParams = new URLSearchParams();\n    if (params !== null && params !== void 0 && params.eventTypes) {\n      params.eventTypes.forEach(type => searchParams.append('eventTypes', type));\n    }\n    if (params !== null && params !== void 0 && params.limit) {\n      searchParams.append('limit', params.limit.toString());\n    }\n    if ((params === null || params === void 0 ? void 0 : params.finalizedOnly) !== undefined) {\n      searchParams.append('finalizedOnly', params.finalizedOnly.toString());\n    }\n    return this.request(`/v1/poll?${searchParams.toString()}`);\n  }\n  async acknowledgeEvents(lastEventId) {\n    return this.request(`/v1/poll/ack/${lastEventId}`, {\n      method: 'POST'\n    });\n  }\n  async resetPollState(eventId) {\n    return this.request(`/v1/poll/reset/${eventId}`, {\n      method: 'POST'\n    });\n  }\n}\n\n// Get API key from environment\nconst DEFAULT_API_KEY = process.env.REACT_APP_DOMA_API_KEY;\n\n// Create default clients (can work without API key for public queries)\nexport const graphqlClient = createGraphQLClient(DEFAULT_API_KEY);\nexport const domaAPIClient = new DomaAPIClient(DEFAULT_API_KEY);\n\n// Create authenticated clients when API key is available\nexport const createAuthenticatedClients = apiKey => ({\n  graphqlClient: createGraphQLClient(apiKey),\n  apiClient: new DomaAPIClient(apiKey)\n});\nexport { DOMA_CONFIG };","map":{"version":3,"names":["GraphQLClient","DOMA_CONFIG","testnet","chainId","process","env","REACT_APP_DOMA_CHAIN_ID","currency","REACT_APP_DOMA_CURRENCY","bridge","REACT_APP_DOMA_BRIDGE_URL","rpc","REACT_APP_DOMA_RPC_URL","explorer","REACT_APP_DOMA_EXPLORER_URL","api","REACT_APP_DOMA_API_BASE_URL","subgraph","REACT_APP_DOMA_SUBGRAPH_URL","createGraphQLClient","apiKey","headers","DomaAPIClient","constructor","baseUrl","request","endpoint","options","response","fetch","ok","Error","status","statusText","json","createListing","params","method","body","JSON","stringify","createOffer","getListingFulfillmentData","orderId","buyer","getOfferFulfillmentData","fulfiller","cancelListing","cancelOffer","getOrderbookFees","orderbook","contractAddress","getSupportedCurrencies","pollEvents","searchParams","URLSearchParams","eventTypes","forEach","type","append","limit","toString","finalizedOnly","undefined","acknowledgeEvents","lastEventId","resetPollState","eventId","DEFAULT_API_KEY","REACT_APP_DOMA_API_KEY","graphqlClient","domaAPIClient","createAuthenticatedClients","apiClient"],"sources":["/Users/kaelabbott/Downloads/autozama/doma/src/lib/doma-client.ts"],"sourcesContent":["import { GraphQLClient } from 'graphql-request';\n\n// Doma Protocol API Configuration\nconst DOMA_CONFIG = {\n  testnet: {\n    chainId: process.env.REACT_APP_DOMA_CHAIN_ID || '97476',\n    currency: process.env.REACT_APP_DOMA_CURRENCY || 'ETH',\n    bridge: process.env.REACT_APP_DOMA_BRIDGE_URL || 'https://bridge-testnet.doma.xyz',\n    rpc: process.env.REACT_APP_DOMA_RPC_URL || 'https://rpc-testnet.doma.xyz',\n    explorer: process.env.REACT_APP_DOMA_EXPLORER_URL || 'https://explorer-testnet.doma.xyz',\n    api: process.env.REACT_APP_DOMA_API_BASE_URL || 'https://api-testnet.doma.xyz',\n    subgraph: process.env.REACT_APP_DOMA_SUBGRAPH_URL || 'https://api-testnet.doma.xyz/graphql'\n  }\n};\n\n// GraphQL client for subgraph queries\nexport const createGraphQLClient = (apiKey?: string) => {\n  const headers: Record<string, string> = {\n    'Content-Type': 'application/json',\n  };\n  \n  if (apiKey) {\n    headers['Api-Key'] = apiKey;\n  }\n\n  return new GraphQLClient(DOMA_CONFIG.testnet.subgraph, {\n    headers\n  });\n};\n\n// REST API client for orderbook and other operations\nexport class DomaAPIClient {\n  private baseUrl: string;\n  private apiKey?: string;\n\n  constructor(apiKey?: string) {\n    this.baseUrl = DOMA_CONFIG.testnet.api;\n    this.apiKey = apiKey;\n  }\n\n  private async request<T>(endpoint: string, options: RequestInit = {}): Promise<T> {\n    const headers: Record<string, string> = {\n      'Content-Type': 'application/json',\n      ...options.headers as Record<string, string>\n    };\n\n    if (this.apiKey) {\n      headers['Api-Key'] = this.apiKey;\n    }\n\n    const response = await fetch(`${this.baseUrl}${endpoint}`, {\n      ...options,\n      headers\n    });\n\n    if (!response.ok) {\n      throw new Error(`API request failed: ${response.status} ${response.statusText}`);\n    }\n\n    return response.json();\n  }\n\n  // Orderbook API methods\n  async createListing(params: {\n    orderbook: string;\n    chainId: string;\n    parameters: any;\n    signature: string;\n  }) {\n    return this.request<{ orderId: string }>('/v1/orderbook/list', {\n      method: 'POST',\n      body: JSON.stringify(params)\n    });\n  }\n\n  async createOffer(params: {\n    orderbook: string;\n    chainId: string;\n    parameters: any;\n    signature: string;\n  }) {\n    return this.request<{ orderId: string }>('/v1/orderbook/offer', {\n      method: 'POST',\n      body: JSON.stringify(params)\n    });\n  }\n\n  async getListingFulfillmentData(orderId: string, buyer: string) {\n    return this.request<{ parameters: any; signature: string }>(\n      `/v1/orderbook/listing/${orderId}/${buyer}`\n    );\n  }\n\n  async getOfferFulfillmentData(orderId: string, fulfiller: string) {\n    return this.request<{ parameters: any; signature: string }>(\n      `/v1/orderbook/offer/${orderId}/${fulfiller}`\n    );\n  }\n\n  async cancelListing(params: { orderId: string; signature: string }) {\n    return this.request<{ orderId: string }>('/v1/orderbook/listing/cancel', {\n      method: 'POST',\n      body: JSON.stringify(params)\n    });\n  }\n\n  async cancelOffer(params: { orderId: string; signature: string }) {\n    return this.request<{ orderId: string }>('/v1/orderbook/offer/cancel', {\n      method: 'POST',\n      body: JSON.stringify(params)\n    });\n  }\n\n  async getOrderbookFees(orderbook: string, chainId: string, contractAddress: string) {\n    return this.request<{ marketplaceFees: any[] }>(\n      `/v1/orderbook/fee/${orderbook}/${chainId}/${contractAddress}`\n    );\n  }\n\n  async getSupportedCurrencies(chainId: string, contractAddress: string, orderbook: string) {\n    return this.request<{ currencies: any[] }>(\n      `/v1/orderbook/currencies/${chainId}/${contractAddress}/${orderbook}`\n    );\n  }\n\n  // Poll API methods for real-time events\n  async pollEvents(params?: {\n    eventTypes?: string[];\n    limit?: number;\n    finalizedOnly?: boolean;\n  }) {\n    const searchParams = new URLSearchParams();\n    \n    if (params?.eventTypes) {\n      params.eventTypes.forEach(type => searchParams.append('eventTypes', type));\n    }\n    if (params?.limit) {\n      searchParams.append('limit', params.limit.toString());\n    }\n    if (params?.finalizedOnly !== undefined) {\n      searchParams.append('finalizedOnly', params.finalizedOnly.toString());\n    }\n\n    return this.request<{\n      events: any[];\n      lastId: number;\n      hasMoreEvents: boolean;\n    }>(`/v1/poll?${searchParams.toString()}`);\n  }\n\n  async acknowledgeEvents(lastEventId: number) {\n    return this.request(`/v1/poll/ack/${lastEventId}`, {\n      method: 'POST'\n    });\n  }\n\n  async resetPollState(eventId: number) {\n    return this.request(`/v1/poll/reset/${eventId}`, {\n      method: 'POST'\n    });\n  }\n}\n\n// Get API key from environment\nconst DEFAULT_API_KEY = process.env.REACT_APP_DOMA_API_KEY;\n\n// Create default clients (can work without API key for public queries)\nexport const graphqlClient = createGraphQLClient(DEFAULT_API_KEY);\nexport const domaAPIClient = new DomaAPIClient(DEFAULT_API_KEY);\n\n// Create authenticated clients when API key is available\nexport const createAuthenticatedClients = (apiKey: string) => ({\n  graphqlClient: createGraphQLClient(apiKey),\n  apiClient: new DomaAPIClient(apiKey)\n});\n\nexport { DOMA_CONFIG };\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}