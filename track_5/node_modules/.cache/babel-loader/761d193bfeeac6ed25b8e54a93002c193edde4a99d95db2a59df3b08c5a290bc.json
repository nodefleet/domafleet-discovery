{"ast":null,"code":"import { Observable } from \"rxjs\";\nimport { CombinedGraphQLErrors, graphQLResultHasProtocolErrors, PROTOCOL_ERRORS_SYMBOL, toErrorLike } from \"@apollo/client/errors\";\nimport { ApolloLink } from \"@apollo/client/link\";\n/**\n * @deprecated\n * Use `ErrorLink` from `@apollo/client/link/error` instead.\n */\nexport function onError(errorHandler) {\n  return new ErrorLink(errorHandler);\n}\n/**\n * Use the `ErrorLink` to perform custom logic when a [GraphQL or network error](https://apollographql.com/docs/react/data/error-handling)\n * occurs.\n *\n * @remarks\n *\n * This link is used after the GraphQL operation completes and execution is\n * moving back up your [link chain](https://apollographql.com/docs/react/introduction#handling-a-response). The `errorHandler` function should\n * not return a value unless you want to [retry the operation](https://apollographql.com/docs/react/data/error-handling#retrying-operations).\n *\n * For more information on the types of errors that might be encountered, see\n * the guide on [error handling](https://apollographql.com/docs/react/data/error-handling).\n *\n * @example\n *\n * ```ts\n * import { ErrorLink } from \"@apollo/client/link/error\";\n * import {\n *   CombinedGraphQLErrors,\n *   CombinedProtocolErrors,\n * } from \"@apollo/client/errors\";\n *\n * // Log any GraphQL errors, protocol errors, or network error that occurred\n * const errorLink = new ErrorLink(({ error, operation }) => {\n *   if (CombinedGraphQLErrors.is(error)) {\n *     error.errors.forEach(({ message, locations, path }) =>\n *       console.log(\n *         `[GraphQL error]: Message: ${message}, Location: ${locations}, Path: ${path}`\n *       )\n *     );\n *   } else if (CombinedProtocolErrors.is(error)) {\n *     error.errors.forEach(({ message, extensions }) =>\n *       console.log(\n *         `[Protocol error]: Message: ${message}, Extensions: ${JSON.stringify(\n *           extensions\n *         )}`\n *       )\n *     );\n *   } else {\n *     console.error(`[Network error]: ${error}`);\n *   }\n * });\n * ```\n */\nexport class ErrorLink extends ApolloLink {\n  constructor(errorHandler) {\n    super((operation, forward) => {\n      return new Observable(observer => {\n        let sub;\n        let retriedSub;\n        let retriedResult;\n        try {\n          sub = forward(operation).subscribe({\n            next: result => {\n              const handler = operation.client[\"queryManager\"].incrementalHandler;\n              const errors = handler.isIncrementalResult(result) ? handler.extractErrors(result) : result.errors;\n              if (errors) {\n                retriedResult = errorHandler({\n                  error: new CombinedGraphQLErrors(result, errors),\n                  result,\n                  operation,\n                  forward\n                });\n              } else if (graphQLResultHasProtocolErrors(result)) {\n                retriedResult = errorHandler({\n                  error: result.extensions[PROTOCOL_ERRORS_SYMBOL],\n                  result,\n                  operation,\n                  forward\n                });\n              }\n              retriedSub = retriedResult?.subscribe(observer);\n              if (!retriedSub) {\n                observer.next(result);\n              }\n            },\n            error: error => {\n              retriedResult = errorHandler({\n                operation,\n                error: toErrorLike(error),\n                forward\n              });\n              retriedSub = retriedResult?.subscribe(observer);\n              if (!retriedSub) {\n                observer.error(error);\n              }\n            },\n            complete: () => {\n              // disable the previous sub from calling complete on observable\n              // if retry is in flight.\n              if (!retriedResult) {\n                observer.complete();\n              }\n            }\n          });\n        } catch (e) {\n          errorHandler({\n            error: toErrorLike(e),\n            operation,\n            forward\n          });\n          observer.error(e);\n        }\n        return () => {\n          if (sub) sub.unsubscribe();\n          if (retriedSub) retriedSub.unsubscribe();\n        };\n      });\n    });\n  }\n}","map":{"version":3,"names":["Observable","CombinedGraphQLErrors","graphQLResultHasProtocolErrors","PROTOCOL_ERRORS_SYMBOL","toErrorLike","ApolloLink","onError","errorHandler","ErrorLink","constructor","operation","forward","observer","sub","retriedSub","retriedResult","subscribe","next","result","handler","client","incrementalHandler","errors","isIncrementalResult","extractErrors","error","extensions","complete","e","unsubscribe"],"sources":["/Users/kaelabbott/Downloads/autozama/doma/node_modules/@apollo/src/link/error/index.ts"],"sourcesContent":["import type { Subscription } from \"rxjs\";\nimport { Observable } from \"rxjs\";\n\nimport type { ErrorLike } from \"@apollo/client\";\nimport {\n  CombinedGraphQLErrors,\n  graphQLResultHasProtocolErrors,\n  PROTOCOL_ERRORS_SYMBOL,\n  toErrorLike,\n} from \"@apollo/client/errors\";\nimport { ApolloLink } from \"@apollo/client/link\";\n\nexport declare namespace ErrorLink {\n  // Using a different namespace name to avoid clash with\n  // `ApolloLink.DocumentationTypes`\n  export namespace ErrorLinkDocumentationTypes {\n    /**\n     * Callback that is called by `ErrorLink` when an error occurs from a\n     * downstream link in link chain.\n     *\n     * @param options - The options object provided by `ErrorLink` to the error\n     * handler when an error occurs.\n     */\n    export function ErrorHandler(\n      options: ErrorHandlerOptions\n    ): Observable<ApolloLink.Result> | void;\n  }\n\n  /** {@inheritDoc @apollo/client/link/error!ErrorLink.ErrorLinkDocumentationTypes.ErrorHandler:function(1)} */\n  export interface ErrorHandler {\n    (options: ErrorHandlerOptions): Observable<ApolloLink.Result> | void;\n  }\n\n  /**\n   * The object provided to the `ErrorHandler` callback function.\n   */\n  export interface ErrorHandlerOptions {\n    /**\n     * The error that occurred during the operation execution. This can be a\n     * `CombinedGraphQLErrors` instance (for GraphQL errors) or another error\n     * type (for network errors).\n     *\n     * Use `CombinedGraphQLErrors.is(error)` to check if it's a GraphQL error with an `errors` array.\n     */\n    error: ErrorLike;\n    /**\n     * The raw GraphQL result from the server (if available), which may include\n     * partial data alongside errors.\n     */\n    result?: ApolloLink.Result;\n\n    /** The details of the GraphQL operation that produced an error. */\n    operation: ApolloLink.Operation;\n\n    /**\n     * A function that calls the next link in the link chain. Calling\n     * `return forward(operation)` in your `ErrorLink` callback\n     * [retries the operation](../../data/error-handling#retrying-operations), returning a new observable for the\n     * upstream link to subscribe to.\n     */\n    forward: ApolloLink.ForwardFunction;\n  }\n}\n\n/**\n * @deprecated\n * Use `ErrorLink` from `@apollo/client/link/error` instead.\n */\nexport function onError(errorHandler: ErrorLink.ErrorHandler) {\n  return new ErrorLink(errorHandler);\n}\n\n/**\n * Use the `ErrorLink` to perform custom logic when a [GraphQL or network error](https://apollographql.com/docs/react/data/error-handling)\n * occurs.\n *\n * @remarks\n *\n * This link is used after the GraphQL operation completes and execution is\n * moving back up your [link chain](https://apollographql.com/docs/react/introduction#handling-a-response). The `errorHandler` function should\n * not return a value unless you want to [retry the operation](https://apollographql.com/docs/react/data/error-handling#retrying-operations).\n *\n * For more information on the types of errors that might be encountered, see\n * the guide on [error handling](https://apollographql.com/docs/react/data/error-handling).\n *\n * @example\n *\n * ```ts\n * import { ErrorLink } from \"@apollo/client/link/error\";\n * import {\n *   CombinedGraphQLErrors,\n *   CombinedProtocolErrors,\n * } from \"@apollo/client/errors\";\n *\n * // Log any GraphQL errors, protocol errors, or network error that occurred\n * const errorLink = new ErrorLink(({ error, operation }) => {\n *   if (CombinedGraphQLErrors.is(error)) {\n *     error.errors.forEach(({ message, locations, path }) =>\n *       console.log(\n *         `[GraphQL error]: Message: ${message}, Location: ${locations}, Path: ${path}`\n *       )\n *     );\n *   } else if (CombinedProtocolErrors.is(error)) {\n *     error.errors.forEach(({ message, extensions }) =>\n *       console.log(\n *         `[Protocol error]: Message: ${message}, Extensions: ${JSON.stringify(\n *           extensions\n *         )}`\n *       )\n *     );\n *   } else {\n *     console.error(`[Network error]: ${error}`);\n *   }\n * });\n * ```\n */\nexport class ErrorLink extends ApolloLink {\n  constructor(errorHandler: ErrorLink.ErrorHandler) {\n    super((operation, forward) => {\n      return new Observable((observer) => {\n        let sub: Subscription | undefined;\n        let retriedSub: Subscription | undefined;\n        let retriedResult: ReturnType<ErrorLink.ErrorHandler>;\n\n        try {\n          sub = forward(operation).subscribe({\n            next: (result) => {\n              const handler =\n                operation.client[\"queryManager\"].incrementalHandler;\n              const errors =\n                handler.isIncrementalResult(result) ?\n                  handler.extractErrors(result)\n                : result.errors;\n              if (errors) {\n                retriedResult = errorHandler({\n                  error: new CombinedGraphQLErrors(result, errors),\n                  result,\n                  operation,\n                  forward,\n                });\n              } else if (graphQLResultHasProtocolErrors(result)) {\n                retriedResult = errorHandler({\n                  error: result.extensions[PROTOCOL_ERRORS_SYMBOL],\n                  result,\n                  operation,\n                  forward,\n                });\n              }\n\n              retriedSub = retriedResult?.subscribe(observer);\n\n              if (!retriedSub) {\n                observer.next(result);\n              }\n            },\n            error: (error) => {\n              retriedResult = errorHandler({\n                operation,\n                error: toErrorLike(error),\n                forward,\n              });\n              retriedSub = retriedResult?.subscribe(observer);\n\n              if (!retriedSub) {\n                observer.error(error);\n              }\n            },\n            complete: () => {\n              // disable the previous sub from calling complete on observable\n              // if retry is in flight.\n              if (!retriedResult) {\n                observer.complete();\n              }\n            },\n          });\n        } catch (e) {\n          errorHandler({ error: toErrorLike(e), operation, forward });\n          observer.error(e);\n        }\n\n        return () => {\n          if (sub) sub.unsubscribe();\n          if (retriedSub) retriedSub.unsubscribe();\n        };\n      });\n    });\n  }\n}\n"],"mappings":"AACA,SAASA,UAAU,QAAQ,MAAM;AAGjC,SACEC,qBAAqB,EACrBC,8BAA8B,EAC9BC,sBAAsB,EACtBC,WAAW,QACN,uBAAuB;AAC9B,SAASC,UAAU,QAAQ,qBAAqB;AAsDhD;;;;AAIA,OAAM,SAAUC,OAAOA,CAACC,YAAoC;EAC1D,OAAO,IAAIC,SAAS,CAACD,YAAY,CAAC;AACpC;AAEA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AA4CA,OAAM,MAAOC,SAAU,SAAQH,UAAU;EACvCI,YAAYF,YAAoC;IAC9C,KAAK,CAAC,CAACG,SAAS,EAAEC,OAAO,KAAI;MAC3B,OAAO,IAAIX,UAAU,CAAEY,QAAQ,IAAI;QACjC,IAAIC,GAA6B;QACjC,IAAIC,UAAoC;QACxC,IAAIC,aAAiD;QAErD,IAAI;UACFF,GAAG,GAAGF,OAAO,CAACD,SAAS,CAAC,CAACM,SAAS,CAAC;YACjCC,IAAI,EAAGC,MAAM,IAAI;cACf,MAAMC,OAAO,GACXT,SAAS,CAACU,MAAM,CAAC,cAAc,CAAC,CAACC,kBAAkB;cACrD,MAAMC,MAAM,GACVH,OAAO,CAACI,mBAAmB,CAACL,MAAM,CAAC,GACjCC,OAAO,CAACK,aAAa,CAACN,MAAM,CAAC,GAC7BA,MAAM,CAACI,MAAM;cACjB,IAAIA,MAAM,EAAE;gBACVP,aAAa,GAAGR,YAAY,CAAC;kBAC3BkB,KAAK,EAAE,IAAIxB,qBAAqB,CAACiB,MAAM,EAAEI,MAAM,CAAC;kBAChDJ,MAAM;kBACNR,SAAS;kBACTC;iBACD,CAAC;cACJ,CAAC,MAAM,IAAIT,8BAA8B,CAACgB,MAAM,CAAC,EAAE;gBACjDH,aAAa,GAAGR,YAAY,CAAC;kBAC3BkB,KAAK,EAAEP,MAAM,CAACQ,UAAU,CAACvB,sBAAsB,CAAC;kBAChDe,MAAM;kBACNR,SAAS;kBACTC;iBACD,CAAC;cACJ;cAEAG,UAAU,GAAGC,aAAa,EAAEC,SAAS,CAACJ,QAAQ,CAAC;cAE/C,IAAI,CAACE,UAAU,EAAE;gBACfF,QAAQ,CAACK,IAAI,CAACC,MAAM,CAAC;cACvB;YACF,CAAC;YACDO,KAAK,EAAGA,KAAK,IAAI;cACfV,aAAa,GAAGR,YAAY,CAAC;gBAC3BG,SAAS;gBACTe,KAAK,EAAErB,WAAW,CAACqB,KAAK,CAAC;gBACzBd;eACD,CAAC;cACFG,UAAU,GAAGC,aAAa,EAAEC,SAAS,CAACJ,QAAQ,CAAC;cAE/C,IAAI,CAACE,UAAU,EAAE;gBACfF,QAAQ,CAACa,KAAK,CAACA,KAAK,CAAC;cACvB;YACF,CAAC;YACDE,QAAQ,EAAEA,CAAA,KAAK;cACb;cACA;cACA,IAAI,CAACZ,aAAa,EAAE;gBAClBH,QAAQ,CAACe,QAAQ,EAAE;cACrB;YACF;WACD,CAAC;QACJ,CAAC,CAAC,OAAOC,CAAC,EAAE;UACVrB,YAAY,CAAC;YAAEkB,KAAK,EAAErB,WAAW,CAACwB,CAAC,CAAC;YAAElB,SAAS;YAAEC;UAAO,CAAE,CAAC;UAC3DC,QAAQ,CAACa,KAAK,CAACG,CAAC,CAAC;QACnB;QAEA,OAAO,MAAK;UACV,IAAIf,GAAG,EAAEA,GAAG,CAACgB,WAAW,EAAE;UAC1B,IAAIf,UAAU,EAAEA,UAAU,CAACe,WAAW,EAAE;QAC1C,CAAC;MACH,CAAC,CAAC;IACJ,CAAC,CAAC;EACJ","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}