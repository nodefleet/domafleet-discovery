{"ast":null,"code":"import { gql } from '@apollo/client';\n\n// Get domains with basic information\nexport const GET_DOMAINS = gql`\n  query GetDomains($take: Int, $skip: Int, $sortOrder: SortOrder) {\n    names(take: $take, skip: $skip, sortOrder: $sortOrder) {\n      items {\n        name\n        tokenId\n        registrationDate\n        expirationDate\n        parentName\n        isWrapped\n        wrappedTokenId\n      }\n      totalCount\n      pageInfo {\n        hasNextPage\n        hasPreviousPage\n      }\n    }\n  }\n`;\n\n// Get domain details by name\nexport const GET_DOMAIN_BY_NAME = gql`\n  query GetDomainByName($name: String!) {\n    name(name: $name) {\n      name\n      tokenId\n      registrationDate\n      expirationDate\n      parentName\n      isWrapped\n      wrappedTokenId\n      owner\n      resolver\n    }\n  }\n`;\n\n// Get tokens (for marketplace listings)\nexport const GET_TOKENS = gql`\n  query GetTokens($take: Int, $skip: Int) {\n    tokens(take: $take, skip: $skip) {\n      items {\n        tokenId\n        contractAddress\n        name\n        owner\n        mintedAt\n        chain\n      }\n      totalCount\n    }\n  }\n`;\n\n// Get marketplace listings\nexport const GET_LISTINGS = gql`\n  query GetListings($take: Int, $skip: Int) {\n    listings(take: $take, skip: $skip) {\n      items {\n        id\n        tokenId\n        seller\n        price\n        currency\n        status\n        createdAt\n        expiresAt\n      }\n      totalCount\n    }\n  }\n`;\n\n// Get offers for a domain\nexport const GET_OFFERS = gql`\n  query GetOffers($tokenId: String!, $take: Int, $skip: Int) {\n    offers(where: { tokenId: { eq: $tokenId } }, take: $take, skip: $skip) {\n      items {\n        id\n        tokenId\n        bidder\n        amount\n        currency\n        status\n        createdAt\n        expiresAt\n      }\n      totalCount\n    }\n  }\n`;\n\n// Get domain activities (transactions, transfers, etc.)\nexport const GET_DOMAIN_ACTIVITIES = gql`\n  query GetDomainActivities($name: String!, $take: Int, $skip: Int) {\n    nameActivities(\n      where: { name: { eq: $name } }\n      take: $take\n      skip: $skip\n      orderBy: { timestamp: DESC }\n    ) {\n      items {\n        id\n        name\n        activityType\n        from\n        to\n        transactionHash\n        timestamp\n        blockNumber\n        chain\n      }\n      totalCount\n    }\n  }\n`;\n\n// Get statistics\nexport const GET_STATISTICS = gql`\n  query GetStatistics {\n    statistics {\n      totalDomains\n      totalVolume\n      averagePrice\n      activeListings\n    }\n    chainStatistics {\n      chain\n      totalDomains\n      totalVolume\n    }\n  }\n`;\n\n// Get trending domains\nexport const GET_TRENDING_DOMAINS = gql`\n  query GetTrendingDomains($take: Int) {\n    names(take: $take, sortOrder: DESC) {\n      items {\n        name\n        tokenId\n        registrationDate\n        parentName\n        isWrapped\n      }\n    }\n  }\n`;","map":{"version":3,"names":["gql","GET_DOMAINS","GET_DOMAIN_BY_NAME","GET_TOKENS","GET_LISTINGS","GET_OFFERS","GET_DOMAIN_ACTIVITIES","GET_STATISTICS","GET_TRENDING_DOMAINS"],"sources":["/Users/kaelabbott/Downloads/autozama/doma/src/lib/queries.ts"],"sourcesContent":["import { gql } from '@apollo/client';\n\n// Get domains with basic information\nexport const GET_DOMAINS = gql`\n  query GetDomains($take: Int, $skip: Int, $sortOrder: SortOrder) {\n    names(take: $take, skip: $skip, sortOrder: $sortOrder) {\n      items {\n        name\n        tokenId\n        registrationDate\n        expirationDate\n        parentName\n        isWrapped\n        wrappedTokenId\n      }\n      totalCount\n      pageInfo {\n        hasNextPage\n        hasPreviousPage\n      }\n    }\n  }\n`;\n\n// Get domain details by name\nexport const GET_DOMAIN_BY_NAME = gql`\n  query GetDomainByName($name: String!) {\n    name(name: $name) {\n      name\n      tokenId\n      registrationDate\n      expirationDate\n      parentName\n      isWrapped\n      wrappedTokenId\n      owner\n      resolver\n    }\n  }\n`;\n\n// Get tokens (for marketplace listings)\nexport const GET_TOKENS = gql`\n  query GetTokens($take: Int, $skip: Int) {\n    tokens(take: $take, skip: $skip) {\n      items {\n        tokenId\n        contractAddress\n        name\n        owner\n        mintedAt\n        chain\n      }\n      totalCount\n    }\n  }\n`;\n\n// Get marketplace listings\nexport const GET_LISTINGS = gql`\n  query GetListings($take: Int, $skip: Int) {\n    listings(take: $take, skip: $skip) {\n      items {\n        id\n        tokenId\n        seller\n        price\n        currency\n        status\n        createdAt\n        expiresAt\n      }\n      totalCount\n    }\n  }\n`;\n\n// Get offers for a domain\nexport const GET_OFFERS = gql`\n  query GetOffers($tokenId: String!, $take: Int, $skip: Int) {\n    offers(where: { tokenId: { eq: $tokenId } }, take: $take, skip: $skip) {\n      items {\n        id\n        tokenId\n        bidder\n        amount\n        currency\n        status\n        createdAt\n        expiresAt\n      }\n      totalCount\n    }\n  }\n`;\n\n// Get domain activities (transactions, transfers, etc.)\nexport const GET_DOMAIN_ACTIVITIES = gql`\n  query GetDomainActivities($name: String!, $take: Int, $skip: Int) {\n    nameActivities(\n      where: { name: { eq: $name } }\n      take: $take\n      skip: $skip\n      orderBy: { timestamp: DESC }\n    ) {\n      items {\n        id\n        name\n        activityType\n        from\n        to\n        transactionHash\n        timestamp\n        blockNumber\n        chain\n      }\n      totalCount\n    }\n  }\n`;\n\n// Get statistics\nexport const GET_STATISTICS = gql`\n  query GetStatistics {\n    statistics {\n      totalDomains\n      totalVolume\n      averagePrice\n      activeListings\n    }\n    chainStatistics {\n      chain\n      totalDomains\n      totalVolume\n    }\n  }\n`;\n\n// Get trending domains\nexport const GET_TRENDING_DOMAINS = gql`\n  query GetTrendingDomains($take: Int) {\n    names(take: $take, sortOrder: DESC) {\n      items {\n        name\n        tokenId\n        registrationDate\n        parentName\n        isWrapped\n      }\n    }\n  }\n`;\n"],"mappings":"AAAA,SAASA,GAAG,QAAQ,gBAAgB;;AAEpC;AACA,OAAO,MAAMC,WAAW,GAAGD,GAAG;AAC9B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CAAC;;AAED;AACA,OAAO,MAAME,kBAAkB,GAAGF,GAAG;AACrC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CAAC;;AAED;AACA,OAAO,MAAMG,UAAU,GAAGH,GAAG;AAC7B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CAAC;;AAED;AACA,OAAO,MAAMI,YAAY,GAAGJ,GAAG;AAC/B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CAAC;;AAED;AACA,OAAO,MAAMK,UAAU,GAAGL,GAAG;AAC7B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CAAC;;AAED;AACA,OAAO,MAAMM,qBAAqB,GAAGN,GAAG;AACxC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CAAC;;AAED;AACA,OAAO,MAAMO,cAAc,GAAGP,GAAG;AACjC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CAAC;;AAED;AACA,OAAO,MAAMQ,oBAAoB,GAAGR,GAAG;AACvC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}