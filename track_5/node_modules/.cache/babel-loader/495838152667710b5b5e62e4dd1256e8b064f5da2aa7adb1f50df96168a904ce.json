{"ast":null,"code":"import { createDomaOrderbookClient, OrderbookType, DomaOrderbookError, DomaOrderbookErrorCode } from '@doma-protocol/orderbook-sdk';\n// Configuration for the SDK\nconst createSDKConfig = () => ({\n  apiClientOptions: {\n    baseUrl: process.env.REACT_APP_DOMA_API_BASE_URL || 'https://api-testnet.doma.xyz',\n    apiKey: process.env.REACT_APP_DOMA_API_KEY\n  }\n});\n\n// Initialize the SDK client\nlet sdkClient = null;\nexport const getDomaSDKClient = () => {\n  if (!sdkClient) {\n    const config = createSDKConfig();\n    sdkClient = createDomaOrderbookClient(config);\n  }\n  return sdkClient;\n};\n\n// Chain ID mapping for CAIP-2 format\nexport const getChainId = networkId => {\n  const demaChainId = process.env.REACT_APP_DOMA_CHAIN_ID || '97476';\n\n  // Convert to CAIP-2 format (eip155:chainId)\n  if (networkId) {\n    return `eip155:${networkId}`;\n  }\n  return `eip155:${demaChainId}`;\n};\n\n// Progress callback type\n\n// SDK Operations Interface\nexport class DomaSDKClient {\n  constructor() {\n    this.client = void 0;\n    this.client = getDomaSDKClient();\n  }\n\n  /**\n   * Create a domain listing on the marketplace\n   */\n  async createListing(params) {\n    try {\n      const result = await this.client.createListing({\n        params: {\n          items: [{\n            contract: params.contractAddress,\n            tokenId: params.tokenId,\n            price: params.price\n          }],\n          orderbook: OrderbookType.DOMA\n          // Marketplace fees will be fetched automatically\n        },\n        signer: params.signer,\n        chainId: params.chainId || getChainId(),\n        onProgress: params.onProgress || (() => {})\n      });\n      return {\n        success: true,\n        orderId: result.orderId,\n        data: result\n      };\n    } catch (error) {\n      return this.handleError(error, 'createListing');\n    }\n  }\n\n  /**\n   * Buy an existing domain listing\n   */\n  async buyListing(params) {\n    try {\n      const result = await this.client.buyListing({\n        params: {\n          orderId: params.orderId,\n          fulFillerAddress: params.fulFillerAddress\n        },\n        signer: params.signer,\n        chainId: params.chainId || getChainId(),\n        onProgress: params.onProgress || (() => {})\n      });\n      return {\n        success: true,\n        data: result\n      };\n    } catch (error) {\n      return this.handleError(error, 'buyListing');\n    }\n  }\n\n  /**\n   * Create an offer on a domain\n   */\n  async createOffer(params) {\n    try {\n      const expirationTime = params.expirationTime || Math.floor(Date.now() / 1000) + 86400 * 7; // Default 7 days\n      const currencyContractAddress = params.currencyContractAddress || '0x0000000000000000000000000000000000000000'; // ETH\n\n      const result = await this.client.createOffer({\n        params: {\n          items: [{\n            contract: params.contractAddress,\n            tokenId: params.tokenId,\n            currencyContractAddress,\n            price: params.price\n          }],\n          orderbook: OrderbookType.DOMA,\n          expirationTime\n        },\n        signer: params.signer,\n        chainId: params.chainId || getChainId(),\n        onProgress: params.onProgress || (() => {})\n      });\n      return {\n        success: true,\n        orderId: result.orderId,\n        data: result\n      };\n    } catch (error) {\n      return this.handleError(error, 'createOffer');\n    }\n  }\n\n  /**\n   * Accept an offer on your domain\n   */\n  async acceptOffer(params) {\n    try {\n      const result = await this.client.acceptOffer({\n        params: {\n          orderId: params.orderId\n        },\n        signer: params.signer,\n        chainId: params.chainId || getChainId(),\n        onProgress: params.onProgress || (() => {})\n      });\n      return {\n        success: true,\n        data: result\n      };\n    } catch (error) {\n      return this.handleError(error, 'acceptOffer');\n    }\n  }\n\n  /**\n   * Cancel a listing\n   */\n  async cancelListing(params) {\n    try {\n      const result = await this.client.cancelListing({\n        params: {\n          orderId: params.orderId\n        },\n        signer: params.signer,\n        chainId: params.chainId || getChainId(),\n        onProgress: params.onProgress || (() => {})\n      });\n      return {\n        success: true,\n        data: result\n      };\n    } catch (error) {\n      return this.handleError(error, 'cancelListing');\n    }\n  }\n\n  /**\n   * Cancel an offer\n   */\n  async cancelOffer(params) {\n    try {\n      const result = await this.client.cancelOffer({\n        params: {\n          orderId: params.orderId\n        },\n        signer: params.signer,\n        chainId: params.chainId || getChainId(),\n        onProgress: params.onProgress || (() => {})\n      });\n      return {\n        success: true,\n        data: result\n      };\n    } catch (error) {\n      return this.handleError(error, 'cancelOffer');\n    }\n  }\n\n  /**\n   * Get marketplace fees for a contract\n   */\n  async getOrderbookFee(params) {\n    try {\n      const result = await this.client.getOrderbookFee({\n        contractAddress: params.contractAddress,\n        orderbook: params.orderbook || OrderbookType.DOMA,\n        chainId: params.chainId || getChainId()\n      });\n      return {\n        success: true,\n        data: result\n      };\n    } catch (error) {\n      return this.handleError(error, 'getOrderbookFee');\n    }\n  }\n\n  /**\n   * Get supported currencies for trading\n   */\n  async getSupportedCurrencies(params) {\n    try {\n      const result = await this.client.getSupportedCurrencies({\n        contractAddress: params.contractAddress,\n        orderbook: params.orderbook || OrderbookType.DOMA,\n        chainId: params.chainId || getChainId()\n      });\n      return {\n        success: true,\n        data: result\n      };\n    } catch (error) {\n      return this.handleError(error, 'getSupportedCurrencies');\n    }\n  }\n\n  /**\n   * Handle SDK errors with user-friendly messages\n   */\n  handleError(error, operation) {\n    console.error(`DomaSDK ${operation} error:`, error);\n    if (error instanceof DomaOrderbookError) {\n      switch (error.code) {\n        case DomaOrderbookErrorCode.SIGNER_NOT_PROVIDED:\n          return {\n            success: false,\n            error: 'Please connect your wallet to continue',\n            code: 'WALLET_NOT_CONNECTED'\n          };\n        case DomaOrderbookErrorCode.FETCH_FEES_FAILED:\n          return {\n            success: false,\n            error: 'Failed to fetch marketplace fees. Please try again.',\n            code: 'FEES_FETCH_FAILED'\n          };\n        case DomaOrderbookErrorCode.CLIENT_NOT_INITIALIZED:\n          return {\n            success: false,\n            error: 'Trading client not initialized. Please refresh the page.',\n            code: 'CLIENT_ERROR'\n          };\n        default:\n          return {\n            success: false,\n            error: `Trading operation failed: ${error.message}`,\n            code: 'SDK_ERROR'\n          };\n      }\n    }\n\n    // Generic error handling\n    const errorMessage = (error === null || error === void 0 ? void 0 : error.message) || 'An unexpected error occurred';\n    return {\n      success: false,\n      error: errorMessage,\n      code: 'UNKNOWN_ERROR'\n    };\n  }\n}\n\n// Export singleton instance\nexport const domaSDKClient = new DomaSDKClient();\n\n// Export types and utilities\nexport { OrderbookType, DomaOrderbookError, DomaOrderbookErrorCode };\n// Utility function to check if API key is available\nexport const isSDKConfigured = () => {\n  return !!process.env.REACT_APP_DOMA_API_KEY;\n};\n\n// Utility function to get user-friendly chain name\nexport const getChainName = chainId => {\n  const id = (chainId === null || chainId === void 0 ? void 0 : chainId.split(':')[1]) || process.env.REACT_APP_DOMA_CHAIN_ID || '97476';\n  switch (id) {\n    case '1':\n      return 'Ethereum Mainnet';\n    case '97476':\n      return 'Doma Testnet';\n    case '137':\n      return 'Polygon';\n    case '42161':\n      return 'Arbitrum';\n    case '10':\n      return 'Optimism';\n    default:\n      return `Chain ${id}`;\n  }\n};","map":{"version":3,"names":["createDomaOrderbookClient","OrderbookType","DomaOrderbookError","DomaOrderbookErrorCode","createSDKConfig","apiClientOptions","baseUrl","process","env","REACT_APP_DOMA_API_BASE_URL","apiKey","REACT_APP_DOMA_API_KEY","sdkClient","getDomaSDKClient","config","getChainId","networkId","demaChainId","REACT_APP_DOMA_CHAIN_ID","DomaSDKClient","constructor","client","createListing","params","result","items","contract","contractAddress","tokenId","price","orderbook","DOMA","signer","chainId","onProgress","success","orderId","data","error","handleError","buyListing","fulFillerAddress","createOffer","expirationTime","Math","floor","Date","now","currencyContractAddress","acceptOffer","cancelListing","cancelOffer","getOrderbookFee","getSupportedCurrencies","operation","console","code","SIGNER_NOT_PROVIDED","FETCH_FEES_FAILED","CLIENT_NOT_INITIALIZED","message","errorMessage","domaSDKClient","isSDKConfigured","getChainName","id","split"],"sources":["/Users/kaelabbott/Downloads/autozama/doma/src/lib/doma-sdk-client.ts"],"sourcesContent":["import { \n  createDomaOrderbookClient, \n  getDomaOrderbookClient,\n  OrderbookType,\n  type DomaOrderbookSDKConfig,\n  type CreateListingParams,\n  type CreateOfferParams,\n  type BuyListingParams,\n  type AcceptOfferParams,\n  type CancelListingParams,\n  type CancelOfferParams,\n  DomaOrderbookError,\n  DomaOrderbookErrorCode\n} from '@doma-protocol/orderbook-sdk';\nimport { JsonRpcSigner } from 'ethers';\n\n// Configuration for the SDK\nconst createSDKConfig = (): DomaOrderbookSDKConfig => ({\n  apiClientOptions: {\n    baseUrl: process.env.REACT_APP_DOMA_API_BASE_URL || 'https://api-testnet.doma.xyz',\n    apiKey: process.env.REACT_APP_DOMA_API_KEY,\n  },\n});\n\n// Initialize the SDK client\nlet sdkClient: ReturnType<typeof createDomaOrderbookClient> | null = null;\n\nexport const getDomaSDKClient = () => {\n  if (!sdkClient) {\n    const config = createSDKConfig();\n    sdkClient = createDomaOrderbookClient(config);\n  }\n  return sdkClient;\n};\n\n// Chain ID mapping for CAIP-2 format\nexport const getChainId = (networkId?: string | number): string => {\n  const demaChainId = process.env.REACT_APP_DOMA_CHAIN_ID || '97476';\n  \n  // Convert to CAIP-2 format (eip155:chainId)\n  if (networkId) {\n    return `eip155:${networkId}`;\n  }\n  return `eip155:${demaChainId}`;\n};\n\n// Progress callback type\nexport type ProgressCallback = (step: string, progress: number) => void;\n\n// SDK Operations Interface\nexport class DomaSDKClient {\n  private client: ReturnType<typeof createDomaOrderbookClient>;\n\n  constructor() {\n    this.client = getDomaSDKClient();\n  }\n\n  /**\n   * Create a domain listing on the marketplace\n   */\n  async createListing(params: {\n    contractAddress: string;\n    tokenId: string;\n    price: string; // in wei\n    signer: JsonRpcSigner;\n    chainId?: string;\n    onProgress?: ProgressCallback;\n  }) {\n    try {\n      const result = await this.client.createListing({\n        params: {\n          items: [{\n            contract: params.contractAddress,\n            tokenId: params.tokenId,\n            price: params.price,\n          }],\n          orderbook: OrderbookType.DOMA,\n          // Marketplace fees will be fetched automatically\n        },\n        signer: params.signer,\n        chainId: params.chainId || getChainId(),\n        onProgress: params.onProgress || (() => {}),\n      });\n\n      return { success: true, orderId: result.orderId, data: result };\n    } catch (error) {\n      return this.handleError(error, 'createListing');\n    }\n  }\n\n  /**\n   * Buy an existing domain listing\n   */\n  async buyListing(params: {\n    orderId: string;\n    fulFillerAddress: string;\n    signer: JsonRpcSigner;\n    chainId?: string;\n    onProgress?: ProgressCallback;\n  }) {\n    try {\n      const result = await this.client.buyListing({\n        params: {\n          orderId: params.orderId,\n          fulFillerAddress: params.fulFillerAddress,\n        },\n        signer: params.signer,\n        chainId: params.chainId || getChainId(),\n        onProgress: params.onProgress || (() => {}),\n      });\n\n      return { success: true, data: result };\n    } catch (error) {\n      return this.handleError(error, 'buyListing');\n    }\n  }\n\n  /**\n   * Create an offer on a domain\n   */\n  async createOffer(params: {\n    contractAddress: string;\n    tokenId: string;\n    price: string; // in wei\n    currencyContractAddress?: string; // Default to ETH (0x0)\n    expirationTime?: number; // Unix timestamp\n    signer: JsonRpcSigner;\n    chainId?: string;\n    onProgress?: ProgressCallback;\n  }) {\n    try {\n      const expirationTime = params.expirationTime || (Math.floor(Date.now() / 1000) + 86400 * 7); // Default 7 days\n      const currencyContractAddress = params.currencyContractAddress || '0x0000000000000000000000000000000000000000'; // ETH\n\n      const result = await this.client.createOffer({\n        params: {\n          items: [{\n            contract: params.contractAddress,\n            tokenId: params.tokenId,\n            currencyContractAddress,\n            price: params.price,\n          }],\n          orderbook: OrderbookType.DOMA,\n          expirationTime,\n        },\n        signer: params.signer,\n        chainId: params.chainId || getChainId(),\n        onProgress: params.onProgress || (() => {}),\n      });\n\n      return { success: true, orderId: result.orderId, data: result };\n    } catch (error) {\n      return this.handleError(error, 'createOffer');\n    }\n  }\n\n  /**\n   * Accept an offer on your domain\n   */\n  async acceptOffer(params: {\n    orderId: string;\n    signer: JsonRpcSigner;\n    chainId?: string;\n    onProgress?: ProgressCallback;\n  }) {\n    try {\n      const result = await this.client.acceptOffer({\n        params: {\n          orderId: params.orderId,\n        },\n        signer: params.signer,\n        chainId: params.chainId || getChainId(),\n        onProgress: params.onProgress || (() => {}),\n      });\n\n      return { success: true, data: result };\n    } catch (error) {\n      return this.handleError(error, 'acceptOffer');\n    }\n  }\n\n  /**\n   * Cancel a listing\n   */\n  async cancelListing(params: {\n    orderId: string;\n    signer: JsonRpcSigner;\n    chainId?: string;\n    onProgress?: ProgressCallback;\n  }) {\n    try {\n      const result = await this.client.cancelListing({\n        params: {\n          orderId: params.orderId,\n        },\n        signer: params.signer,\n        chainId: params.chainId || getChainId(),\n        onProgress: params.onProgress || (() => {}),\n      });\n\n      return { success: true, data: result };\n    } catch (error) {\n      return this.handleError(error, 'cancelListing');\n    }\n  }\n\n  /**\n   * Cancel an offer\n   */\n  async cancelOffer(params: {\n    orderId: string;\n    signer: JsonRpcSigner;\n    chainId?: string;\n    onProgress?: ProgressCallback;\n  }) {\n    try {\n      const result = await this.client.cancelOffer({\n        params: {\n          orderId: params.orderId,\n        },\n        signer: params.signer,\n        chainId: params.chainId || getChainId(),\n        onProgress: params.onProgress || (() => {}),\n      });\n\n      return { success: true, data: result };\n    } catch (error) {\n      return this.handleError(error, 'cancelOffer');\n    }\n  }\n\n  /**\n   * Get marketplace fees for a contract\n   */\n  async getOrderbookFee(params: {\n    contractAddress: string;\n    orderbook?: OrderbookType;\n    chainId?: string;\n  }) {\n    try {\n      const result = await this.client.getOrderbookFee({\n        contractAddress: params.contractAddress,\n        orderbook: params.orderbook || OrderbookType.DOMA,\n        chainId: params.chainId || getChainId(),\n      });\n\n      return { success: true, data: result };\n    } catch (error) {\n      return this.handleError(error, 'getOrderbookFee');\n    }\n  }\n\n  /**\n   * Get supported currencies for trading\n   */\n  async getSupportedCurrencies(params: {\n    contractAddress: string;\n    orderbook?: OrderbookType;\n    chainId?: string;\n  }) {\n    try {\n      const result = await this.client.getSupportedCurrencies({\n        contractAddress: params.contractAddress,\n        orderbook: params.orderbook || OrderbookType.DOMA,\n        chainId: params.chainId || getChainId(),\n      });\n\n      return { success: true, data: result };\n    } catch (error) {\n      return this.handleError(error, 'getSupportedCurrencies');\n    }\n  }\n\n  /**\n   * Handle SDK errors with user-friendly messages\n   */\n  private handleError(error: any, operation: string) {\n    console.error(`DomaSDK ${operation} error:`, error);\n\n    if (error instanceof DomaOrderbookError) {\n      switch (error.code) {\n        case DomaOrderbookErrorCode.SIGNER_NOT_PROVIDED:\n          return {\n            success: false,\n            error: 'Please connect your wallet to continue',\n            code: 'WALLET_NOT_CONNECTED'\n          };\n        case DomaOrderbookErrorCode.FETCH_FEES_FAILED:\n          return {\n            success: false,\n            error: 'Failed to fetch marketplace fees. Please try again.',\n            code: 'FEES_FETCH_FAILED'\n          };\n        case DomaOrderbookErrorCode.CLIENT_NOT_INITIALIZED:\n          return {\n            success: false,\n            error: 'Trading client not initialized. Please refresh the page.',\n            code: 'CLIENT_ERROR'\n          };\n        default:\n          return {\n            success: false,\n            error: `Trading operation failed: ${error.message}`,\n            code: 'SDK_ERROR'\n          };\n      }\n    }\n\n    // Generic error handling\n    const errorMessage = error?.message || 'An unexpected error occurred';\n    return {\n      success: false,\n      error: errorMessage,\n      code: 'UNKNOWN_ERROR'\n    };\n  }\n}\n\n// Export singleton instance\nexport const domaSDKClient = new DomaSDKClient();\n\n// Export types and utilities\nexport { OrderbookType, DomaOrderbookError, DomaOrderbookErrorCode };\nexport type { CreateListingParams, CreateOfferParams, BuyListingParams, AcceptOfferParams };\n\n// Utility function to check if API key is available\nexport const isSDKConfigured = (): boolean => {\n  return !!process.env.REACT_APP_DOMA_API_KEY;\n};\n\n// Utility function to get user-friendly chain name\nexport const getChainName = (chainId?: string): string => {\n  const id = chainId?.split(':')[1] || process.env.REACT_APP_DOMA_CHAIN_ID || '97476';\n  \n  switch (id) {\n    case '1':\n      return 'Ethereum Mainnet';\n    case '97476':\n      return 'Doma Testnet';\n    case '137':\n      return 'Polygon';\n    case '42161':\n      return 'Arbitrum';\n    case '10':\n      return 'Optimism';\n    default:\n      return `Chain ${id}`;\n  }\n};\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}