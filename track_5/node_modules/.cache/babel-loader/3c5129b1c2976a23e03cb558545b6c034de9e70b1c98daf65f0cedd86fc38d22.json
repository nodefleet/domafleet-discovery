{"ast":null,"code":"var _s = $RefreshSig$(),\n  _s2 = $RefreshSig$(),\n  _s3 = $RefreshSig$(),\n  _s4 = $RefreshSig$(),\n  _s5 = $RefreshSig$(),\n  _s6 = $RefreshSig$(),\n  _s7 = $RefreshSig$();\nimport { useState, useEffect, useCallback } from 'react';\nimport { graphqlClient } from '../lib/doma-client';\nimport { GET_DOMAIN, GET_NAME_STATISTICS, GET_OFFERS, GET_TOKEN_ACTIVITIES, GET_NAME_ACTIVITIES } from '../lib/graphql-queries';\n\n// Types for domain data based on Doma schema\n\n// Legacy interfaces for backward compatibility\n\n// Helper function to convert DomaName to legacy Domain format\nfunction convertDomaNameToDomain(domaName) {\n  const firstToken = domaName.tokens[0];\n  const firstListing = firstToken === null || firstToken === void 0 ? void 0 : firstToken.listings[0];\n  return {\n    id: domaName.name,\n    name: domaName.name,\n    tokenId: (firstToken === null || firstToken === void 0 ? void 0 : firstToken.tokenId) || '',\n    ownerAddress: (firstToken === null || firstToken === void 0 ? void 0 : firstToken.ownerAddress) || '',\n    createdAt: domaName.tokenizedAt,\n    expiresAt: domaName.expiresAt,\n    registrationCost: '0',\n    // Not available in schema\n    renewalCost: '0',\n    // Not available in schema\n    isListed: ((firstToken === null || firstToken === void 0 ? void 0 : firstToken.listings) || []).length > 0,\n    currentPrice: firstListing === null || firstListing === void 0 ? void 0 : firstListing.price,\n    listingId: firstListing === null || firstListing === void 0 ? void 0 : firstListing.id,\n    offers: [],\n    // Would need separate query\n    activities: [] // Would need separate query\n  };\n}\n\n// Hook to fetch multiple domains with pagination and filtering\nexport function useDomains(limit = 50, skip = 0, filters) {\n  _s();\n  const [data, setData] = useState([]);\n  const [loading, setLoading] = useState(true);\n  const [error, setError] = useState(null);\n  const fetchDomains = useCallback(async () => {\n    try {\n      setLoading(true);\n      setError(null);\n\n      // Use mock data for now until API key is configured\n      await new Promise(resolve => setTimeout(resolve, 1000)); // Simulate API delay\n\n      const mockDomains = [{\n        id: '1',\n        name: 'premium.doma',\n        tokenId: '12345',\n        ownerAddress: '0x1234567890123456789012345678901234567890',\n        createdAt: '2024-01-15T10:00:00Z',\n        expiresAt: '2025-01-15T10:00:00Z',\n        registrationCost: '0.1',\n        renewalCost: '0.05',\n        isListed: true,\n        currentPrice: '2.5',\n        listingId: 'listing-123',\n        offers: [],\n        activities: []\n      }, {\n        id: '2',\n        name: 'crypto.doma',\n        tokenId: '12346',\n        ownerAddress: '0x9876543210987654321098765432109876543210',\n        createdAt: '2024-02-01T14:30:00Z',\n        expiresAt: '2025-02-01T14:30:00Z',\n        registrationCost: '0.08',\n        renewalCost: '0.04',\n        isListed: true,\n        currentPrice: '1.8',\n        listingId: 'listing-124',\n        offers: [],\n        activities: []\n      }, {\n        id: '3',\n        name: 'web3.doma',\n        tokenId: '12347',\n        ownerAddress: '0x5555555555555555555555555555555555555555',\n        createdAt: '2024-03-10T09:15:00Z',\n        expiresAt: '2025-03-10T09:15:00Z',\n        registrationCost: '0.12',\n        renewalCost: '0.06',\n        isListed: false,\n        offers: [],\n        activities: []\n      }, {\n        id: '4',\n        name: 'nft.doma',\n        tokenId: '12348',\n        ownerAddress: '0x7777777777777777777777777777777777777777',\n        createdAt: '2024-04-05T16:45:00Z',\n        expiresAt: '2025-04-05T16:45:00Z',\n        registrationCost: '0.15',\n        renewalCost: '0.075',\n        isListed: true,\n        currentPrice: '3.2',\n        listingId: 'listing-125',\n        offers: [],\n        activities: []\n      }, {\n        id: '5',\n        name: 'defi.doma',\n        tokenId: '12349',\n        ownerAddress: '0x8888888888888888888888888888888888888888',\n        createdAt: '2024-05-20T11:30:00Z',\n        expiresAt: '2025-05-20T11:30:00Z',\n        registrationCost: '0.09',\n        renewalCost: '0.045',\n        isListed: false,\n        offers: [],\n        activities: []\n      }, {\n        id: '6',\n        name: 'dao.doma',\n        tokenId: '12350',\n        ownerAddress: '0x9999999999999999999999999999999999999999',\n        createdAt: '2024-06-12T13:20:00Z',\n        expiresAt: '2025-06-12T13:20:00Z',\n        registrationCost: '0.11',\n        renewalCost: '0.055',\n        isListed: true,\n        currentPrice: '2.1',\n        listingId: 'listing-126',\n        offers: [],\n        activities: []\n      }];\n\n      // Apply basic filtering if provided\n      let filteredDomains = mockDomains;\n      if (filters !== null && filters !== void 0 && filters.name) {\n        filteredDomains = filteredDomains.filter(domain => domain.name.toLowerCase().includes(filters.name.toLowerCase()));\n      }\n      setData(filteredDomains.slice(skip, skip + limit));\n    } catch (err) {\n      console.error('Error fetching domains:', err);\n      setError(err instanceof Error ? err.message : 'Failed to fetch domains');\n    } finally {\n      setLoading(false);\n    }\n  }, [limit, skip, filters]);\n  useEffect(() => {\n    fetchDomains();\n  }, [fetchDomains]);\n  return {\n    data,\n    loading,\n    error,\n    refetch: fetchDomains\n  };\n}\n\n// Hook to fetch a single domain by name\n_s(useDomains, \"jAAedYe4rOCDYvDvKRuLrR0YTck=\");\nexport function useDomain(domainName) {\n  _s2();\n  const [data, setData] = useState(null);\n  const [loading, setLoading] = useState(true);\n  const [error, setError] = useState(null);\n  const fetchDomain = useCallback(async () => {\n    if (!domainName) return;\n    try {\n      setLoading(true);\n      setError(null);\n      const response = await graphqlClient.request(GET_DOMAIN, {\n        name: domainName\n      });\n      const result = response;\n      if (result.name) {\n        const domain = convertDomaNameToDomain(result.name);\n        setData(domain);\n      } else {\n        setData(null);\n      }\n    } catch (err) {\n      console.error('Error fetching domain:', err);\n      setError(err instanceof Error ? err.message : 'Failed to fetch domain');\n    } finally {\n      setLoading(false);\n    }\n  }, [domainName]);\n  useEffect(() => {\n    fetchDomain();\n  }, [fetchDomain]);\n  return {\n    data,\n    loading,\n    error,\n    refetch: fetchDomain\n  };\n}\n\n// Hook to fetch domain statistics\n_s2(useDomain, \"l+vBHPVKuj5fqWmre/6/9MMevj0=\");\nexport function useDomainStatistics(tokenId) {\n  _s3();\n  const [data, setData] = useState(null);\n  const [loading, setLoading] = useState(true);\n  const [error, setError] = useState(null);\n  const fetchStatistics = useCallback(async () => {\n    if (!tokenId) {\n      setLoading(false);\n      return;\n    }\n    try {\n      setLoading(true);\n      setError(null);\n      const response = await graphqlClient.request(GET_NAME_STATISTICS, {\n        tokenId\n      });\n      const result = response;\n      setData(result.nameStatistics || null);\n    } catch (err) {\n      console.error('Error fetching domain statistics:', err);\n      setError(err instanceof Error ? err.message : 'Failed to fetch domain statistics');\n    } finally {\n      setLoading(false);\n    }\n  }, [tokenId]);\n  useEffect(() => {\n    fetchStatistics();\n  }, [fetchStatistics]);\n  return {\n    data,\n    loading,\n    error,\n    refetch: fetchStatistics\n  };\n}\n\n// Hook to fetch marketplace listings\n_s3(useDomainStatistics, \"sa8qLyqSTTnLf77nLUprujujXuA=\");\nexport function useMarketplaceListings(limit = 50, skip = 0, filters) {\n  _s4();\n  const [data, setData] = useState([]);\n  const [loading, setLoading] = useState(true);\n  const [error, setError] = useState(null);\n  const fetchListings = useCallback(async () => {\n    try {\n      setLoading(true);\n      setError(null);\n\n      // Use mock data for now\n      await new Promise(resolve => setTimeout(resolve, 800));\n      const mockListings = [{\n        id: 'listing-123',\n        externalId: 'ext-123',\n        price: '2500000000000000000',\n        // 2.5 ETH in wei\n        offererAddress: '0x1234567890123456789012345678901234567890',\n        orderbook: 'DOMA',\n        currency: {\n          name: 'Ether',\n          symbol: 'ETH',\n          decimals: 18\n        },\n        expiresAt: '2025-01-15T10:00:00Z',\n        createdAt: '2024-12-01T10:00:00Z'\n      }, {\n        id: 'listing-124',\n        externalId: 'ext-124',\n        price: '1800000000000000000',\n        // 1.8 ETH in wei\n        offererAddress: '0x9876543210987654321098765432109876543210',\n        orderbook: 'DOMA',\n        currency: {\n          name: 'Ether',\n          symbol: 'ETH',\n          decimals: 18\n        },\n        expiresAt: '2025-02-01T14:30:00Z',\n        createdAt: '2024-11-15T14:30:00Z'\n      }];\n      setData(mockListings.slice(skip, skip + limit));\n    } catch (err) {\n      console.error('Error fetching marketplace listings:', err);\n      setError(err instanceof Error ? err.message : 'Failed to fetch marketplace listings');\n    } finally {\n      setLoading(false);\n    }\n  }, [limit, skip, filters]);\n  useEffect(() => {\n    fetchListings();\n  }, [fetchListings]);\n  return {\n    data,\n    loading,\n    error,\n    refetch: fetchListings\n  };\n}\n\n// Hook to fetch offers\n_s4(useMarketplaceListings, \"8x4gMINCvTcY/GtRL1Nehz3RNaQ=\");\nexport function useOffers(limit = 50, skip = 0, filters) {\n  _s5();\n  const [data, setData] = useState([]);\n  const [loading, setLoading] = useState(true);\n  const [error, setError] = useState(null);\n  const fetchOffers = useCallback(async () => {\n    try {\n      var _result$offers;\n      setLoading(true);\n      setError(null);\n      const variables = {\n        take: limit,\n        skip: skip,\n        tokenId: filters === null || filters === void 0 ? void 0 : filters.tokenId,\n        status: (filters === null || filters === void 0 ? void 0 : filters.status) || 'ACTIVE',\n        sortOrder: (filters === null || filters === void 0 ? void 0 : filters.sortOrder) || 'DESC'\n      };\n      const response = await graphqlClient.request(GET_OFFERS, variables);\n      const result = response;\n      setData(((_result$offers = result.offers) === null || _result$offers === void 0 ? void 0 : _result$offers.items) || []);\n    } catch (err) {\n      console.error('Error fetching offers:', err);\n      setError(err instanceof Error ? err.message : 'Failed to fetch offers');\n    } finally {\n      setLoading(false);\n    }\n  }, [limit, skip, filters]);\n  useEffect(() => {\n    fetchOffers();\n  }, [fetchOffers]);\n  return {\n    data,\n    loading,\n    error,\n    refetch: fetchOffers\n  };\n}\n\n// Hook to fetch token activities\n_s5(useOffers, \"jrG/8Vb5t3pUHOp9SHVj+KyQaOk=\");\nexport function useTokenActivities(tokenId, limit = 50, skip = 0) {\n  _s6();\n  const [data, setData] = useState([]);\n  const [loading, setLoading] = useState(true);\n  const [error, setError] = useState(null);\n  const fetchActivities = useCallback(async () => {\n    if (!tokenId) return;\n    try {\n      var _result$tokenActiviti;\n      setLoading(true);\n      setError(null);\n      const variables = {\n        tokenId,\n        take: limit,\n        skip: skip,\n        sortOrder: 'DESC'\n      };\n      const response = await graphqlClient.request(GET_TOKEN_ACTIVITIES, variables);\n      const result = response;\n      setData(((_result$tokenActiviti = result.tokenActivities) === null || _result$tokenActiviti === void 0 ? void 0 : _result$tokenActiviti.items) || []);\n    } catch (err) {\n      console.error('Error fetching token activities:', err);\n      setError(err instanceof Error ? err.message : 'Failed to fetch token activities');\n    } finally {\n      setLoading(false);\n    }\n  }, [tokenId, limit, skip]);\n  useEffect(() => {\n    fetchActivities();\n  }, [fetchActivities]);\n  return {\n    data,\n    loading,\n    error,\n    refetch: fetchActivities\n  };\n}\n\n// Hook to fetch name activities\n_s6(useTokenActivities, \"kTav9sHWremNe2k6Q9ge50TdGvI=\");\nexport function useNameActivities(name, limit = 50, skip = 0) {\n  _s7();\n  const [data, setData] = useState([]);\n  const [loading, setLoading] = useState(true);\n  const [error, setError] = useState(null);\n  const fetchActivities = useCallback(async () => {\n    if (!name) return;\n    try {\n      var _result$nameActivitie;\n      setLoading(true);\n      setError(null);\n      const variables = {\n        name,\n        take: limit,\n        skip: skip,\n        sortOrder: 'DESC'\n      };\n      const response = await graphqlClient.request(GET_NAME_ACTIVITIES, variables);\n      const result = response;\n      setData(((_result$nameActivitie = result.nameActivities) === null || _result$nameActivitie === void 0 ? void 0 : _result$nameActivitie.items) || []);\n    } catch (err) {\n      console.error('Error fetching name activities:', err);\n      setError(err instanceof Error ? err.message : 'Failed to fetch name activities');\n    } finally {\n      setLoading(false);\n    }\n  }, [name, limit, skip]);\n  useEffect(() => {\n    fetchActivities();\n  }, [fetchActivities]);\n  return {\n    data,\n    loading,\n    error,\n    refetch: fetchActivities\n  };\n}\n_s7(useNameActivities, \"kTav9sHWremNe2k6Q9ge50TdGvI=\");","map":{"version":3,"names":["useState","useEffect","useCallback","graphqlClient","GET_DOMAIN","GET_NAME_STATISTICS","GET_OFFERS","GET_TOKEN_ACTIVITIES","GET_NAME_ACTIVITIES","convertDomaNameToDomain","domaName","firstToken","tokens","firstListing","listings","id","name","tokenId","ownerAddress","createdAt","tokenizedAt","expiresAt","registrationCost","renewalCost","isListed","length","currentPrice","price","listingId","offers","activities","useDomains","limit","skip","filters","_s","data","setData","loading","setLoading","error","setError","fetchDomains","Promise","resolve","setTimeout","mockDomains","filteredDomains","filter","domain","toLowerCase","includes","slice","err","console","Error","message","refetch","useDomain","domainName","_s2","fetchDomain","response","request","result","useDomainStatistics","_s3","fetchStatistics","nameStatistics","useMarketplaceListings","_s4","fetchListings","mockListings","externalId","offererAddress","orderbook","currency","symbol","decimals","useOffers","_s5","fetchOffers","_result$offers","variables","take","status","sortOrder","items","useTokenActivities","_s6","fetchActivities","_result$tokenActiviti","tokenActivities","useNameActivities","_s7","_result$nameActivitie","nameActivities"],"sources":["/Users/kaelabbott/Downloads/autozama/doma/src/hooks/useDomainData.ts"],"sourcesContent":["import { useState, useEffect, useCallback } from 'react';\nimport { graphqlClient } from '../lib/doma-client';\nimport {\n  GET_DOMAINS,\n  GET_DOMAIN,\n  GET_NAME_STATISTICS,\n  GET_LISTINGS,\n  GET_OFFERS,\n  GET_TOKEN_ACTIVITIES,\n  GET_NAME_ACTIVITIES,\n} from '../lib/graphql-queries';\n\n// Types for domain data based on Doma schema\nexport interface DomainListResponse {\n  names: {\n    items: DomaName[];\n    totalCount: number;\n    pageSize: number;\n    currentPage: number;\n    totalPages: number;\n    hasPreviousPage: boolean;\n    hasNextPage: boolean;\n  };\n}\n\nexport interface DomaName {\n  name: string;\n  expiresAt: string;\n  tokenizedAt: string;\n  eoi: boolean;\n  transferLock?: boolean;\n  claimedBy?: string;\n  registrar: {\n    name: string;\n    ianaId: string;\n  };\n  tokens: DomaToken[];\n  activities?: DomaNameActivity[];\n}\n\nexport interface DomaToken {\n  tokenId: string;\n  networkId: string;\n  ownerAddress: string;\n  type: string;\n  startsAt?: string;\n  expiresAt: string;\n  createdAt: string;\n  explorerUrl: string;\n  tokenAddress: string;\n  chain: {\n    name: string;\n    networkId: string;\n  };\n  listings: DomaListing[];\n  activities?: DomaTokenActivity[];\n}\n\nexport interface DomaListing {\n  id: string;\n  externalId: string;\n  price: string;\n  offererAddress: string;\n  orderbook: string;\n  currency: {\n    name: string;\n    symbol: string;\n    decimals: number;\n  };\n  expiresAt: string;\n  createdAt: string;\n}\n\nexport interface DomaOffer {\n  id: string;\n  externalId: string;\n  price: string;\n  offererAddress: string;\n  orderbook: string;\n  currency: {\n    name: string;\n    symbol: string;\n    decimals: number;\n  };\n  expiresAt: string;\n  createdAt: string;\n  name: string;\n  nameExpiresAt: string;\n  registrar: {\n    name: string;\n    ianaId: string;\n  };\n  tokenId: string;\n  tokenAddress: string;\n  chain: {\n    name: string;\n    networkId: string;\n  };\n}\n\nexport interface DomaTokenActivity {\n  type: string;\n  createdAt: string;\n  tokenId?: string;\n  txHash?: string;\n  networkId?: string;\n  finalized?: boolean;\n  transferredTo?: string;\n  transferredFrom?: string;\n  orderId?: string;\n  startsAt?: string;\n  seller?: string;\n  buyer?: string;\n  payment?: {\n    price: string;\n    tokenAddress: string;\n    currencySymbol: string;\n  };\n  orderbook?: string;\n  purchasedAt?: string;\n}\n\nexport interface DomaNameActivity {\n  type: string;\n  createdAt: string;\n  sld?: string;\n  tld?: string;\n  claimedBy?: string;\n  txHash?: string;\n  networkId?: string;\n}\n\nexport interface DomaNameStatistics {\n  name: string;\n  activeOffers: number;\n  offersLast3Days: number;\n  highestOffer?: DomaOffer;\n}\n\n// Legacy interfaces for backward compatibility\nexport interface Domain {\n  id: string;\n  name: string;\n  tokenId: string;\n  ownerAddress: string;\n  createdAt: string;\n  expiresAt: string;\n  registrationCost: string;\n  renewalCost: string;\n  isListed: boolean;\n  currentPrice?: string;\n  listingId?: string;\n  offers?: Offer[];\n  activities?: Activity[];\n}\n\nexport interface Offer {\n  id: string;\n  price: string;\n  offerAddress: string;\n  expiresAt: string;\n  status: string;\n  createdAt: string;\n}\n\nexport interface Activity {\n  id: string;\n  type: string;\n  fromAddress: string;\n  toAddress: string;\n  price?: string;\n  timestamp: string;\n  transactionHash: string;\n}\n\nexport interface DomainStatistics {\n  totalDomains: number;\n  totalVolume: string;\n  totalSales: number;\n  averagePrice: string;\n  floorPrice: string;\n  topSale: string;\n}\n\nexport interface Listing {\n  id: string;\n  tokenId: string;\n  price: string;\n  seller: string;\n  buyer?: string;\n  status: string;\n  createdAt: string;\n  expiresAt: string;\n  domain: Domain;\n}\n\n// Helper function to convert DomaName to legacy Domain format\nfunction convertDomaNameToDomain(domaName: DomaName): Domain {\n  const firstToken = domaName.tokens[0];\n  const firstListing = firstToken?.listings[0];\n  \n  return {\n    id: domaName.name,\n    name: domaName.name,\n    tokenId: firstToken?.tokenId || '',\n    ownerAddress: firstToken?.ownerAddress || '',\n    createdAt: domaName.tokenizedAt,\n    expiresAt: domaName.expiresAt,\n    registrationCost: '0', // Not available in schema\n    renewalCost: '0', // Not available in schema\n    isListed: (firstToken?.listings || []).length > 0,\n    currentPrice: firstListing?.price,\n    listingId: firstListing?.id,\n    offers: [], // Would need separate query\n    activities: [], // Would need separate query\n  };\n}\n\n// Hook to fetch multiple domains with pagination and filtering\nexport function useDomains(limit: number = 50, skip: number = 0, filters?: any) {\n  const [data, setData] = useState<Domain[]>([]);\n  const [loading, setLoading] = useState(true);\n  const [error, setError] = useState<string | null>(null);\n\n  const fetchDomains = useCallback(async () => {\n    try {\n      setLoading(true);\n      setError(null);\n\n      // Use mock data for now until API key is configured\n      await new Promise(resolve => setTimeout(resolve, 1000)); // Simulate API delay\n      \n      const mockDomains: Domain[] = [\n        {\n          id: '1',\n          name: 'premium.doma',\n          tokenId: '12345',\n          ownerAddress: '0x1234567890123456789012345678901234567890',\n          createdAt: '2024-01-15T10:00:00Z',\n          expiresAt: '2025-01-15T10:00:00Z',\n          registrationCost: '0.1',\n          renewalCost: '0.05',\n          isListed: true,\n          currentPrice: '2.5',\n          listingId: 'listing-123',\n          offers: [],\n          activities: [],\n        },\n        {\n          id: '2',\n          name: 'crypto.doma',\n          tokenId: '12346',\n          ownerAddress: '0x9876543210987654321098765432109876543210',\n          createdAt: '2024-02-01T14:30:00Z',\n          expiresAt: '2025-02-01T14:30:00Z',\n          registrationCost: '0.08',\n          renewalCost: '0.04',\n          isListed: true,\n          currentPrice: '1.8',\n          listingId: 'listing-124',\n          offers: [],\n          activities: [],\n        },\n        {\n          id: '3',\n          name: 'web3.doma',\n          tokenId: '12347',\n          ownerAddress: '0x5555555555555555555555555555555555555555',\n          createdAt: '2024-03-10T09:15:00Z',\n          expiresAt: '2025-03-10T09:15:00Z',\n          registrationCost: '0.12',\n          renewalCost: '0.06',\n          isListed: false,\n          offers: [],\n          activities: [],\n        },\n        {\n          id: '4',\n          name: 'nft.doma',\n          tokenId: '12348',\n          ownerAddress: '0x7777777777777777777777777777777777777777',\n          createdAt: '2024-04-05T16:45:00Z',\n          expiresAt: '2025-04-05T16:45:00Z',\n          registrationCost: '0.15',\n          renewalCost: '0.075',\n          isListed: true,\n          currentPrice: '3.2',\n          listingId: 'listing-125',\n          offers: [],\n          activities: [],\n        },\n        {\n          id: '5',\n          name: 'defi.doma',\n          tokenId: '12349',\n          ownerAddress: '0x8888888888888888888888888888888888888888',\n          createdAt: '2024-05-20T11:30:00Z',\n          expiresAt: '2025-05-20T11:30:00Z',\n          registrationCost: '0.09',\n          renewalCost: '0.045',\n          isListed: false,\n          offers: [],\n          activities: [],\n        },\n        {\n          id: '6',\n          name: 'dao.doma',\n          tokenId: '12350',\n          ownerAddress: '0x9999999999999999999999999999999999999999',\n          createdAt: '2024-06-12T13:20:00Z',\n          expiresAt: '2025-06-12T13:20:00Z',\n          registrationCost: '0.11',\n          renewalCost: '0.055',\n          isListed: true,\n          currentPrice: '2.1',\n          listingId: 'listing-126',\n          offers: [],\n          activities: [],\n        }\n      ];\n\n      // Apply basic filtering if provided\n      let filteredDomains = mockDomains;\n      if (filters?.name) {\n        filteredDomains = filteredDomains.filter(domain => \n          domain.name.toLowerCase().includes(filters.name.toLowerCase())\n        );\n      }\n\n      setData(filteredDomains.slice(skip, skip + limit));\n    } catch (err) {\n      console.error('Error fetching domains:', err);\n      setError(err instanceof Error ? err.message : 'Failed to fetch domains');\n    } finally {\n      setLoading(false);\n    }\n  }, [limit, skip, filters]);\n\n  useEffect(() => {\n    fetchDomains();\n  }, [fetchDomains]);\n\n  return { data, loading, error, refetch: fetchDomains };\n}\n\n// Hook to fetch a single domain by name\nexport function useDomain(domainName: string) {\n  const [data, setData] = useState<Domain | null>(null);\n  const [loading, setLoading] = useState(true);\n  const [error, setError] = useState<string | null>(null);\n\n  const fetchDomain = useCallback(async () => {\n    if (!domainName) return;\n\n    try {\n      setLoading(true);\n      setError(null);\n\n      const response = await graphqlClient.request(GET_DOMAIN, { name: domainName });\n      const result = response as { name: DomaName };\n      \n      if (result.name) {\n        const domain = convertDomaNameToDomain(result.name);\n        setData(domain);\n      } else {\n        setData(null);\n      }\n    } catch (err) {\n      console.error('Error fetching domain:', err);\n      setError(err instanceof Error ? err.message : 'Failed to fetch domain');\n    } finally {\n      setLoading(false);\n    }\n  }, [domainName]);\n\n  useEffect(() => {\n    fetchDomain();\n  }, [fetchDomain]);\n\n  return { data, loading, error, refetch: fetchDomain };\n}\n\n// Hook to fetch domain statistics\nexport function useDomainStatistics(tokenId?: string) {\n  const [data, setData] = useState<DomaNameStatistics | null>(null);\n  const [loading, setLoading] = useState(true);\n  const [error, setError] = useState<string | null>(null);\n\n  const fetchStatistics = useCallback(async () => {\n    if (!tokenId) {\n      setLoading(false);\n      return;\n    }\n\n    try {\n      setLoading(true);\n      setError(null);\n\n      const response = await graphqlClient.request(GET_NAME_STATISTICS, { tokenId });\n      const result = response as { nameStatistics: DomaNameStatistics };\n      setData(result.nameStatistics || null);\n    } catch (err) {\n      console.error('Error fetching domain statistics:', err);\n      setError(err instanceof Error ? err.message : 'Failed to fetch domain statistics');\n    } finally {\n      setLoading(false);\n    }\n  }, [tokenId]);\n\n  useEffect(() => {\n    fetchStatistics();\n  }, [fetchStatistics]);\n\n  return { data, loading, error, refetch: fetchStatistics };\n}\n\n// Hook to fetch marketplace listings\nexport function useMarketplaceListings(limit: number = 50, skip: number = 0, filters?: any) {\n  const [data, setData] = useState<DomaListing[]>([]);\n  const [loading, setLoading] = useState(true);\n  const [error, setError] = useState<string | null>(null);\n\n  const fetchListings = useCallback(async () => {\n    try {\n      setLoading(true);\n      setError(null);\n\n      // Use mock data for now\n      await new Promise(resolve => setTimeout(resolve, 800));\n      \n      const mockListings: DomaListing[] = [\n        {\n          id: 'listing-123',\n          externalId: 'ext-123',\n          price: '2500000000000000000', // 2.5 ETH in wei\n          offererAddress: '0x1234567890123456789012345678901234567890',\n          orderbook: 'DOMA',\n          currency: {\n            name: 'Ether',\n            symbol: 'ETH',\n            decimals: 18,\n          },\n          expiresAt: '2025-01-15T10:00:00Z',\n          createdAt: '2024-12-01T10:00:00Z',\n        },\n        {\n          id: 'listing-124',\n          externalId: 'ext-124',\n          price: '1800000000000000000', // 1.8 ETH in wei\n          offererAddress: '0x9876543210987654321098765432109876543210',\n          orderbook: 'DOMA',\n          currency: {\n            name: 'Ether',\n            symbol: 'ETH',\n            decimals: 18,\n          },\n          expiresAt: '2025-02-01T14:30:00Z',\n          createdAt: '2024-11-15T14:30:00Z',\n        }\n      ];\n\n      setData(mockListings.slice(skip, skip + limit));\n    } catch (err) {\n      console.error('Error fetching marketplace listings:', err);\n      setError(err instanceof Error ? err.message : 'Failed to fetch marketplace listings');\n    } finally {\n      setLoading(false);\n    }\n  }, [limit, skip, filters]);\n\n  useEffect(() => {\n    fetchListings();\n  }, [fetchListings]);\n\n  return { data, loading, error, refetch: fetchListings };\n}\n\n// Hook to fetch offers\nexport function useOffers(limit: number = 50, skip: number = 0, filters?: any) {\n  const [data, setData] = useState<DomaOffer[]>([]);\n  const [loading, setLoading] = useState(true);\n  const [error, setError] = useState<string | null>(null);\n\n  const fetchOffers = useCallback(async () => {\n    try {\n      setLoading(true);\n      setError(null);\n\n      const variables = {\n        take: limit,\n        skip: skip,\n        tokenId: filters?.tokenId,\n        status: filters?.status || 'ACTIVE',\n        sortOrder: filters?.sortOrder || 'DESC',\n      };\n\n      const response = await graphqlClient.request(GET_OFFERS, variables);\n      const result = response as { offers: { items: DomaOffer[] } };\n      setData(result.offers?.items || []);\n    } catch (err) {\n      console.error('Error fetching offers:', err);\n      setError(err instanceof Error ? err.message : 'Failed to fetch offers');\n    } finally {\n      setLoading(false);\n    }\n  }, [limit, skip, filters]);\n\n  useEffect(() => {\n    fetchOffers();\n  }, [fetchOffers]);\n\n  return { data, loading, error, refetch: fetchOffers };\n}\n\n// Hook to fetch token activities\nexport function useTokenActivities(tokenId: string, limit: number = 50, skip: number = 0) {\n  const [data, setData] = useState<DomaTokenActivity[]>([]);\n  const [loading, setLoading] = useState(true);\n  const [error, setError] = useState<string | null>(null);\n\n  const fetchActivities = useCallback(async () => {\n    if (!tokenId) return;\n\n    try {\n      setLoading(true);\n      setError(null);\n\n      const variables = {\n        tokenId,\n        take: limit,\n        skip: skip,\n        sortOrder: 'DESC',\n      };\n\n      const response = await graphqlClient.request(GET_TOKEN_ACTIVITIES, variables);\n      const result = response as { tokenActivities: { items: DomaTokenActivity[] } };\n      setData(result.tokenActivities?.items || []);\n    } catch (err) {\n      console.error('Error fetching token activities:', err);\n      setError(err instanceof Error ? err.message : 'Failed to fetch token activities');\n    } finally {\n      setLoading(false);\n    }\n  }, [tokenId, limit, skip]);\n\n  useEffect(() => {\n    fetchActivities();\n  }, [fetchActivities]);\n\n  return { data, loading, error, refetch: fetchActivities };\n}\n\n// Hook to fetch name activities\nexport function useNameActivities(name: string, limit: number = 50, skip: number = 0) {\n  const [data, setData] = useState<DomaNameActivity[]>([]);\n  const [loading, setLoading] = useState(true);\n  const [error, setError] = useState<string | null>(null);\n\n  const fetchActivities = useCallback(async () => {\n    if (!name) return;\n\n    try {\n      setLoading(true);\n      setError(null);\n\n      const variables = {\n        name,\n        take: limit,\n        skip: skip,\n        sortOrder: 'DESC',\n      };\n\n      const response = await graphqlClient.request(GET_NAME_ACTIVITIES, variables);\n      const result = response as { nameActivities: { items: DomaNameActivity[] } };\n      setData(result.nameActivities?.items || []);\n    } catch (err) {\n      console.error('Error fetching name activities:', err);\n      setError(err instanceof Error ? err.message : 'Failed to fetch name activities');\n    } finally {\n      setLoading(false);\n    }\n  }, [name, limit, skip]);\n\n  useEffect(() => {\n    fetchActivities();\n  }, [fetchActivities]);\n\n  return { data, loading, error, refetch: fetchActivities };\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}