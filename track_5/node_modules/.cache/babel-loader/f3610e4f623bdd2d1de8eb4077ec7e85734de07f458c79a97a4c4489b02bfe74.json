{"ast":null,"code":"import { ApolloClient, InMemoryCache, createHttpLink, from } from '@apollo/client';\nimport { setContext } from '@apollo/client/link/context';\nimport { onError } from '@apollo/client/link/error';\n\n// Create HTTP link for Doma GraphQL API\nconst httpLink = createHttpLink({\n  uri: 'https://api-testnet.doma.xyz/graphql'\n});\n\n// Auth link to add API key (when available)\nconst authLink = setContext((_, {\n  headers\n}) => {\n  // In a real app, you'd get this from environment variables or user authentication\n  const apiKey = process.env.REACT_APP_DOMA_API_KEY;\n  return {\n    headers: {\n      ...headers,\n      ...(apiKey ? {\n        'x-api-key': apiKey\n      } : {}),\n      'Content-Type': 'application/json'\n    }\n  };\n});\n\n// Error link for handling GraphQL and network errors\nconst errorLink = onError(({\n  graphQLErrors,\n  networkError\n}) => {\n  if (graphQLErrors) {\n    graphQLErrors.forEach(({\n      message,\n      locations,\n      path\n    }) => {\n      console.error(`GraphQL error: Message: ${message}, Location: ${locations}, Path: ${path}`);\n    });\n  }\n  if (networkError) {\n    console.error(`Network error: ${networkError}`);\n\n    // Handle authentication errors\n    if ('statusCode' in networkError && networkError.statusCode === 401) {\n      console.warn('Authentication required for Doma API');\n    }\n  }\n});\n\n// Create Apollo Client\nconst client = new ApolloClient({\n  link: from([errorLink, authLink, httpLink]),\n  cache: new InMemoryCache({\n    typePolicies: {\n      Query: {\n        fields: {\n          names: {\n            // Enable pagination\n            keyArgs: ['where', 'orderBy'],\n            merge(existing = {\n              items: []\n            }, incoming) {\n              return {\n                ...incoming,\n                items: [...existing.items, ...incoming.items]\n              };\n            }\n          }\n        }\n      }\n    }\n  }),\n  defaultOptions: {\n    watchQuery: {\n      errorPolicy: 'all'\n    },\n    query: {\n      errorPolicy: 'all'\n    }\n  }\n});\nexport default client;","map":{"version":3,"names":["ApolloClient","InMemoryCache","createHttpLink","from","setContext","onError","httpLink","uri","authLink","_","headers","apiKey","process","env","REACT_APP_DOMA_API_KEY","errorLink","graphQLErrors","networkError","forEach","message","locations","path","console","error","statusCode","warn","client","link","cache","typePolicies","Query","fields","names","keyArgs","merge","existing","items","incoming","defaultOptions","watchQuery","errorPolicy","query"],"sources":["/Users/kaelabbott/Downloads/autozama/doma/src/lib/apollo.ts"],"sourcesContent":["import { ApolloClient, InMemoryCache, createHttpLink, from } from '@apollo/client';\nimport { setContext } from '@apollo/client/link/context';\nimport { onError } from '@apollo/client/link/error';\n\n// Create HTTP link for Doma GraphQL API\nconst httpLink = createHttpLink({\n  uri: 'https://api-testnet.doma.xyz/graphql',\n});\n\n// Auth link to add API key (when available)\nconst authLink = setContext((_, { headers }) => {\n  // In a real app, you'd get this from environment variables or user authentication\n  const apiKey = process.env.REACT_APP_DOMA_API_KEY;\n  \n  return {\n    headers: {\n      ...headers,\n      ...(apiKey ? { 'x-api-key': apiKey } : {}),\n      'Content-Type': 'application/json',\n    }\n  };\n});\n\n// Error link for handling GraphQL and network errors\nconst errorLink = onError(({ graphQLErrors, networkError }) => {\n  if (graphQLErrors) {\n    graphQLErrors.forEach(({ message, locations, path }) => {\n      console.error(\n        `GraphQL error: Message: ${message}, Location: ${locations}, Path: ${path}`\n      );\n    });\n  }\n\n  if (networkError) {\n    console.error(`Network error: ${networkError}`);\n    \n    // Handle authentication errors\n    if ('statusCode' in networkError && networkError.statusCode === 401) {\n      console.warn('Authentication required for Doma API');\n    }\n  }\n});\n\n// Create Apollo Client\nconst client = new ApolloClient({\n  link: from([errorLink, authLink, httpLink]),\n  cache: new InMemoryCache({\n    typePolicies: {\n      Query: {\n        fields: {\n          names: {\n            // Enable pagination\n            keyArgs: ['where', 'orderBy'],\n            merge(existing = { items: [] }, incoming) {\n              return {\n                ...incoming,\n                items: [...existing.items, ...incoming.items],\n              };\n            },\n          },\n        },\n      },\n    },\n  }),\n  defaultOptions: {\n    watchQuery: {\n      errorPolicy: 'all',\n    },\n    query: {\n      errorPolicy: 'all',\n    },\n  },\n});\n\nexport default client;\n"],"mappings":"AAAA,SAASA,YAAY,EAAEC,aAAa,EAAEC,cAAc,EAAEC,IAAI,QAAQ,gBAAgB;AAClF,SAASC,UAAU,QAAQ,6BAA6B;AACxD,SAASC,OAAO,QAAQ,2BAA2B;;AAEnD;AACA,MAAMC,QAAQ,GAAGJ,cAAc,CAAC;EAC9BK,GAAG,EAAE;AACP,CAAC,CAAC;;AAEF;AACA,MAAMC,QAAQ,GAAGJ,UAAU,CAAC,CAACK,CAAC,EAAE;EAAEC;AAAQ,CAAC,KAAK;EAC9C;EACA,MAAMC,MAAM,GAAGC,OAAO,CAACC,GAAG,CAACC,sBAAsB;EAEjD,OAAO;IACLJ,OAAO,EAAE;MACP,GAAGA,OAAO;MACV,IAAIC,MAAM,GAAG;QAAE,WAAW,EAAEA;MAAO,CAAC,GAAG,CAAC,CAAC,CAAC;MAC1C,cAAc,EAAE;IAClB;EACF,CAAC;AACH,CAAC,CAAC;;AAEF;AACA,MAAMI,SAAS,GAAGV,OAAO,CAAC,CAAC;EAAEW,aAAa;EAAEC;AAAa,CAAC,KAAK;EAC7D,IAAID,aAAa,EAAE;IACjBA,aAAa,CAACE,OAAO,CAAC,CAAC;MAAEC,OAAO;MAAEC,SAAS;MAAEC;IAAK,CAAC,KAAK;MACtDC,OAAO,CAACC,KAAK,CACX,2BAA2BJ,OAAO,eAAeC,SAAS,WAAWC,IAAI,EAC3E,CAAC;IACH,CAAC,CAAC;EACJ;EAEA,IAAIJ,YAAY,EAAE;IAChBK,OAAO,CAACC,KAAK,CAAC,kBAAkBN,YAAY,EAAE,CAAC;;IAE/C;IACA,IAAI,YAAY,IAAIA,YAAY,IAAIA,YAAY,CAACO,UAAU,KAAK,GAAG,EAAE;MACnEF,OAAO,CAACG,IAAI,CAAC,sCAAsC,CAAC;IACtD;EACF;AACF,CAAC,CAAC;;AAEF;AACA,MAAMC,MAAM,GAAG,IAAI1B,YAAY,CAAC;EAC9B2B,IAAI,EAAExB,IAAI,CAAC,CAACY,SAAS,EAAEP,QAAQ,EAAEF,QAAQ,CAAC,CAAC;EAC3CsB,KAAK,EAAE,IAAI3B,aAAa,CAAC;IACvB4B,YAAY,EAAE;MACZC,KAAK,EAAE;QACLC,MAAM,EAAE;UACNC,KAAK,EAAE;YACL;YACAC,OAAO,EAAE,CAAC,OAAO,EAAE,SAAS,CAAC;YAC7BC,KAAKA,CAACC,QAAQ,GAAG;cAAEC,KAAK,EAAE;YAAG,CAAC,EAAEC,QAAQ,EAAE;cACxC,OAAO;gBACL,GAAGA,QAAQ;gBACXD,KAAK,EAAE,CAAC,GAAGD,QAAQ,CAACC,KAAK,EAAE,GAAGC,QAAQ,CAACD,KAAK;cAC9C,CAAC;YACH;UACF;QACF;MACF;IACF;EACF,CAAC,CAAC;EACFE,cAAc,EAAE;IACdC,UAAU,EAAE;MACVC,WAAW,EAAE;IACf,CAAC;IACDC,KAAK,EAAE;MACLD,WAAW,EAAE;IACf;EACF;AACF,CAAC,CAAC;AAEF,eAAed,MAAM","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}