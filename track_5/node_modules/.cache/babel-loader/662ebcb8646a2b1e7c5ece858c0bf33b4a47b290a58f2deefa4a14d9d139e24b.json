{"ast":null,"code":"// Doma API integration without Apollo Client dependency\n// This can be used when API keys are available\n\nconst DOMA_API_URL = 'https://api-testnet.doma.xyz/graphql';\nexport class DomaApiClient {\n  constructor(apiKey) {\n    this.apiKey = void 0;\n    this.apiKey = apiKey;\n  }\n  async request(query, variables) {\n    const headers = {\n      'Content-Type': 'application/json'\n    };\n    if (this.apiKey) {\n      headers['x-api-key'] = this.apiKey;\n    }\n    try {\n      const response = await fetch(DOMA_API_URL, {\n        method: 'POST',\n        headers,\n        body: JSON.stringify({\n          query,\n          variables: variables || {}\n        })\n      });\n      if (!response.ok) {\n        throw new Error(`HTTP error! status: ${response.status}`);\n      }\n      const result = await response.json();\n      return result;\n    } catch (error) {\n      console.error('Doma API request failed:', error);\n      return {\n        errors: [{\n          message: error instanceof Error ? error.message : 'Unknown error occurred'\n        }]\n      };\n    }\n  }\n  async getDomains(limit = 20, offset = 0) {\n    const query = `\n      query GetDomains($take: Int, $skip: Int) {\n        names(take: $take, skip: $skip, sortOrder: DESC) {\n          items {\n            name\n            tokenId\n            registrationDate\n            expirationDate\n            parentName\n            isWrapped\n            wrappedTokenId\n          }\n          totalCount\n        }\n      }\n    `;\n    return this.request(query, {\n      take: limit,\n      skip: offset\n    });\n  }\n  async getDomainByName(name) {\n    const query = `\n      query GetDomainByName($name: String!) {\n        name(name: $name) {\n          name\n          tokenId\n          registrationDate\n          expirationDate\n          parentName\n          isWrapped\n          wrappedTokenId\n          owner\n          resolver\n        }\n      }\n    `;\n    return this.request(query, {\n      name\n    });\n  }\n  async getMarketStatistics() {\n    const query = `\n      query GetStatistics {\n        statistics {\n          totalDomains\n          totalVolume\n          averagePrice\n          activeListings\n        }\n        chainStatistics {\n          chain\n          totalDomains\n          totalVolume\n        }\n      }\n    `;\n    return this.request(query);\n  }\n  async getListings(limit = 20, offset = 0) {\n    const query = `\n      query GetListings($take: Int, $skip: Int) {\n        listings(take: $take, skip: $skip) {\n          items {\n            id\n            tokenId\n            seller\n            price\n            currency\n            status\n            createdAt\n            expiresAt\n          }\n          totalCount\n        }\n      }\n    `;\n    return this.request(query, {\n      take: limit,\n      skip: offset\n    });\n  }\n  async getOffers(tokenId, limit = 10, offset = 0) {\n    const query = `\n      query GetOffers($tokenId: String!, $take: Int, $skip: Int) {\n        offers(where: { tokenId: { eq: $tokenId } }, take: $take, skip: $skip) {\n          items {\n            id\n            tokenId\n            bidder\n            amount\n            currency\n            status\n            createdAt\n            expiresAt\n          }\n          totalCount\n        }\n      }\n    `;\n    return this.request(query, {\n      tokenId,\n      take: limit,\n      skip: offset\n    });\n  }\n}\n\n// Create a singleton instance\nconst domaApi = new DomaApiClient(process.env.REACT_APP_DOMA_API_KEY);\nexport default domaApi;\n\n// Helper function to transform Doma API domain data to our app format\nexport function transformDomainData(apiDomain, index = 0) {\n  return {\n    id: apiDomain.tokenId || index.toString(),\n    name: apiDomain.name,\n    price: (Math.random() * 10 + 1).toFixed(1),\n    // In production, this would come from listings\n    currency: 'ETH',\n    description: `Premium domain ${apiDomain.name} on the Doma Protocol`,\n    category: getDomainCategory(apiDomain.name),\n    views: Math.floor(Math.random() * 2000) + 100,\n    likes: Math.floor(Math.random() * 200) + 10,\n    isVerified: Math.random() > 0.3 // In production, this would be actual verification status\n  };\n}\nfunction getDomainCategory(domainName) {\n  const name = domainName.toLowerCase();\n  if (name.includes('crypto') || name.includes('defi') || name.includes('finance')) return 'Finance';\n  if (name.includes('nft') || name.includes('art') || name.includes('digital')) return 'NFT';\n  if (name.includes('game') || name.includes('gaming') || name.includes('play')) return 'Gaming';\n  if (name.includes('web') || name.includes('tech') || name.includes('dev')) return 'Technology';\n  return 'Other';\n}","map":{"version":3,"names":["DOMA_API_URL","DomaApiClient","constructor","apiKey","request","query","variables","headers","response","fetch","method","body","JSON","stringify","ok","Error","status","result","json","error","console","errors","message","getDomains","limit","offset","take","skip","getDomainByName","name","getMarketStatistics","getListings","getOffers","tokenId","domaApi","process","env","REACT_APP_DOMA_API_KEY","transformDomainData","apiDomain","index","id","toString","price","Math","random","toFixed","currency","description","category","getDomainCategory","views","floor","likes","isVerified","domainName","toLowerCase","includes"],"sources":["/Users/kaelabbott/Downloads/autozama/doma/src/lib/doma-api.ts"],"sourcesContent":["// Doma API integration without Apollo Client dependency\n// This can be used when API keys are available\n\nconst DOMA_API_URL = 'https://api-testnet.doma.xyz/graphql';\n\ninterface DomaApiResponse<T = any> {\n  data?: T;\n  errors?: Array<{\n    message: string;\n    locations?: Array<{ line: number; column: number }>;\n    path?: Array<string | number>;\n  }>;\n}\n\nexport class DomaApiClient {\n  private apiKey?: string;\n\n  constructor(apiKey?: string) {\n    this.apiKey = apiKey;\n  }\n\n  private async request<T = any>(query: string, variables?: Record<string, any>): Promise<DomaApiResponse<T>> {\n    const headers: Record<string, string> = {\n      'Content-Type': 'application/json',\n    };\n\n    if (this.apiKey) {\n      headers['x-api-key'] = this.apiKey;\n    }\n\n    try {\n      const response = await fetch(DOMA_API_URL, {\n        method: 'POST',\n        headers,\n        body: JSON.stringify({\n          query,\n          variables: variables || {},\n        }),\n      });\n\n      if (!response.ok) {\n        throw new Error(`HTTP error! status: ${response.status}`);\n      }\n\n      const result = await response.json();\n      return result;\n    } catch (error) {\n      console.error('Doma API request failed:', error);\n      return {\n        errors: [\n          {\n            message: error instanceof Error ? error.message : 'Unknown error occurred',\n          },\n        ],\n      };\n    }\n  }\n\n  async getDomains(limit = 20, offset = 0) {\n    const query = `\n      query GetDomains($take: Int, $skip: Int) {\n        names(take: $take, skip: $skip, sortOrder: DESC) {\n          items {\n            name\n            tokenId\n            registrationDate\n            expirationDate\n            parentName\n            isWrapped\n            wrappedTokenId\n          }\n          totalCount\n        }\n      }\n    `;\n\n    return this.request(query, { take: limit, skip: offset });\n  }\n\n  async getDomainByName(name: string) {\n    const query = `\n      query GetDomainByName($name: String!) {\n        name(name: $name) {\n          name\n          tokenId\n          registrationDate\n          expirationDate\n          parentName\n          isWrapped\n          wrappedTokenId\n          owner\n          resolver\n        }\n      }\n    `;\n\n    return this.request(query, { name });\n  }\n\n  async getMarketStatistics() {\n    const query = `\n      query GetStatistics {\n        statistics {\n          totalDomains\n          totalVolume\n          averagePrice\n          activeListings\n        }\n        chainStatistics {\n          chain\n          totalDomains\n          totalVolume\n        }\n      }\n    `;\n\n    return this.request(query);\n  }\n\n  async getListings(limit = 20, offset = 0) {\n    const query = `\n      query GetListings($take: Int, $skip: Int) {\n        listings(take: $take, skip: $skip) {\n          items {\n            id\n            tokenId\n            seller\n            price\n            currency\n            status\n            createdAt\n            expiresAt\n          }\n          totalCount\n        }\n      }\n    `;\n\n    return this.request(query, { take: limit, skip: offset });\n  }\n\n  async getOffers(tokenId: string, limit = 10, offset = 0) {\n    const query = `\n      query GetOffers($tokenId: String!, $take: Int, $skip: Int) {\n        offers(where: { tokenId: { eq: $tokenId } }, take: $take, skip: $skip) {\n          items {\n            id\n            tokenId\n            bidder\n            amount\n            currency\n            status\n            createdAt\n            expiresAt\n          }\n          totalCount\n        }\n      }\n    `;\n\n    return this.request(query, { tokenId, take: limit, skip: offset });\n  }\n}\n\n// Create a singleton instance\nconst domaApi = new DomaApiClient(process.env.REACT_APP_DOMA_API_KEY);\n\nexport default domaApi;\n\n// Helper function to transform Doma API domain data to our app format\nexport function transformDomainData(apiDomain: any, index: number = 0) {\n  return {\n    id: apiDomain.tokenId || index.toString(),\n    name: apiDomain.name,\n    price: (Math.random() * 10 + 1).toFixed(1), // In production, this would come from listings\n    currency: 'ETH',\n    description: `Premium domain ${apiDomain.name} on the Doma Protocol`,\n    category: getDomainCategory(apiDomain.name),\n    views: Math.floor(Math.random() * 2000) + 100,\n    likes: Math.floor(Math.random() * 200) + 10,\n    isVerified: Math.random() > 0.3, // In production, this would be actual verification status\n  };\n}\n\nfunction getDomainCategory(domainName: string): string {\n  const name = domainName.toLowerCase();\n  if (name.includes('crypto') || name.includes('defi') || name.includes('finance')) return 'Finance';\n  if (name.includes('nft') || name.includes('art') || name.includes('digital')) return 'NFT';\n  if (name.includes('game') || name.includes('gaming') || name.includes('play')) return 'Gaming';\n  if (name.includes('web') || name.includes('tech') || name.includes('dev')) return 'Technology';\n  return 'Other';\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}