{"ast":null,"code":"// Utility functions for formatting data\n\n/**\n * Format BigInt price to ETH string\n */\nexport const formatEther = (price, decimals = 18) => {\n  try {\n    const priceNum = BigInt(price);\n    const divisor = BigInt(10 ** decimals);\n    const whole = priceNum / divisor;\n    const remainder = priceNum % divisor;\n    if (remainder === BigInt(0)) {\n      return whole.toString();\n    }\n    const fractional = remainder.toString().padStart(decimals, '0');\n    const trimmed = fractional.replace(/0+$/, '');\n    return trimmed ? `${whole}.${trimmed}` : whole.toString();\n  } catch (error) {\n    console.error('Error formatting ether:', error);\n    return '0';\n  }\n};\n\n/**\n * Format price with currency symbol\n */\nexport const formatPrice = (price, currency, decimals = 18) => {\n  const formatted = formatEther(price, decimals);\n  return `${formatted} ${currency}`;\n};\n\n/**\n * Format address for display (show first 6 and last 4 characters)\n */\nexport const formatAddress = address => {\n  if (!address || address.length < 10) return address;\n  return `${address.slice(0, 6)}...${address.slice(-4)}`;\n};\n\n/**\n * Format date for display\n */\nexport const formatDate = dateString => {\n  try {\n    const date = new Date(dateString);\n    return date.toLocaleDateString('en-US', {\n      year: 'numeric',\n      month: 'short',\n      day: 'numeric'\n    });\n  } catch (error) {\n    return dateString;\n  }\n};\n\n/**\n * Format time ago\n */\nexport const formatTimeAgo = dateString => {\n  try {\n    const date = new Date(dateString);\n    const now = new Date();\n    const diffMs = now.getTime() - date.getTime();\n    const diffDays = Math.floor(diffMs / (1000 * 60 * 60 * 24));\n    const diffHours = Math.floor(diffMs / (1000 * 60 * 60));\n    const diffMinutes = Math.floor(diffMs / (1000 * 60));\n    if (diffDays > 0) {\n      return `${diffDays} day${diffDays > 1 ? 's' : ''} ago`;\n    } else if (diffHours > 0) {\n      return `${diffHours} hour${diffHours > 1 ? 's' : ''} ago`;\n    } else if (diffMinutes > 0) {\n      return `${diffMinutes} minute${diffMinutes > 1 ? 's' : ''} ago`;\n    } else {\n      return 'Just now';\n    }\n  } catch (error) {\n    return dateString;\n  }\n};\n\n/**\n * Check if date is expired\n */\nexport const isExpired = dateString => {\n  try {\n    const date = new Date(dateString);\n    return date.getTime() < Date.now();\n  } catch (error) {\n    return false;\n  }\n};\n\n/**\n * Format domain name for display\n */\nexport const formatDomainName = name => {\n  // Remove any protocol prefixes\n  return name.replace(/^https?:\\/\\//, '').replace(/^www\\./, '');\n};\n\n/**\n * Get domain category from TLD\n */\nexport const getDomainCategory = name => {\n  const domain = formatDomainName(name);\n  const parts = domain.split('.');\n  if (parts.length < 2) return 'Unknown';\n  const sld = parts[0].toLowerCase();\n\n  // Category mapping based on common domain patterns\n  const categoryMap = {\n    'crypto': 'Finance',\n    'bitcoin': 'Finance',\n    'ethereum': 'Finance',\n    'defi': 'Finance',\n    'nft': 'NFT',\n    'gaming': 'Gaming',\n    'game': 'Gaming',\n    'ai': 'Technology',\n    'tech': 'Technology',\n    'web3': 'Technology',\n    'dao': 'Technology',\n    'metaverse': 'Technology',\n    'art': 'Art',\n    'music': 'Art',\n    'sports': 'Sports',\n    'news': 'Media',\n    'social': 'Social',\n    'green': 'Environment',\n    'eco': 'Environment',\n    'sustainable': 'Environment'\n  };\n  for (const [keyword, category] of Object.entries(categoryMap)) {\n    if (sld.includes(keyword)) {\n      return category;\n    }\n  }\n  return 'General';\n};\n\n/**\n * Calculate time remaining until expiration\n */\nexport const getTimeRemaining = expiresAt => {\n  try {\n    const expireDate = new Date(expiresAt);\n    const now = new Date();\n    const diffMs = expireDate.getTime() - now.getTime();\n    if (diffMs <= 0) {\n      return 'Expired';\n    }\n    const diffDays = Math.floor(diffMs / (1000 * 60 * 60 * 24));\n    const diffHours = Math.floor(diffMs % (1000 * 60 * 60 * 24) / (1000 * 60 * 60));\n    if (diffDays > 0) {\n      return `${diffDays} day${diffDays > 1 ? 's' : ''}`;\n    } else if (diffHours > 0) {\n      return `${diffHours} hour${diffHours > 1 ? 's' : ''}`;\n    } else {\n      return 'Less than 1 hour';\n    }\n  } catch (error) {\n    return 'Unknown';\n  }\n};","map":{"version":3,"names":["formatEther","price","decimals","priceNum","BigInt","divisor","whole","remainder","toString","fractional","padStart","trimmed","replace","error","console","formatPrice","currency","formatted","formatAddress","address","length","slice","formatDate","dateString","date","Date","toLocaleDateString","year","month","day","formatTimeAgo","now","diffMs","getTime","diffDays","Math","floor","diffHours","diffMinutes","isExpired","formatDomainName","name","getDomainCategory","domain","parts","split","sld","toLowerCase","categoryMap","keyword","category","Object","entries","includes","getTimeRemaining","expiresAt","expireDate"],"sources":["/Users/kaelabbott/Downloads/autozama/doma/src/utils/formatters.ts"],"sourcesContent":["// Utility functions for formatting data\n\n/**\n * Format BigInt price to ETH string\n */\nexport const formatEther = (price: string, decimals: number = 18): string => {\n  try {\n    const priceNum = BigInt(price);\n    const divisor = BigInt(10 ** decimals);\n    const whole = priceNum / divisor;\n    const remainder = priceNum % divisor;\n    \n    if (remainder === BigInt(0)) {\n      return whole.toString();\n    }\n    \n    const fractional = remainder.toString().padStart(decimals, '0');\n    const trimmed = fractional.replace(/0+$/, '');\n    \n    return trimmed ? `${whole}.${trimmed}` : whole.toString();\n  } catch (error) {\n    console.error('Error formatting ether:', error);\n    return '0';\n  }\n};\n\n/**\n * Format price with currency symbol\n */\nexport const formatPrice = (price: string, currency: string, decimals: number = 18): string => {\n  const formatted = formatEther(price, decimals);\n  return `${formatted} ${currency}`;\n};\n\n/**\n * Format address for display (show first 6 and last 4 characters)\n */\nexport const formatAddress = (address: string): string => {\n  if (!address || address.length < 10) return address;\n  return `${address.slice(0, 6)}...${address.slice(-4)}`;\n};\n\n/**\n * Format date for display\n */\nexport const formatDate = (dateString: string): string => {\n  try {\n    const date = new Date(dateString);\n    return date.toLocaleDateString('en-US', {\n      year: 'numeric',\n      month: 'short',\n      day: 'numeric'\n    });\n  } catch (error) {\n    return dateString;\n  }\n};\n\n/**\n * Format time ago\n */\nexport const formatTimeAgo = (dateString: string): string => {\n  try {\n    const date = new Date(dateString);\n    const now = new Date();\n    const diffMs = now.getTime() - date.getTime();\n    const diffDays = Math.floor(diffMs / (1000 * 60 * 60 * 24));\n    const diffHours = Math.floor(diffMs / (1000 * 60 * 60));\n    const diffMinutes = Math.floor(diffMs / (1000 * 60));\n    \n    if (diffDays > 0) {\n      return `${diffDays} day${diffDays > 1 ? 's' : ''} ago`;\n    } else if (diffHours > 0) {\n      return `${diffHours} hour${diffHours > 1 ? 's' : ''} ago`;\n    } else if (diffMinutes > 0) {\n      return `${diffMinutes} minute${diffMinutes > 1 ? 's' : ''} ago`;\n    } else {\n      return 'Just now';\n    }\n  } catch (error) {\n    return dateString;\n  }\n};\n\n/**\n * Check if date is expired\n */\nexport const isExpired = (dateString: string): boolean => {\n  try {\n    const date = new Date(dateString);\n    return date.getTime() < Date.now();\n  } catch (error) {\n    return false;\n  }\n};\n\n/**\n * Format domain name for display\n */\nexport const formatDomainName = (name: string): string => {\n  // Remove any protocol prefixes\n  return name.replace(/^https?:\\/\\//, '').replace(/^www\\./, '');\n};\n\n/**\n * Get domain category from TLD\n */\nexport const getDomainCategory = (name: string): string => {\n  const domain = formatDomainName(name);\n  const parts = domain.split('.');\n  \n  if (parts.length < 2) return 'Unknown';\n  \n  const sld = parts[0].toLowerCase();\n  \n  // Category mapping based on common domain patterns\n  const categoryMap: Record<string, string> = {\n    'crypto': 'Finance',\n    'bitcoin': 'Finance',\n    'ethereum': 'Finance',\n    'defi': 'Finance',\n    'nft': 'NFT',\n    'gaming': 'Gaming',\n    'game': 'Gaming',\n    'ai': 'Technology',\n    'tech': 'Technology',\n    'web3': 'Technology',\n    'dao': 'Technology',\n    'metaverse': 'Technology',\n    'art': 'Art',\n    'music': 'Art',\n    'sports': 'Sports',\n    'news': 'Media',\n    'social': 'Social',\n    'green': 'Environment',\n    'eco': 'Environment',\n    'sustainable': 'Environment'\n  };\n  \n  for (const [keyword, category] of Object.entries(categoryMap)) {\n    if (sld.includes(keyword)) {\n      return category;\n    }\n  }\n  \n  return 'General';\n};\n\n/**\n * Calculate time remaining until expiration\n */\nexport const getTimeRemaining = (expiresAt: string): string => {\n  try {\n    const expireDate = new Date(expiresAt);\n    const now = new Date();\n    const diffMs = expireDate.getTime() - now.getTime();\n    \n    if (diffMs <= 0) {\n      return 'Expired';\n    }\n    \n    const diffDays = Math.floor(diffMs / (1000 * 60 * 60 * 24));\n    const diffHours = Math.floor((diffMs % (1000 * 60 * 60 * 24)) / (1000 * 60 * 60));\n    \n    if (diffDays > 0) {\n      return `${diffDays} day${diffDays > 1 ? 's' : ''}`;\n    } else if (diffHours > 0) {\n      return `${diffHours} hour${diffHours > 1 ? 's' : ''}`;\n    } else {\n      return 'Less than 1 hour';\n    }\n  } catch (error) {\n    return 'Unknown';\n  }\n};\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}