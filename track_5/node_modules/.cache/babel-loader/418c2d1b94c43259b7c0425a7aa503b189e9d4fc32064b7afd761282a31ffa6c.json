{"ast":null,"code":"var _s = $RefreshSig$(),\n  _s2 = $RefreshSig$(),\n  _s3 = $RefreshSig$(),\n  _s4 = $RefreshSig$(),\n  _s5 = $RefreshSig$(),\n  _s6 = $RefreshSig$(),\n  _s7 = $RefreshSig$(),\n  _s8 = $RefreshSig$(),\n  _s9 = $RefreshSig$(),\n  _s0 = $RefreshSig$(),\n  _s1 = $RefreshSig$();\nimport { useState, useCallback } from 'react';\nimport { domaSDKClient, isSDKConfigured, getChainId } from '../lib/doma-sdk-client';\n\n// Types for SDK operations\n\n// Generic hook for SDK operations\nconst useSDKOperation = operation => {\n  _s();\n  const [state, setState] = useState({\n    loading: false,\n    error: null,\n    success: false\n  });\n  const execute = useCallback(async (...args) => {\n    setState({\n      loading: true,\n      error: null,\n      success: false\n    });\n    try {\n      const result = await operation(...args);\n      setState({\n        loading: false,\n        error: null,\n        success: true\n      });\n      return result;\n    } catch (error) {\n      const errorMessage = error instanceof Error ? error.message : 'An error occurred';\n      setState({\n        loading: false,\n        error: errorMessage,\n        success: false\n      });\n      throw error;\n    }\n  }, [operation]);\n  const reset = useCallback(() => {\n    setState({\n      loading: false,\n      error: null,\n      success: false\n    });\n  }, []);\n  return {\n    ...state,\n    execute,\n    reset\n  };\n};\n\n// Hook for creating domain listings\n_s(useSDKOperation, \"WHu8jNc0rznXAaAL1NTn2jkb4Ok=\");\nexport const useCreateListing = () => {\n  _s2();\n  const createListing = useCallback(async params => {\n    return await domaSDKClient.createListing(params);\n  }, []);\n  return useSDKOperation(createListing);\n};\n\n// Hook for buying domain listings\n_s2(useCreateListing, \"lZVzsN81aURwFJNpMOofdZ3s730=\", false, function () {\n  return [useSDKOperation];\n});\nexport const useBuyListing = () => {\n  _s3();\n  const buyListing = useCallback(async params => {\n    return await domaSDKClient.buyListing(params);\n  }, []);\n  return useSDKOperation(buyListing);\n};\n\n// Hook for creating offers\n_s3(useBuyListing, \"1sEqRexeBV+P3d6KJ7qkuV+zhVA=\", false, function () {\n  return [useSDKOperation];\n});\nexport const useCreateOffer = () => {\n  _s4();\n  const createOffer = useCallback(async params => {\n    return await domaSDKClient.createOffer(params);\n  }, []);\n  return useSDKOperation(createOffer);\n};\n\n// Hook for accepting offers\n_s4(useCreateOffer, \"Sv55/VRc4l1NumTc3Gfa8qeQOTc=\", false, function () {\n  return [useSDKOperation];\n});\nexport const useAcceptOffer = () => {\n  _s5();\n  const acceptOffer = useCallback(async params => {\n    return await domaSDKClient.acceptOffer(params);\n  }, []);\n  return useSDKOperation(acceptOffer);\n};\n\n// Hook for canceling listings\n_s5(useAcceptOffer, \"DRp54sy1m1IT55hKwqEiwtL99go=\", false, function () {\n  return [useSDKOperation];\n});\nexport const useCancelListing = () => {\n  _s6();\n  const cancelListing = useCallback(async params => {\n    return await domaSDKClient.cancelListing(params);\n  }, []);\n  return useSDKOperation(cancelListing);\n};\n\n// Hook for canceling offers\n_s6(useCancelListing, \"LJWk4HG4qvV0tbXRpgmhClUsPOs=\", false, function () {\n  return [useSDKOperation];\n});\nexport const useCancelOffer = () => {\n  _s7();\n  const cancelOffer = useCallback(async params => {\n    return await domaSDKClient.cancelOffer(params);\n  }, []);\n  return useSDKOperation(cancelOffer);\n};\n\n// Hook for getting marketplace fees\n_s7(useCancelOffer, \"v/1vEwZuj6nAnHsUnsKN/1PnfLo=\", false, function () {\n  return [useSDKOperation];\n});\nexport const useMarketplaceFees = () => {\n  _s8();\n  const [fees, setFees] = useState(null);\n  const [loading, setLoading] = useState(false);\n  const [error, setError] = useState(null);\n  const fetchFees = useCallback(async params => {\n    setLoading(true);\n    setError(null);\n    try {\n      const result = await domaSDKClient.getOrderbookFee({\n        contractAddress: params.contractAddress,\n        chainId: params.chainId\n      });\n      if (result.success) {\n        setFees(result.data);\n      } else {\n        setError(result.error);\n      }\n    } catch (err) {\n      setError(err instanceof Error ? err.message : 'Failed to fetch fees');\n    } finally {\n      setLoading(false);\n    }\n  }, []);\n  return {\n    fees,\n    loading,\n    error,\n    fetchFees\n  };\n};\n\n// Hook for getting supported currencies\n_s8(useMarketplaceFees, \"zTDPkoIGHI7NywyCWMtdoBrcWL4=\");\nexport const useSupportedCurrencies = () => {\n  _s9();\n  const [currencies, setCurrencies] = useState([]);\n  const [loading, setLoading] = useState(false);\n  const [error, setError] = useState(null);\n  const fetchCurrencies = useCallback(async params => {\n    setLoading(true);\n    setError(null);\n    try {\n      const result = await domaSDKClient.getSupportedCurrencies({\n        contractAddress: params.contractAddress,\n        chainId: params.chainId\n      });\n      if (result.success) {\n        setCurrencies(result.data.currencies || []);\n      } else {\n        setError(result.error);\n      }\n    } catch (err) {\n      setError(err instanceof Error ? err.message : 'Failed to fetch currencies');\n    } finally {\n      setLoading(false);\n    }\n  }, []);\n  return {\n    currencies,\n    loading,\n    error,\n    fetchCurrencies\n  };\n};\n\n// Utility hook for SDK status and configuration\n_s9(useSupportedCurrencies, \"OtteEGkKizwyA2YZ7+fsuPt9/5I=\");\nexport const useSDKStatus = () => {\n  const configured = isSDKConfigured();\n  const chainId = getChainId();\n  return {\n    configured,\n    chainId,\n    ready: configured,\n    // SDK is ready if API key is configured\n    apiKeyMissing: !configured\n  };\n};\n\n// Hook for progress tracking across operations\nexport const useProgressTracker = () => {\n  _s0();\n  const [progress, setProgress] = useState({\n    step: '',\n    percentage: 0,\n    active: false\n  });\n  const createProgressCallback = useCallback(() => {\n    return (step, percentage) => {\n      setProgress({\n        step,\n        percentage,\n        active: true\n      });\n    };\n  }, []);\n  const reset = useCallback(() => {\n    setProgress({\n      step: '',\n      percentage: 0,\n      active: false\n    });\n  }, []);\n  const complete = useCallback(() => {\n    setProgress({\n      step: 'Complete',\n      percentage: 100,\n      active: false\n    });\n  }, []);\n  return {\n    progress,\n    createProgressCallback,\n    reset,\n    complete\n  };\n};\n\n// Combined hook for complete trading functionality\n_s0(useProgressTracker, \"7zP1QD+DCIUmQpla/yvPdEQvhPs=\");\nexport const useDomainTrading = (contractAddress, tokenId) => {\n  _s1();\n  const chainId = getChainId();\n\n  // Individual operation hooks\n  const createListing = useCreateListing();\n  const buyListing = useBuyListing();\n  const createOffer = useCreateOffer();\n  const acceptOffer = useAcceptOffer();\n  const cancelListing = useCancelListing();\n  const cancelOffer = useCancelOffer();\n\n  // Utility hooks\n  const {\n    fees,\n    fetchFees\n  } = useMarketplaceFees();\n  const {\n    currencies,\n    fetchCurrencies\n  } = useSupportedCurrencies();\n  const {\n    progress,\n    createProgressCallback,\n    reset: resetProgress\n  } = useProgressTracker();\n  const sdkStatus = useSDKStatus();\n\n  // Initialize fees and currencies on mount\n  useState(() => {\n    if (contractAddress && sdkStatus.configured) {\n      fetchFees({\n        contractAddress,\n        chainId\n      });\n      fetchCurrencies({\n        contractAddress,\n        chainId\n      });\n    }\n  });\n  return {\n    // Operations\n    createListing,\n    buyListing,\n    createOffer,\n    acceptOffer,\n    cancelListing,\n    cancelOffer,\n    // Data\n    fees,\n    currencies,\n    progress,\n    // Utilities\n    createProgressCallback,\n    resetProgress,\n    sdkStatus,\n    chainId,\n    // Domain-specific data\n    contractAddress,\n    tokenId\n  };\n};\n\n// Export types\n_s1(useDomainTrading, \"+9ITbOhEBmyuQUKVGUgeWHM/i30=\", false, function () {\n  return [useCreateListing, useBuyListing, useCreateOffer, useAcceptOffer, useCancelListing, useCancelOffer, useMarketplaceFees, useSupportedCurrencies, useProgressTracker, useSDKStatus];\n});","map":{"version":3,"names":["useState","useCallback","domaSDKClient","isSDKConfigured","getChainId","useSDKOperation","operation","_s","state","setState","loading","error","success","execute","args","result","errorMessage","Error","message","reset","useCreateListing","_s2","createListing","params","useBuyListing","_s3","buyListing","useCreateOffer","_s4","createOffer","useAcceptOffer","_s5","acceptOffer","useCancelListing","_s6","cancelListing","useCancelOffer","_s7","cancelOffer","useMarketplaceFees","_s8","fees","setFees","setLoading","setError","fetchFees","getOrderbookFee","contractAddress","chainId","data","err","useSupportedCurrencies","_s9","currencies","setCurrencies","fetchCurrencies","getSupportedCurrencies","useSDKStatus","configured","ready","apiKeyMissing","useProgressTracker","_s0","progress","setProgress","step","percentage","active","createProgressCallback","complete","useDomainTrading","tokenId","_s1","resetProgress","sdkStatus"],"sources":["/Users/kaelabbott/Downloads/autozama/doma/src/hooks/useDomaSDK.ts"],"sourcesContent":["import { useState, useCallback } from 'react';\nimport { JsonRpcSigner } from 'ethers';\nimport { \n  domaSDKClient, \n  isSDKConfigured, \n  getChainId,\n  type ProgressCallback \n} from '../lib/doma-sdk-client';\n\n// Types for SDK operations\ninterface SDKOperationState {\n  loading: boolean;\n  error: string | null;\n  success: boolean;\n}\n\ninterface UseSDKOperationResult extends SDKOperationState {\n  execute: (...args: any[]) => Promise<any>;\n  reset: () => void;\n}\n\n// Generic hook for SDK operations\nconst useSDKOperation = <T extends any[], R>(\n  operation: (...args: T) => Promise<R>\n): UseSDKOperationResult => {\n  const [state, setState] = useState<SDKOperationState>({\n    loading: false,\n    error: null,\n    success: false,\n  });\n\n  const execute = useCallback(async (...args: T) => {\n    setState({ loading: true, error: null, success: false });\n    \n    try {\n      const result = await operation(...args);\n      setState({ loading: false, error: null, success: true });\n      return result;\n    } catch (error) {\n      const errorMessage = error instanceof Error ? error.message : 'An error occurred';\n      setState({ loading: false, error: errorMessage, success: false });\n      throw error;\n    }\n  }, [operation]);\n\n  const reset = useCallback(() => {\n    setState({ loading: false, error: null, success: false });\n  }, []);\n\n  return { ...state, execute, reset };\n};\n\n// Hook for creating domain listings\nexport const useCreateListing = () => {\n  const createListing = useCallback(async (params: {\n    contractAddress: string;\n    tokenId: string;\n    price: string; // in wei\n    signer: JsonRpcSigner;\n    chainId?: string;\n    onProgress?: ProgressCallback;\n  }) => {\n    return await domaSDKClient.createListing(params);\n  }, []);\n\n  return useSDKOperation(createListing);\n};\n\n// Hook for buying domain listings\nexport const useBuyListing = () => {\n  const buyListing = useCallback(async (params: {\n    orderId: string;\n    fulFillerAddress: string;\n    signer: JsonRpcSigner;\n    chainId?: string;\n    onProgress?: ProgressCallback;\n  }) => {\n    return await domaSDKClient.buyListing(params);\n  }, []);\n\n  return useSDKOperation(buyListing);\n};\n\n// Hook for creating offers\nexport const useCreateOffer = () => {\n  const createOffer = useCallback(async (params: {\n    contractAddress: string;\n    tokenId: string;\n    price: string; // in wei\n    currencyContractAddress?: string;\n    expirationTime?: number;\n    signer: JsonRpcSigner;\n    chainId?: string;\n    onProgress?: ProgressCallback;\n  }) => {\n    return await domaSDKClient.createOffer(params);\n  }, []);\n\n  return useSDKOperation(createOffer);\n};\n\n// Hook for accepting offers\nexport const useAcceptOffer = () => {\n  const acceptOffer = useCallback(async (params: {\n    orderId: string;\n    signer: JsonRpcSigner;\n    chainId?: string;\n    onProgress?: ProgressCallback;\n  }) => {\n    return await domaSDKClient.acceptOffer(params);\n  }, []);\n\n  return useSDKOperation(acceptOffer);\n};\n\n// Hook for canceling listings\nexport const useCancelListing = () => {\n  const cancelListing = useCallback(async (params: {\n    orderId: string;\n    signer: JsonRpcSigner;\n    chainId?: string;\n    onProgress?: ProgressCallback;\n  }) => {\n    return await domaSDKClient.cancelListing(params);\n  }, []);\n\n  return useSDKOperation(cancelListing);\n};\n\n// Hook for canceling offers\nexport const useCancelOffer = () => {\n  const cancelOffer = useCallback(async (params: {\n    orderId: string;\n    signer: JsonRpcSigner;\n    chainId?: string;\n    onProgress?: ProgressCallback;\n  }) => {\n    return await domaSDKClient.cancelOffer(params);\n  }, []);\n\n  return useSDKOperation(cancelOffer);\n};\n\n// Hook for getting marketplace fees\nexport const useMarketplaceFees = () => {\n  const [fees, setFees] = useState<any>(null);\n  const [loading, setLoading] = useState(false);\n  const [error, setError] = useState<string | null>(null);\n\n  const fetchFees = useCallback(async (params: {\n    contractAddress: string;\n    chainId?: string;\n  }) => {\n    setLoading(true);\n    setError(null);\n    \n    try {\n      const result = await domaSDKClient.getOrderbookFee({\n        contractAddress: params.contractAddress,\n        chainId: params.chainId,\n      });\n      \n      if (result.success) {\n        setFees(result.data);\n      } else {\n        setError(result.error);\n      }\n    } catch (err) {\n      setError(err instanceof Error ? err.message : 'Failed to fetch fees');\n    } finally {\n      setLoading(false);\n    }\n  }, []);\n\n  return { fees, loading, error, fetchFees };\n};\n\n// Hook for getting supported currencies\nexport const useSupportedCurrencies = () => {\n  const [currencies, setCurrencies] = useState<any[]>([]);\n  const [loading, setLoading] = useState(false);\n  const [error, setError] = useState<string | null>(null);\n\n  const fetchCurrencies = useCallback(async (params: {\n    contractAddress: string;\n    chainId?: string;\n  }) => {\n    setLoading(true);\n    setError(null);\n    \n    try {\n      const result = await domaSDKClient.getSupportedCurrencies({\n        contractAddress: params.contractAddress,\n        chainId: params.chainId,\n      });\n      \n      if (result.success) {\n        setCurrencies(result.data.currencies || []);\n      } else {\n        setError(result.error);\n      }\n    } catch (err) {\n      setError(err instanceof Error ? err.message : 'Failed to fetch currencies');\n    } finally {\n      setLoading(false);\n    }\n  }, []);\n\n  return { currencies, loading, error, fetchCurrencies };\n};\n\n// Utility hook for SDK status and configuration\nexport const useSDKStatus = () => {\n  const configured = isSDKConfigured();\n  const chainId = getChainId();\n  \n  return {\n    configured,\n    chainId,\n    ready: configured, // SDK is ready if API key is configured\n    apiKeyMissing: !configured,\n  };\n};\n\n// Hook for progress tracking across operations\nexport const useProgressTracker = () => {\n  const [progress, setProgress] = useState<{\n    step: string;\n    percentage: number;\n    active: boolean;\n  }>({\n    step: '',\n    percentage: 0,\n    active: false,\n  });\n\n  const createProgressCallback = useCallback((): ProgressCallback => {\n    return (step: string, percentage: number) => {\n      setProgress({\n        step,\n        percentage,\n        active: true,\n      });\n    };\n  }, []);\n\n  const reset = useCallback(() => {\n    setProgress({\n      step: '',\n      percentage: 0,\n      active: false,\n    });\n  }, []);\n\n  const complete = useCallback(() => {\n    setProgress({\n      step: 'Complete',\n      percentage: 100,\n      active: false,\n    });\n  }, []);\n\n  return {\n    progress,\n    createProgressCallback,\n    reset,\n    complete,\n  };\n};\n\n// Combined hook for complete trading functionality\nexport const useDomainTrading = (contractAddress: string, tokenId: string) => {\n  const chainId = getChainId();\n  \n  // Individual operation hooks\n  const createListing = useCreateListing();\n  const buyListing = useBuyListing();\n  const createOffer = useCreateOffer();\n  const acceptOffer = useAcceptOffer();\n  const cancelListing = useCancelListing();\n  const cancelOffer = useCancelOffer();\n  \n  // Utility hooks\n  const { fees, fetchFees } = useMarketplaceFees();\n  const { currencies, fetchCurrencies } = useSupportedCurrencies();\n  const { progress, createProgressCallback, reset: resetProgress } = useProgressTracker();\n  const sdkStatus = useSDKStatus();\n\n  // Initialize fees and currencies on mount\n  useState(() => {\n    if (contractAddress && sdkStatus.configured) {\n      fetchFees({ contractAddress, chainId });\n      fetchCurrencies({ contractAddress, chainId });\n    }\n  });\n\n  return {\n    // Operations\n    createListing,\n    buyListing,\n    createOffer,\n    acceptOffer,\n    cancelListing,\n    cancelOffer,\n    \n    // Data\n    fees,\n    currencies,\n    progress,\n    \n    // Utilities\n    createProgressCallback,\n    resetProgress,\n    sdkStatus,\n    chainId,\n    \n    // Domain-specific data\n    contractAddress,\n    tokenId,\n  };\n};\n\n// Export types\nexport type { ProgressCallback };\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}