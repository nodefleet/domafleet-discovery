{"ast":null,"code":"var _s = $RefreshSig$(),\n  _s2 = $RefreshSig$(),\n  _s3 = $RefreshSig$(),\n  _s4 = $RefreshSig$(),\n  _s5 = $RefreshSig$(),\n  _s6 = $RefreshSig$(),\n  _s7 = $RefreshSig$();\nimport { useState, useEffect, useCallback } from 'react';\nimport { graphqlClient } from '../lib/doma-client';\nimport { GET_DOMAINS, GET_DOMAIN, GET_LISTINGS, GET_OFFERS, GET_TOKEN_ACTIVITIES, GET_NAME_ACTIVITIES } from '../lib/graphql-queries';\n\n// Types for domain data based on Doma schema\n\n// Legacy interfaces for backward compatibility\n\n// Helper function to convert DomaName to legacy Domain format\nfunction convertDomaNameToDomain(domaName) {\n  const firstToken = domaName.tokens[0];\n  const firstListing = firstToken === null || firstToken === void 0 ? void 0 : firstToken.listings[0];\n  return {\n    id: domaName.name,\n    name: domaName.name,\n    tokenId: (firstToken === null || firstToken === void 0 ? void 0 : firstToken.tokenId) || '',\n    ownerAddress: (firstToken === null || firstToken === void 0 ? void 0 : firstToken.ownerAddress) || '',\n    createdAt: domaName.tokenizedAt,\n    expiresAt: domaName.expiresAt,\n    registrationCost: '0',\n    // Not available in schema\n    renewalCost: '0',\n    // Not available in schema\n    isListed: ((firstToken === null || firstToken === void 0 ? void 0 : firstToken.listings) || []).length > 0,\n    currentPrice: firstListing === null || firstListing === void 0 ? void 0 : firstListing.price,\n    listingId: firstListing === null || firstListing === void 0 ? void 0 : firstListing.id,\n    offers: [],\n    // Would need separate query\n    activities: [] // Would need separate query\n  };\n}\n\n// Hook to fetch multiple domains with pagination and filtering\nexport function useDomains(limit = 50, skip = 0, filters) {\n  _s();\n  const [data, setData] = useState([]);\n  const [loading, setLoading] = useState(true);\n  const [error, setError] = useState(null);\n  const fetchDomains = useCallback(async () => {\n    try {\n      setLoading(true);\n      setError(null);\n      const variables = {\n        first: limit,\n        skip: skip,\n        where: filters || {}\n      };\n      const response = await graphqlClient.request(GET_DOMAINS, variables);\n      const result = response;\n      setData(result.names || []);\n    } catch (err) {\n      console.error('Error fetching domains:', err);\n      setError(err instanceof Error ? err.message : 'Failed to fetch domains');\n    } finally {\n      setLoading(false);\n    }\n  }, [limit, skip, filters]);\n  useEffect(() => {\n    fetchDomains();\n  }, [fetchDomains]);\n  return {\n    data,\n    loading,\n    error,\n    refetch: fetchDomains\n  };\n}\n\n// Hook to fetch a single domain by ID\n_s(useDomains, \"jAAedYe4rOCDYvDvKRuLrR0YTck=\");\nexport function useDomain(id) {\n  _s2();\n  const [data, setData] = useState(null);\n  const [loading, setLoading] = useState(true);\n  const [error, setError] = useState(null);\n  const fetchDomain = useCallback(async () => {\n    if (!id) return;\n    try {\n      setLoading(true);\n      setError(null);\n      const response = await graphqlClient.request(GET_DOMAIN, {\n        id\n      });\n      const result = response;\n      setData(result.name || null);\n    } catch (err) {\n      console.error('Error fetching domain:', err);\n      setError(err instanceof Error ? err.message : 'Failed to fetch domain');\n    } finally {\n      setLoading(false);\n    }\n  }, [id]);\n  useEffect(() => {\n    fetchDomain();\n  }, [fetchDomain]);\n  return {\n    data,\n    loading,\n    error,\n    refetch: fetchDomain\n  };\n}\n\n// Hook to fetch domain statistics\n_s2(useDomain, \"l+vBHPVKuj5fqWmre/6/9MMevj0=\");\nexport function useDomainStatistics() {\n  _s3();\n  const [data, setData] = useState(null);\n  const [loading, setLoading] = useState(true);\n  const [error, setError] = useState(null);\n  const fetchStatistics = useCallback(async () => {\n    try {\n      setLoading(true);\n      setError(null);\n      const response = await graphqlClient.request(GET_DOMAIN_STATISTICS);\n      const result = response;\n      setData(result.domainStats || null);\n    } catch (err) {\n      console.error('Error fetching domain statistics:', err);\n      setError(err instanceof Error ? err.message : 'Failed to fetch domain statistics');\n    } finally {\n      setLoading(false);\n    }\n  }, []);\n  useEffect(() => {\n    fetchStatistics();\n  }, [fetchStatistics]);\n  return {\n    data,\n    loading,\n    error,\n    refetch: fetchStatistics\n  };\n}\n\n// Hook to fetch marketplace listings\n_s3(useDomainStatistics, \"sa8qLyqSTTnLf77nLUprujujXuA=\");\nexport function useMarketplaceListings(limit = 50, skip = 0, filters) {\n  _s4();\n  const [data, setData] = useState([]);\n  const [loading, setLoading] = useState(true);\n  const [error, setError] = useState(null);\n  const fetchListings = useCallback(async () => {\n    try {\n      setLoading(true);\n      setError(null);\n      const variables = {\n        first: limit,\n        skip: skip,\n        where: filters || {}\n      };\n      const response = await graphqlClient.request(GET_LISTINGS, variables);\n      const result = response;\n      setData(result.listings || []);\n    } catch (err) {\n      console.error('Error fetching marketplace listings:', err);\n      setError(err instanceof Error ? err.message : 'Failed to fetch marketplace listings');\n    } finally {\n      setLoading(false);\n    }\n  }, [limit, skip, filters]);\n  useEffect(() => {\n    fetchListings();\n  }, [fetchListings]);\n  return {\n    data,\n    loading,\n    error,\n    refetch: fetchListings\n  };\n}\n\n// Hook to fetch offers\n_s4(useMarketplaceListings, \"8x4gMINCvTcY/GtRL1Nehz3RNaQ=\");\nexport function useOffers(limit = 50, skip = 0, filters) {\n  _s5();\n  const [data, setData] = useState([]);\n  const [loading, setLoading] = useState(true);\n  const [error, setError] = useState(null);\n  const fetchOffers = useCallback(async () => {\n    try {\n      setLoading(true);\n      setError(null);\n      const variables = {\n        first: limit,\n        skip: skip,\n        where: filters || {}\n      };\n      const response = await graphqlClient.request(GET_OFFERS, variables);\n      const result = response;\n      setData(result.offers || []);\n    } catch (err) {\n      console.error('Error fetching offers:', err);\n      setError(err instanceof Error ? err.message : 'Failed to fetch offers');\n    } finally {\n      setLoading(false);\n    }\n  }, [limit, skip, filters]);\n  useEffect(() => {\n    fetchOffers();\n  }, [fetchOffers]);\n  return {\n    data,\n    loading,\n    error,\n    refetch: fetchOffers\n  };\n}\n\n// Hook to fetch token activities\n_s5(useOffers, \"jrG/8Vb5t3pUHOp9SHVj+KyQaOk=\");\nexport function useTokenActivities(tokenId, limit = 50, skip = 0) {\n  _s6();\n  const [data, setData] = useState([]);\n  const [loading, setLoading] = useState(true);\n  const [error, setError] = useState(null);\n  const fetchActivities = useCallback(async () => {\n    if (!tokenId) return;\n    try {\n      setLoading(true);\n      setError(null);\n      const variables = {\n        tokenId,\n        first: limit,\n        skip: skip\n      };\n      const response = await graphqlClient.request(GET_TOKEN_ACTIVITIES, variables);\n      const result = response;\n      setData(result.tokenActivities || []);\n    } catch (err) {\n      console.error('Error fetching token activities:', err);\n      setError(err instanceof Error ? err.message : 'Failed to fetch token activities');\n    } finally {\n      setLoading(false);\n    }\n  }, [tokenId, limit, skip]);\n  useEffect(() => {\n    fetchActivities();\n  }, [fetchActivities]);\n  return {\n    data,\n    loading,\n    error,\n    refetch: fetchActivities\n  };\n}\n\n// Hook to fetch name activities\n_s6(useTokenActivities, \"kTav9sHWremNe2k6Q9ge50TdGvI=\");\nexport function useNameActivities(name, limit = 50, skip = 0) {\n  _s7();\n  const [data, setData] = useState([]);\n  const [loading, setLoading] = useState(true);\n  const [error, setError] = useState(null);\n  const fetchActivities = useCallback(async () => {\n    if (!name) return;\n    try {\n      setLoading(true);\n      setError(null);\n      const variables = {\n        name,\n        first: limit,\n        skip: skip\n      };\n      const response = await graphqlClient.request(GET_NAME_ACTIVITIES, variables);\n      const result = response;\n      setData(result.nameActivities || []);\n    } catch (err) {\n      console.error('Error fetching name activities:', err);\n      setError(err instanceof Error ? err.message : 'Failed to fetch name activities');\n    } finally {\n      setLoading(false);\n    }\n  }, [name, limit, skip]);\n  useEffect(() => {\n    fetchActivities();\n  }, [fetchActivities]);\n  return {\n    data,\n    loading,\n    error,\n    refetch: fetchActivities\n  };\n}\n_s7(useNameActivities, \"kTav9sHWremNe2k6Q9ge50TdGvI=\");","map":{"version":3,"names":["useState","useEffect","useCallback","graphqlClient","GET_DOMAINS","GET_DOMAIN","GET_LISTINGS","GET_OFFERS","GET_TOKEN_ACTIVITIES","GET_NAME_ACTIVITIES","convertDomaNameToDomain","domaName","firstToken","tokens","firstListing","listings","id","name","tokenId","ownerAddress","createdAt","tokenizedAt","expiresAt","registrationCost","renewalCost","isListed","length","currentPrice","price","listingId","offers","activities","useDomains","limit","skip","filters","_s","data","setData","loading","setLoading","error","setError","fetchDomains","variables","first","where","response","request","result","names","err","console","Error","message","refetch","useDomain","_s2","fetchDomain","useDomainStatistics","_s3","fetchStatistics","GET_DOMAIN_STATISTICS","domainStats","useMarketplaceListings","_s4","fetchListings","useOffers","_s5","fetchOffers","useTokenActivities","_s6","fetchActivities","tokenActivities","useNameActivities","_s7","nameActivities"],"sources":["/Users/kaelabbott/Downloads/autozama/doma/src/hooks/useDomainData.ts"],"sourcesContent":["import { useState, useEffect, useCallback } from 'react';\nimport { graphqlClient } from '../lib/doma-client';\nimport {\n  GET_DOMAINS,\n  GET_DOMAIN,\n  GET_NAME_STATISTICS,\n  GET_LISTINGS,\n  GET_OFFERS,\n  GET_TOKEN_ACTIVITIES,\n  GET_NAME_ACTIVITIES,\n} from '../lib/graphql-queries';\n\n// Types for domain data based on Doma schema\nexport interface DomainListResponse {\n  names: {\n    items: DomaName[];\n    totalCount: number;\n    pageSize: number;\n    currentPage: number;\n    totalPages: number;\n    hasPreviousPage: boolean;\n    hasNextPage: boolean;\n  };\n}\n\nexport interface DomaName {\n  name: string;\n  expiresAt: string;\n  tokenizedAt: string;\n  eoi: boolean;\n  transferLock?: boolean;\n  claimedBy?: string;\n  registrar: {\n    name: string;\n    ianaId: string;\n  };\n  tokens: DomaToken[];\n  activities?: DomaNameActivity[];\n}\n\nexport interface DomaToken {\n  tokenId: string;\n  networkId: string;\n  ownerAddress: string;\n  type: string;\n  startsAt?: string;\n  expiresAt: string;\n  createdAt: string;\n  explorerUrl: string;\n  tokenAddress: string;\n  chain: {\n    name: string;\n    networkId: string;\n  };\n  listings: DomaListing[];\n  activities?: DomaTokenActivity[];\n}\n\nexport interface DomaListing {\n  id: string;\n  externalId: string;\n  price: string;\n  offererAddress: string;\n  orderbook: string;\n  currency: {\n    name: string;\n    symbol: string;\n    decimals: number;\n  };\n  expiresAt: string;\n  createdAt: string;\n}\n\nexport interface DomaOffer {\n  id: string;\n  externalId: string;\n  price: string;\n  offererAddress: string;\n  orderbook: string;\n  currency: {\n    name: string;\n    symbol: string;\n    decimals: number;\n  };\n  expiresAt: string;\n  createdAt: string;\n  name: string;\n  nameExpiresAt: string;\n  registrar: {\n    name: string;\n    ianaId: string;\n  };\n  tokenId: string;\n  tokenAddress: string;\n  chain: {\n    name: string;\n    networkId: string;\n  };\n}\n\nexport interface DomaTokenActivity {\n  type: string;\n  createdAt: string;\n  tokenId?: string;\n  txHash?: string;\n  networkId?: string;\n  finalized?: boolean;\n  transferredTo?: string;\n  transferredFrom?: string;\n  orderId?: string;\n  startsAt?: string;\n  seller?: string;\n  buyer?: string;\n  payment?: {\n    price: string;\n    tokenAddress: string;\n    currencySymbol: string;\n  };\n  orderbook?: string;\n  purchasedAt?: string;\n}\n\nexport interface DomaNameActivity {\n  type: string;\n  createdAt: string;\n  sld?: string;\n  tld?: string;\n  claimedBy?: string;\n  txHash?: string;\n  networkId?: string;\n}\n\nexport interface DomaNameStatistics {\n  name: string;\n  activeOffers: number;\n  offersLast3Days: number;\n  highestOffer?: DomaOffer;\n}\n\n// Legacy interfaces for backward compatibility\nexport interface Domain {\n  id: string;\n  name: string;\n  tokenId: string;\n  ownerAddress: string;\n  createdAt: string;\n  expiresAt: string;\n  registrationCost: string;\n  renewalCost: string;\n  isListed: boolean;\n  currentPrice?: string;\n  listingId?: string;\n  offers?: Offer[];\n  activities?: Activity[];\n}\n\nexport interface Offer {\n  id: string;\n  price: string;\n  offerAddress: string;\n  expiresAt: string;\n  status: string;\n  createdAt: string;\n}\n\nexport interface Activity {\n  id: string;\n  type: string;\n  fromAddress: string;\n  toAddress: string;\n  price?: string;\n  timestamp: string;\n  transactionHash: string;\n}\n\nexport interface DomainStatistics {\n  totalDomains: number;\n  totalVolume: string;\n  totalSales: number;\n  averagePrice: string;\n  floorPrice: string;\n  topSale: string;\n}\n\nexport interface Listing {\n  id: string;\n  tokenId: string;\n  price: string;\n  seller: string;\n  buyer?: string;\n  status: string;\n  createdAt: string;\n  expiresAt: string;\n  domain: Domain;\n}\n\n// Helper function to convert DomaName to legacy Domain format\nfunction convertDomaNameToDomain(domaName: DomaName): Domain {\n  const firstToken = domaName.tokens[0];\n  const firstListing = firstToken?.listings[0];\n  \n  return {\n    id: domaName.name,\n    name: domaName.name,\n    tokenId: firstToken?.tokenId || '',\n    ownerAddress: firstToken?.ownerAddress || '',\n    createdAt: domaName.tokenizedAt,\n    expiresAt: domaName.expiresAt,\n    registrationCost: '0', // Not available in schema\n    renewalCost: '0', // Not available in schema\n    isListed: (firstToken?.listings || []).length > 0,\n    currentPrice: firstListing?.price,\n    listingId: firstListing?.id,\n    offers: [], // Would need separate query\n    activities: [], // Would need separate query\n  };\n}\n\n// Hook to fetch multiple domains with pagination and filtering\nexport function useDomains(limit: number = 50, skip: number = 0, filters?: any) {\n  const [data, setData] = useState<Domain[]>([]);\n  const [loading, setLoading] = useState(true);\n  const [error, setError] = useState<string | null>(null);\n\n  const fetchDomains = useCallback(async () => {\n    try {\n      setLoading(true);\n      setError(null);\n\n      const variables = {\n        first: limit,\n        skip: skip,\n        where: filters || {},\n      };\n\n      const response = await graphqlClient.request(GET_DOMAINS, variables);\n      const result = response as { names: Domain[] };\n      setData(result.names || []);\n    } catch (err) {\n      console.error('Error fetching domains:', err);\n      setError(err instanceof Error ? err.message : 'Failed to fetch domains');\n    } finally {\n      setLoading(false);\n    }\n  }, [limit, skip, filters]);\n\n  useEffect(() => {\n    fetchDomains();\n  }, [fetchDomains]);\n\n  return { data, loading, error, refetch: fetchDomains };\n}\n\n// Hook to fetch a single domain by ID\nexport function useDomain(id: string) {\n  const [data, setData] = useState<Domain | null>(null);\n  const [loading, setLoading] = useState(true);\n  const [error, setError] = useState<string | null>(null);\n\n  const fetchDomain = useCallback(async () => {\n    if (!id) return;\n\n    try {\n      setLoading(true);\n      setError(null);\n\n      const response = await graphqlClient.request(GET_DOMAIN, { id });\n      const result = response as { name: Domain };\n      setData(result.name || null);\n    } catch (err) {\n      console.error('Error fetching domain:', err);\n      setError(err instanceof Error ? err.message : 'Failed to fetch domain');\n    } finally {\n      setLoading(false);\n    }\n  }, [id]);\n\n  useEffect(() => {\n    fetchDomain();\n  }, [fetchDomain]);\n\n  return { data, loading, error, refetch: fetchDomain };\n}\n\n// Hook to fetch domain statistics\nexport function useDomainStatistics() {\n  const [data, setData] = useState<DomainStatistics | null>(null);\n  const [loading, setLoading] = useState(true);\n  const [error, setError] = useState<string | null>(null);\n\n  const fetchStatistics = useCallback(async () => {\n    try {\n      setLoading(true);\n      setError(null);\n\n      const response = await graphqlClient.request(GET_DOMAIN_STATISTICS);\n      const result = response as { domainStats: DomainStatistics };\n      setData(result.domainStats || null);\n    } catch (err) {\n      console.error('Error fetching domain statistics:', err);\n      setError(err instanceof Error ? err.message : 'Failed to fetch domain statistics');\n    } finally {\n      setLoading(false);\n    }\n  }, []);\n\n  useEffect(() => {\n    fetchStatistics();\n  }, [fetchStatistics]);\n\n  return { data, loading, error, refetch: fetchStatistics };\n}\n\n// Hook to fetch marketplace listings\nexport function useMarketplaceListings(limit: number = 50, skip: number = 0, filters?: any) {\n  const [data, setData] = useState<Listing[]>([]);\n  const [loading, setLoading] = useState(true);\n  const [error, setError] = useState<string | null>(null);\n\n  const fetchListings = useCallback(async () => {\n    try {\n      setLoading(true);\n      setError(null);\n\n      const variables = {\n        first: limit,\n        skip: skip,\n        where: filters || {},\n      };\n\n      const response = await graphqlClient.request(GET_LISTINGS, variables);\n      const result = response as { listings: Listing[] };\n      setData(result.listings || []);\n    } catch (err) {\n      console.error('Error fetching marketplace listings:', err);\n      setError(err instanceof Error ? err.message : 'Failed to fetch marketplace listings');\n    } finally {\n      setLoading(false);\n    }\n  }, [limit, skip, filters]);\n\n  useEffect(() => {\n    fetchListings();\n  }, [fetchListings]);\n\n  return { data, loading, error, refetch: fetchListings };\n}\n\n// Hook to fetch offers\nexport function useOffers(limit: number = 50, skip: number = 0, filters?: any) {\n  const [data, setData] = useState<Offer[]>([]);\n  const [loading, setLoading] = useState(true);\n  const [error, setError] = useState<string | null>(null);\n\n  const fetchOffers = useCallback(async () => {\n    try {\n      setLoading(true);\n      setError(null);\n\n      const variables = {\n        first: limit,\n        skip: skip,\n        where: filters || {},\n      };\n\n      const response = await graphqlClient.request(GET_OFFERS, variables);\n      const result = response as { offers: Offer[] };\n      setData(result.offers || []);\n    } catch (err) {\n      console.error('Error fetching offers:', err);\n      setError(err instanceof Error ? err.message : 'Failed to fetch offers');\n    } finally {\n      setLoading(false);\n    }\n  }, [limit, skip, filters]);\n\n  useEffect(() => {\n    fetchOffers();\n  }, [fetchOffers]);\n\n  return { data, loading, error, refetch: fetchOffers };\n}\n\n// Hook to fetch token activities\nexport function useTokenActivities(tokenId: string, limit: number = 50, skip: number = 0) {\n  const [data, setData] = useState<Activity[]>([]);\n  const [loading, setLoading] = useState(true);\n  const [error, setError] = useState<string | null>(null);\n\n  const fetchActivities = useCallback(async () => {\n    if (!tokenId) return;\n\n    try {\n      setLoading(true);\n      setError(null);\n\n      const variables = {\n        tokenId,\n        first: limit,\n        skip: skip,\n      };\n\n      const response = await graphqlClient.request(GET_TOKEN_ACTIVITIES, variables);\n      const result = response as { tokenActivities: Activity[] };\n      setData(result.tokenActivities || []);\n    } catch (err) {\n      console.error('Error fetching token activities:', err);\n      setError(err instanceof Error ? err.message : 'Failed to fetch token activities');\n    } finally {\n      setLoading(false);\n    }\n  }, [tokenId, limit, skip]);\n\n  useEffect(() => {\n    fetchActivities();\n  }, [fetchActivities]);\n\n  return { data, loading, error, refetch: fetchActivities };\n}\n\n// Hook to fetch name activities\nexport function useNameActivities(name: string, limit: number = 50, skip: number = 0) {\n  const [data, setData] = useState<Activity[]>([]);\n  const [loading, setLoading] = useState(true);\n  const [error, setError] = useState<string | null>(null);\n\n  const fetchActivities = useCallback(async () => {\n    if (!name) return;\n\n    try {\n      setLoading(true);\n      setError(null);\n\n      const variables = {\n        name,\n        first: limit,\n        skip: skip,\n      };\n\n      const response = await graphqlClient.request(GET_NAME_ACTIVITIES, variables);\n      const result = response as { nameActivities: Activity[] };\n      setData(result.nameActivities || []);\n    } catch (err) {\n      console.error('Error fetching name activities:', err);\n      setError(err instanceof Error ? err.message : 'Failed to fetch name activities');\n    } finally {\n      setLoading(false);\n    }\n  }, [name, limit, skip]);\n\n  useEffect(() => {\n    fetchActivities();\n  }, [fetchActivities]);\n\n  return { data, loading, error, refetch: fetchActivities };\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}