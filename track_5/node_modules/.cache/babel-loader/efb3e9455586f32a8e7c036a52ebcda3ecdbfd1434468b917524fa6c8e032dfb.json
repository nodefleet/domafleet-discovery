{"ast":null,"code":"var _s = $RefreshSig$(),\n  _s2 = $RefreshSig$(),\n  _s3 = $RefreshSig$(),\n  _s4 = $RefreshSig$(),\n  _s5 = $RefreshSig$(),\n  _s6 = $RefreshSig$(),\n  _s7 = $RefreshSig$();\nimport { useState, useEffect, useCallback } from 'react';\nimport { graphqlClient } from '../lib/doma-client';\nimport { GET_DOMAINS, GET_DOMAIN, GET_NAME_STATISTICS, GET_LISTINGS, GET_OFFERS, GET_TOKEN_ACTIVITIES, GET_NAME_ACTIVITIES } from '../lib/graphql-queries';\n\n// Types for domain data based on Doma schema\n\n// Legacy interfaces for backward compatibility\n\n// Helper function to convert DomaName to legacy Domain format\nfunction convertDomaNameToDomain(domaName) {\n  const firstToken = domaName.tokens[0];\n  const firstListing = firstToken === null || firstToken === void 0 ? void 0 : firstToken.listings[0];\n  return {\n    id: domaName.name,\n    name: domaName.name,\n    tokenId: (firstToken === null || firstToken === void 0 ? void 0 : firstToken.tokenId) || '',\n    ownerAddress: (firstToken === null || firstToken === void 0 ? void 0 : firstToken.ownerAddress) || '',\n    createdAt: domaName.tokenizedAt,\n    expiresAt: domaName.expiresAt,\n    registrationCost: '0',\n    // Not available in schema\n    renewalCost: '0',\n    // Not available in schema\n    isListed: ((firstToken === null || firstToken === void 0 ? void 0 : firstToken.listings) || []).length > 0,\n    currentPrice: firstListing === null || firstListing === void 0 ? void 0 : firstListing.price,\n    listingId: firstListing === null || firstListing === void 0 ? void 0 : firstListing.id,\n    offers: [],\n    // Would need separate query\n    activities: [] // Would need separate query\n  };\n}\n\n// Hook to fetch multiple domains with pagination and filtering\nexport function useDomains(limit = 50, skip = 0, filters) {\n  _s();\n  const [data, setData] = useState([]);\n  const [loading, setLoading] = useState(true);\n  const [error, setError] = useState(null);\n  const fetchDomains = useCallback(async () => {\n    try {\n      var _result$names;\n      setLoading(true);\n      setError(null);\n      const variables = {\n        take: limit,\n        skip: skip,\n        name: filters === null || filters === void 0 ? void 0 : filters.name,\n        claimStatus: (filters === null || filters === void 0 ? void 0 : filters.claimStatus) || 'ALL',\n        sortOrder: (filters === null || filters === void 0 ? void 0 : filters.sortOrder) || 'DESC'\n      };\n      const response = await graphqlClient.request(GET_DOMAINS, variables);\n      const result = response;\n\n      // Convert DomaName objects to legacy Domain format\n      const domains = (((_result$names = result.names) === null || _result$names === void 0 ? void 0 : _result$names.items) || []).map(convertDomaNameToDomain);\n      setData(domains);\n    } catch (err) {\n      console.error('Error fetching domains:', err);\n      setError(err instanceof Error ? err.message : 'Failed to fetch domains');\n    } finally {\n      setLoading(false);\n    }\n  }, [limit, skip, filters]);\n  useEffect(() => {\n    fetchDomains();\n  }, [fetchDomains]);\n  return {\n    data,\n    loading,\n    error,\n    refetch: fetchDomains\n  };\n}\n\n// Hook to fetch a single domain by name\n_s(useDomains, \"jAAedYe4rOCDYvDvKRuLrR0YTck=\");\nexport function useDomain(domainName) {\n  _s2();\n  const [data, setData] = useState(null);\n  const [loading, setLoading] = useState(true);\n  const [error, setError] = useState(null);\n  const fetchDomain = useCallback(async () => {\n    if (!domainName) return;\n    try {\n      setLoading(true);\n      setError(null);\n      const response = await graphqlClient.request(GET_DOMAIN, {\n        name: domainName\n      });\n      const result = response;\n      if (result.name) {\n        const domain = convertDomaNameToDomain(result.name);\n        setData(domain);\n      } else {\n        setData(null);\n      }\n    } catch (err) {\n      console.error('Error fetching domain:', err);\n      setError(err instanceof Error ? err.message : 'Failed to fetch domain');\n    } finally {\n      setLoading(false);\n    }\n  }, [domainName]);\n  useEffect(() => {\n    fetchDomain();\n  }, [fetchDomain]);\n  return {\n    data,\n    loading,\n    error,\n    refetch: fetchDomain\n  };\n}\n\n// Hook to fetch domain statistics\n_s2(useDomain, \"l+vBHPVKuj5fqWmre/6/9MMevj0=\");\nexport function useDomainStatistics(tokenId) {\n  _s3();\n  const [data, setData] = useState(null);\n  const [loading, setLoading] = useState(true);\n  const [error, setError] = useState(null);\n  const fetchStatistics = useCallback(async () => {\n    if (!tokenId) {\n      setLoading(false);\n      return;\n    }\n    try {\n      setLoading(true);\n      setError(null);\n      const response = await graphqlClient.request(GET_NAME_STATISTICS, {\n        tokenId\n      });\n      const result = response;\n      setData(result.nameStatistics || null);\n    } catch (err) {\n      console.error('Error fetching domain statistics:', err);\n      setError(err instanceof Error ? err.message : 'Failed to fetch domain statistics');\n    } finally {\n      setLoading(false);\n    }\n  }, [tokenId]);\n  useEffect(() => {\n    fetchStatistics();\n  }, [fetchStatistics]);\n  return {\n    data,\n    loading,\n    error,\n    refetch: fetchStatistics\n  };\n}\n\n// Hook to fetch marketplace listings\n_s3(useDomainStatistics, \"sa8qLyqSTTnLf77nLUprujujXuA=\");\nexport function useMarketplaceListings(limit = 50, skip = 0, filters) {\n  _s4();\n  const [data, setData] = useState([]);\n  const [loading, setLoading] = useState(true);\n  const [error, setError] = useState(null);\n  const fetchListings = useCallback(async () => {\n    try {\n      var _result$listings;\n      setLoading(true);\n      setError(null);\n      const variables = {\n        take: limit,\n        skip: skip,\n        tlds: filters === null || filters === void 0 ? void 0 : filters.tlds,\n        createdSince: filters === null || filters === void 0 ? void 0 : filters.createdSince,\n        sld: filters === null || filters === void 0 ? void 0 : filters.sld\n      };\n      const response = await graphqlClient.request(GET_LISTINGS, variables);\n      const result = response;\n      setData(((_result$listings = result.listings) === null || _result$listings === void 0 ? void 0 : _result$listings.items) || []);\n    } catch (err) {\n      console.error('Error fetching marketplace listings:', err);\n      setError(err instanceof Error ? err.message : 'Failed to fetch marketplace listings');\n    } finally {\n      setLoading(false);\n    }\n  }, [limit, skip, filters]);\n  useEffect(() => {\n    fetchListings();\n  }, [fetchListings]);\n  return {\n    data,\n    loading,\n    error,\n    refetch: fetchListings\n  };\n}\n\n// Hook to fetch offers\n_s4(useMarketplaceListings, \"8x4gMINCvTcY/GtRL1Nehz3RNaQ=\");\nexport function useOffers(limit = 50, skip = 0, filters) {\n  _s5();\n  const [data, setData] = useState([]);\n  const [loading, setLoading] = useState(true);\n  const [error, setError] = useState(null);\n  const fetchOffers = useCallback(async () => {\n    try {\n      var _result$offers;\n      setLoading(true);\n      setError(null);\n      const variables = {\n        take: limit,\n        skip: skip,\n        tokenId: filters === null || filters === void 0 ? void 0 : filters.tokenId,\n        status: (filters === null || filters === void 0 ? void 0 : filters.status) || 'ACTIVE',\n        sortOrder: (filters === null || filters === void 0 ? void 0 : filters.sortOrder) || 'DESC'\n      };\n      const response = await graphqlClient.request(GET_OFFERS, variables);\n      const result = response;\n      setData(((_result$offers = result.offers) === null || _result$offers === void 0 ? void 0 : _result$offers.items) || []);\n    } catch (err) {\n      console.error('Error fetching offers:', err);\n      setError(err instanceof Error ? err.message : 'Failed to fetch offers');\n    } finally {\n      setLoading(false);\n    }\n  }, [limit, skip, filters]);\n  useEffect(() => {\n    fetchOffers();\n  }, [fetchOffers]);\n  return {\n    data,\n    loading,\n    error,\n    refetch: fetchOffers\n  };\n}\n\n// Hook to fetch token activities\n_s5(useOffers, \"jrG/8Vb5t3pUHOp9SHVj+KyQaOk=\");\nexport function useTokenActivities(tokenId, limit = 50, skip = 0) {\n  _s6();\n  const [data, setData] = useState([]);\n  const [loading, setLoading] = useState(true);\n  const [error, setError] = useState(null);\n  const fetchActivities = useCallback(async () => {\n    if (!tokenId) return;\n    try {\n      var _result$tokenActiviti;\n      setLoading(true);\n      setError(null);\n      const variables = {\n        tokenId,\n        take: limit,\n        skip: skip,\n        sortOrder: 'DESC'\n      };\n      const response = await graphqlClient.request(GET_TOKEN_ACTIVITIES, variables);\n      const result = response;\n      setData(((_result$tokenActiviti = result.tokenActivities) === null || _result$tokenActiviti === void 0 ? void 0 : _result$tokenActiviti.items) || []);\n    } catch (err) {\n      console.error('Error fetching token activities:', err);\n      setError(err instanceof Error ? err.message : 'Failed to fetch token activities');\n    } finally {\n      setLoading(false);\n    }\n  }, [tokenId, limit, skip]);\n  useEffect(() => {\n    fetchActivities();\n  }, [fetchActivities]);\n  return {\n    data,\n    loading,\n    error,\n    refetch: fetchActivities\n  };\n}\n\n// Hook to fetch name activities\n_s6(useTokenActivities, \"kTav9sHWremNe2k6Q9ge50TdGvI=\");\nexport function useNameActivities(name, limit = 50, skip = 0) {\n  _s7();\n  const [data, setData] = useState([]);\n  const [loading, setLoading] = useState(true);\n  const [error, setError] = useState(null);\n  const fetchActivities = useCallback(async () => {\n    if (!name) return;\n    try {\n      var _result$nameActivitie;\n      setLoading(true);\n      setError(null);\n      const variables = {\n        name,\n        take: limit,\n        skip: skip,\n        sortOrder: 'DESC'\n      };\n      const response = await graphqlClient.request(GET_NAME_ACTIVITIES, variables);\n      const result = response;\n      setData(((_result$nameActivitie = result.nameActivities) === null || _result$nameActivitie === void 0 ? void 0 : _result$nameActivitie.items) || []);\n    } catch (err) {\n      console.error('Error fetching name activities:', err);\n      setError(err instanceof Error ? err.message : 'Failed to fetch name activities');\n    } finally {\n      setLoading(false);\n    }\n  }, [name, limit, skip]);\n  useEffect(() => {\n    fetchActivities();\n  }, [fetchActivities]);\n  return {\n    data,\n    loading,\n    error,\n    refetch: fetchActivities\n  };\n}\n_s7(useNameActivities, \"kTav9sHWremNe2k6Q9ge50TdGvI=\");","map":{"version":3,"names":["useState","useEffect","useCallback","graphqlClient","GET_DOMAINS","GET_DOMAIN","GET_NAME_STATISTICS","GET_LISTINGS","GET_OFFERS","GET_TOKEN_ACTIVITIES","GET_NAME_ACTIVITIES","convertDomaNameToDomain","domaName","firstToken","tokens","firstListing","listings","id","name","tokenId","ownerAddress","createdAt","tokenizedAt","expiresAt","registrationCost","renewalCost","isListed","length","currentPrice","price","listingId","offers","activities","useDomains","limit","skip","filters","_s","data","setData","loading","setLoading","error","setError","fetchDomains","_result$names","variables","take","claimStatus","sortOrder","response","request","result","domains","names","items","map","err","console","Error","message","refetch","useDomain","domainName","_s2","fetchDomain","domain","useDomainStatistics","_s3","fetchStatistics","nameStatistics","useMarketplaceListings","_s4","fetchListings","_result$listings","tlds","createdSince","sld","useOffers","_s5","fetchOffers","_result$offers","status","useTokenActivities","_s6","fetchActivities","_result$tokenActiviti","tokenActivities","useNameActivities","_s7","_result$nameActivitie","nameActivities"],"sources":["/Users/kaelabbott/Downloads/autozama/doma/src/hooks/useDomainData.ts"],"sourcesContent":["import { useState, useEffect, useCallback } from 'react';\nimport { graphqlClient } from '../lib/doma-client';\nimport {\n  GET_DOMAINS,\n  GET_DOMAIN,\n  GET_NAME_STATISTICS,\n  GET_LISTINGS,\n  GET_OFFERS,\n  GET_TOKEN_ACTIVITIES,\n  GET_NAME_ACTIVITIES,\n} from '../lib/graphql-queries';\n\n// Types for domain data based on Doma schema\nexport interface DomainListResponse {\n  names: {\n    items: DomaName[];\n    totalCount: number;\n    pageSize: number;\n    currentPage: number;\n    totalPages: number;\n    hasPreviousPage: boolean;\n    hasNextPage: boolean;\n  };\n}\n\nexport interface DomaName {\n  name: string;\n  expiresAt: string;\n  tokenizedAt: string;\n  eoi: boolean;\n  transferLock?: boolean;\n  claimedBy?: string;\n  registrar: {\n    name: string;\n    ianaId: string;\n  };\n  tokens: DomaToken[];\n  activities?: DomaNameActivity[];\n}\n\nexport interface DomaToken {\n  tokenId: string;\n  networkId: string;\n  ownerAddress: string;\n  type: string;\n  startsAt?: string;\n  expiresAt: string;\n  createdAt: string;\n  explorerUrl: string;\n  tokenAddress: string;\n  chain: {\n    name: string;\n    networkId: string;\n  };\n  listings: DomaListing[];\n  activities?: DomaTokenActivity[];\n}\n\nexport interface DomaListing {\n  id: string;\n  externalId: string;\n  price: string;\n  offererAddress: string;\n  orderbook: string;\n  currency: {\n    name: string;\n    symbol: string;\n    decimals: number;\n  };\n  expiresAt: string;\n  createdAt: string;\n}\n\nexport interface DomaOffer {\n  id: string;\n  externalId: string;\n  price: string;\n  offererAddress: string;\n  orderbook: string;\n  currency: {\n    name: string;\n    symbol: string;\n    decimals: number;\n  };\n  expiresAt: string;\n  createdAt: string;\n  name: string;\n  nameExpiresAt: string;\n  registrar: {\n    name: string;\n    ianaId: string;\n  };\n  tokenId: string;\n  tokenAddress: string;\n  chain: {\n    name: string;\n    networkId: string;\n  };\n}\n\nexport interface DomaTokenActivity {\n  type: string;\n  createdAt: string;\n  tokenId?: string;\n  txHash?: string;\n  networkId?: string;\n  finalized?: boolean;\n  transferredTo?: string;\n  transferredFrom?: string;\n  orderId?: string;\n  startsAt?: string;\n  seller?: string;\n  buyer?: string;\n  payment?: {\n    price: string;\n    tokenAddress: string;\n    currencySymbol: string;\n  };\n  orderbook?: string;\n  purchasedAt?: string;\n}\n\nexport interface DomaNameActivity {\n  type: string;\n  createdAt: string;\n  sld?: string;\n  tld?: string;\n  claimedBy?: string;\n  txHash?: string;\n  networkId?: string;\n}\n\nexport interface DomaNameStatistics {\n  name: string;\n  activeOffers: number;\n  offersLast3Days: number;\n  highestOffer?: DomaOffer;\n}\n\n// Legacy interfaces for backward compatibility\nexport interface Domain {\n  id: string;\n  name: string;\n  tokenId: string;\n  ownerAddress: string;\n  createdAt: string;\n  expiresAt: string;\n  registrationCost: string;\n  renewalCost: string;\n  isListed: boolean;\n  currentPrice?: string;\n  listingId?: string;\n  offers?: Offer[];\n  activities?: Activity[];\n}\n\nexport interface Offer {\n  id: string;\n  price: string;\n  offerAddress: string;\n  expiresAt: string;\n  status: string;\n  createdAt: string;\n}\n\nexport interface Activity {\n  id: string;\n  type: string;\n  fromAddress: string;\n  toAddress: string;\n  price?: string;\n  timestamp: string;\n  transactionHash: string;\n}\n\nexport interface DomainStatistics {\n  totalDomains: number;\n  totalVolume: string;\n  totalSales: number;\n  averagePrice: string;\n  floorPrice: string;\n  topSale: string;\n}\n\nexport interface Listing {\n  id: string;\n  tokenId: string;\n  price: string;\n  seller: string;\n  buyer?: string;\n  status: string;\n  createdAt: string;\n  expiresAt: string;\n  domain: Domain;\n}\n\n// Helper function to convert DomaName to legacy Domain format\nfunction convertDomaNameToDomain(domaName: DomaName): Domain {\n  const firstToken = domaName.tokens[0];\n  const firstListing = firstToken?.listings[0];\n  \n  return {\n    id: domaName.name,\n    name: domaName.name,\n    tokenId: firstToken?.tokenId || '',\n    ownerAddress: firstToken?.ownerAddress || '',\n    createdAt: domaName.tokenizedAt,\n    expiresAt: domaName.expiresAt,\n    registrationCost: '0', // Not available in schema\n    renewalCost: '0', // Not available in schema\n    isListed: (firstToken?.listings || []).length > 0,\n    currentPrice: firstListing?.price,\n    listingId: firstListing?.id,\n    offers: [], // Would need separate query\n    activities: [], // Would need separate query\n  };\n}\n\n// Hook to fetch multiple domains with pagination and filtering\nexport function useDomains(limit: number = 50, skip: number = 0, filters?: any) {\n  const [data, setData] = useState<Domain[]>([]);\n  const [loading, setLoading] = useState(true);\n  const [error, setError] = useState<string | null>(null);\n\n  const fetchDomains = useCallback(async () => {\n    try {\n      setLoading(true);\n      setError(null);\n\n      const variables = {\n        take: limit,\n        skip: skip,\n        name: filters?.name,\n        claimStatus: filters?.claimStatus || 'ALL',\n        sortOrder: filters?.sortOrder || 'DESC',\n      };\n\n      const response = await graphqlClient.request(GET_DOMAINS, variables);\n      const result = response as DomainListResponse;\n      \n      // Convert DomaName objects to legacy Domain format\n      const domains = (result.names?.items || []).map(convertDomaNameToDomain);\n      setData(domains);\n    } catch (err) {\n      console.error('Error fetching domains:', err);\n      setError(err instanceof Error ? err.message : 'Failed to fetch domains');\n    } finally {\n      setLoading(false);\n    }\n  }, [limit, skip, filters]);\n\n  useEffect(() => {\n    fetchDomains();\n  }, [fetchDomains]);\n\n  return { data, loading, error, refetch: fetchDomains };\n}\n\n// Hook to fetch a single domain by name\nexport function useDomain(domainName: string) {\n  const [data, setData] = useState<Domain | null>(null);\n  const [loading, setLoading] = useState(true);\n  const [error, setError] = useState<string | null>(null);\n\n  const fetchDomain = useCallback(async () => {\n    if (!domainName) return;\n\n    try {\n      setLoading(true);\n      setError(null);\n\n      const response = await graphqlClient.request(GET_DOMAIN, { name: domainName });\n      const result = response as { name: DomaName };\n      \n      if (result.name) {\n        const domain = convertDomaNameToDomain(result.name);\n        setData(domain);\n      } else {\n        setData(null);\n      }\n    } catch (err) {\n      console.error('Error fetching domain:', err);\n      setError(err instanceof Error ? err.message : 'Failed to fetch domain');\n    } finally {\n      setLoading(false);\n    }\n  }, [domainName]);\n\n  useEffect(() => {\n    fetchDomain();\n  }, [fetchDomain]);\n\n  return { data, loading, error, refetch: fetchDomain };\n}\n\n// Hook to fetch domain statistics\nexport function useDomainStatistics(tokenId?: string) {\n  const [data, setData] = useState<DomaNameStatistics | null>(null);\n  const [loading, setLoading] = useState(true);\n  const [error, setError] = useState<string | null>(null);\n\n  const fetchStatistics = useCallback(async () => {\n    if (!tokenId) {\n      setLoading(false);\n      return;\n    }\n\n    try {\n      setLoading(true);\n      setError(null);\n\n      const response = await graphqlClient.request(GET_NAME_STATISTICS, { tokenId });\n      const result = response as { nameStatistics: DomaNameStatistics };\n      setData(result.nameStatistics || null);\n    } catch (err) {\n      console.error('Error fetching domain statistics:', err);\n      setError(err instanceof Error ? err.message : 'Failed to fetch domain statistics');\n    } finally {\n      setLoading(false);\n    }\n  }, [tokenId]);\n\n  useEffect(() => {\n    fetchStatistics();\n  }, [fetchStatistics]);\n\n  return { data, loading, error, refetch: fetchStatistics };\n}\n\n// Hook to fetch marketplace listings\nexport function useMarketplaceListings(limit: number = 50, skip: number = 0, filters?: any) {\n  const [data, setData] = useState<DomaListing[]>([]);\n  const [loading, setLoading] = useState(true);\n  const [error, setError] = useState<string | null>(null);\n\n  const fetchListings = useCallback(async () => {\n    try {\n      setLoading(true);\n      setError(null);\n\n      const variables = {\n        take: limit,\n        skip: skip,\n        tlds: filters?.tlds,\n        createdSince: filters?.createdSince,\n        sld: filters?.sld,\n      };\n\n      const response = await graphqlClient.request(GET_LISTINGS, variables);\n      const result = response as { listings: { items: DomaListing[] } };\n      setData(result.listings?.items || []);\n    } catch (err) {\n      console.error('Error fetching marketplace listings:', err);\n      setError(err instanceof Error ? err.message : 'Failed to fetch marketplace listings');\n    } finally {\n      setLoading(false);\n    }\n  }, [limit, skip, filters]);\n\n  useEffect(() => {\n    fetchListings();\n  }, [fetchListings]);\n\n  return { data, loading, error, refetch: fetchListings };\n}\n\n// Hook to fetch offers\nexport function useOffers(limit: number = 50, skip: number = 0, filters?: any) {\n  const [data, setData] = useState<DomaOffer[]>([]);\n  const [loading, setLoading] = useState(true);\n  const [error, setError] = useState<string | null>(null);\n\n  const fetchOffers = useCallback(async () => {\n    try {\n      setLoading(true);\n      setError(null);\n\n      const variables = {\n        take: limit,\n        skip: skip,\n        tokenId: filters?.tokenId,\n        status: filters?.status || 'ACTIVE',\n        sortOrder: filters?.sortOrder || 'DESC',\n      };\n\n      const response = await graphqlClient.request(GET_OFFERS, variables);\n      const result = response as { offers: { items: DomaOffer[] } };\n      setData(result.offers?.items || []);\n    } catch (err) {\n      console.error('Error fetching offers:', err);\n      setError(err instanceof Error ? err.message : 'Failed to fetch offers');\n    } finally {\n      setLoading(false);\n    }\n  }, [limit, skip, filters]);\n\n  useEffect(() => {\n    fetchOffers();\n  }, [fetchOffers]);\n\n  return { data, loading, error, refetch: fetchOffers };\n}\n\n// Hook to fetch token activities\nexport function useTokenActivities(tokenId: string, limit: number = 50, skip: number = 0) {\n  const [data, setData] = useState<DomaTokenActivity[]>([]);\n  const [loading, setLoading] = useState(true);\n  const [error, setError] = useState<string | null>(null);\n\n  const fetchActivities = useCallback(async () => {\n    if (!tokenId) return;\n\n    try {\n      setLoading(true);\n      setError(null);\n\n      const variables = {\n        tokenId,\n        take: limit,\n        skip: skip,\n        sortOrder: 'DESC',\n      };\n\n      const response = await graphqlClient.request(GET_TOKEN_ACTIVITIES, variables);\n      const result = response as { tokenActivities: { items: DomaTokenActivity[] } };\n      setData(result.tokenActivities?.items || []);\n    } catch (err) {\n      console.error('Error fetching token activities:', err);\n      setError(err instanceof Error ? err.message : 'Failed to fetch token activities');\n    } finally {\n      setLoading(false);\n    }\n  }, [tokenId, limit, skip]);\n\n  useEffect(() => {\n    fetchActivities();\n  }, [fetchActivities]);\n\n  return { data, loading, error, refetch: fetchActivities };\n}\n\n// Hook to fetch name activities\nexport function useNameActivities(name: string, limit: number = 50, skip: number = 0) {\n  const [data, setData] = useState<DomaNameActivity[]>([]);\n  const [loading, setLoading] = useState(true);\n  const [error, setError] = useState<string | null>(null);\n\n  const fetchActivities = useCallback(async () => {\n    if (!name) return;\n\n    try {\n      setLoading(true);\n      setError(null);\n\n      const variables = {\n        name,\n        take: limit,\n        skip: skip,\n        sortOrder: 'DESC',\n      };\n\n      const response = await graphqlClient.request(GET_NAME_ACTIVITIES, variables);\n      const result = response as { nameActivities: { items: DomaNameActivity[] } };\n      setData(result.nameActivities?.items || []);\n    } catch (err) {\n      console.error('Error fetching name activities:', err);\n      setError(err instanceof Error ? err.message : 'Failed to fetch name activities');\n    } finally {\n      setLoading(false);\n    }\n  }, [name, limit, skip]);\n\n  useEffect(() => {\n    fetchActivities();\n  }, [fetchActivities]);\n\n  return { data, loading, error, refetch: fetchActivities };\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}