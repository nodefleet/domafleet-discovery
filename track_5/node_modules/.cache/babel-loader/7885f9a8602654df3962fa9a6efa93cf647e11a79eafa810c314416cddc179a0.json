{"ast":null,"code":"var _s = $RefreshSig$(),\n  _s2 = $RefreshSig$(),\n  _s3 = $RefreshSig$(),\n  _s4 = $RefreshSig$(),\n  _s5 = $RefreshSig$(),\n  _s6 = $RefreshSig$(),\n  _s7 = $RefreshSig$(),\n  _s8 = $RefreshSig$(),\n  _s9 = $RefreshSig$();\nimport { useState, useEffect, useCallback } from 'react';\nimport { graphqlClient, DomaAPIClient } from '../lib/doma-client';\nimport { GET_DOMAINS, GET_DOMAIN, GET_LISTINGS, GET_OFFERS, GET_DOMAIN_STATISTICS, GET_TOKEN_ACTIVITIES, GET_NAME_ACTIVITIES } from '../lib/graphql-queries';\n\n// Types for the hook responses\n\n// Custom hook for fetching domains\nexport const useDomains = options => {\n  _s();\n  const [data, setData] = useState(null);\n  const [loading, setLoading] = useState(false);\n  const [error, setError] = useState(null);\n  const fetchDomains = useCallback(async () => {\n    try {\n      setLoading(true);\n      setError(null);\n      const response = await graphqlClient.request(GET_DOMAINS, {\n        skip: (options === null || options === void 0 ? void 0 : options.skip) || 0,\n        take: (options === null || options === void 0 ? void 0 : options.take) || 20,\n        claimStatus: (options === null || options === void 0 ? void 0 : options.claimStatus) || 'ALL',\n        tlds: options === null || options === void 0 ? void 0 : options.tlds,\n        sortOrder: (options === null || options === void 0 ? void 0 : options.sortOrder) || 'DESC'\n      });\n      setData(response.names);\n    } catch (err) {\n      console.error('Error fetching domains:', err);\n      setError(err instanceof Error ? err.message : 'Failed to fetch domains');\n    } finally {\n      setLoading(false);\n    }\n  }, [options]);\n  useEffect(() => {\n    fetchDomains();\n  }, [fetchDomains]);\n  return {\n    data,\n    loading,\n    error,\n    refetch: fetchDomains\n  };\n};\n\n// Custom hook for fetching a specific domain\n_s(useDomains, \"cpbUpC5tlP+ADIer4g1enRjV6Ok=\");\nexport const useDomain = domainName => {\n  _s2();\n  const [data, setData] = useState(null);\n  const [loading, setLoading] = useState(false);\n  const [error, setError] = useState(null);\n  const fetchDomain = useCallback(async () => {\n    if (!domainName) return;\n    try {\n      setLoading(true);\n      setError(null);\n      const response = await graphqlClient.request(GET_DOMAIN, {\n        name: domainName\n      });\n      setData(response.name);\n    } catch (err) {\n      console.error('Error fetching domain:', err);\n      setError(err instanceof Error ? err.message : 'Failed to fetch domain');\n    } finally {\n      setLoading(false);\n    }\n  }, [domainName]);\n  useEffect(() => {\n    fetchDomain();\n  }, [fetchDomain]);\n  return {\n    data,\n    loading,\n    error,\n    refetch: fetchDomain\n  };\n};\n\n// Custom hook for fetching domain statistics\n_s2(useDomain, \"HIjhBU8bUKmZcM2ltbBCB0384UQ=\");\nexport const useDomainStatistics = tokenId => {\n  _s3();\n  const [data, setData] = useState(null);\n  const [loading, setLoading] = useState(false);\n  const [error, setError] = useState(null);\n  const fetchStatistics = useCallback(async () => {\n    if (!tokenId) return;\n    try {\n      setLoading(true);\n      setError(null);\n      const response = await graphqlClient.request(GET_DOMAIN_STATISTICS, {\n        tokenId\n      });\n      setData(response.nameStatistics);\n    } catch (err) {\n      console.error('Error fetching domain statistics:', err);\n      setError(err instanceof Error ? err.message : 'Failed to fetch statistics');\n    } finally {\n      setLoading(false);\n    }\n  }, [tokenId]);\n  useEffect(() => {\n    fetchStatistics();\n  }, [fetchStatistics]);\n  return {\n    data,\n    loading,\n    error,\n    refetch: fetchStatistics\n  };\n};\n\n// Custom hook for fetching marketplace listings\n_s3(useDomainStatistics, \"VSkbO7W1zlhMl9qo+znHEmoOh9s=\");\nexport const useMarketplaceListings = options => {\n  _s4();\n  const [data, setData] = useState(null);\n  const [loading, setLoading] = useState(false);\n  const [error, setError] = useState(null);\n  const fetchListings = useCallback(async () => {\n    try {\n      setLoading(true);\n      setError(null);\n      const response = await graphqlClient.request(GET_LISTINGS, {\n        skip: (options === null || options === void 0 ? void 0 : options.skip) || 0,\n        take: (options === null || options === void 0 ? void 0 : options.take) || 20,\n        tlds: options === null || options === void 0 ? void 0 : options.tlds,\n        createdSince: options === null || options === void 0 ? void 0 : options.createdSince,\n        networkIds: options === null || options === void 0 ? void 0 : options.networkIds\n      });\n      setData(response.listings);\n    } catch (err) {\n      console.error('Error fetching listings:', err);\n      setError(err instanceof Error ? err.message : 'Failed to fetch listings');\n    } finally {\n      setLoading(false);\n    }\n  }, [options]);\n  useEffect(() => {\n    fetchListings();\n  }, [fetchListings]);\n  return {\n    data,\n    loading,\n    error,\n    refetch: fetchListings\n  };\n};\n\n// Custom hook for fetching offers\n_s4(useMarketplaceListings, \"UMsFwuCNzw4n00YyXnmOlbD/kWc=\");\nexport const useOffers = (tokenId, options) => {\n  _s5();\n  const [data, setData] = useState(null);\n  const [loading, setLoading] = useState(false);\n  const [error, setError] = useState(null);\n  const fetchOffers = useCallback(async () => {\n    try {\n      setLoading(true);\n      setError(null);\n      const response = await graphqlClient.request(GET_OFFERS, {\n        tokenId,\n        skip: (options === null || options === void 0 ? void 0 : options.skip) || 0,\n        take: (options === null || options === void 0 ? void 0 : options.take) || 20,\n        status: (options === null || options === void 0 ? void 0 : options.status) || 'All',\n        sortOrder: (options === null || options === void 0 ? void 0 : options.sortOrder) || 'DESC'\n      });\n      setData(response.offers);\n    } catch (err) {\n      console.error('Error fetching offers:', err);\n      setError(err instanceof Error ? err.message : 'Failed to fetch offers');\n    } finally {\n      setLoading(false);\n    }\n  }, [tokenId, options]);\n  useEffect(() => {\n    fetchOffers();\n  }, [fetchOffers]);\n  return {\n    data,\n    loading,\n    error,\n    refetch: fetchOffers\n  };\n};\n\n// Custom hook for token activities\n_s5(useOffers, \"bqiaPrl30CN4BkKvsQZ9xEhdddA=\");\nexport const useTokenActivities = (tokenId, options) => {\n  _s6();\n  const [data, setData] = useState(null);\n  const [loading, setLoading] = useState(false);\n  const [error, setError] = useState(null);\n  const fetchActivities = useCallback(async () => {\n    if (!tokenId) return;\n    try {\n      setLoading(true);\n      setError(null);\n      const response = await graphqlClient.request(GET_TOKEN_ACTIVITIES, {\n        tokenId,\n        skip: (options === null || options === void 0 ? void 0 : options.skip) || 0,\n        take: (options === null || options === void 0 ? void 0 : options.take) || 20,\n        type: options === null || options === void 0 ? void 0 : options.type,\n        sortOrder: (options === null || options === void 0 ? void 0 : options.sortOrder) || 'DESC'\n      });\n      setData(response.tokenActivities);\n    } catch (err) {\n      console.error('Error fetching token activities:', err);\n      setError(err instanceof Error ? err.message : 'Failed to fetch activities');\n    } finally {\n      setLoading(false);\n    }\n  }, [tokenId, options]);\n  useEffect(() => {\n    fetchActivities();\n  }, [fetchActivities]);\n  return {\n    data,\n    loading,\n    error,\n    refetch: fetchActivities\n  };\n};\n\n// Custom hook for name activities\n_s6(useTokenActivities, \"TwHopfe+x3ilD+C/eOgV7sJFi0U=\");\nexport const useNameActivities = (domainName, options) => {\n  _s7();\n  const [data, setData] = useState(null);\n  const [loading, setLoading] = useState(false);\n  const [error, setError] = useState(null);\n  const fetchActivities = useCallback(async () => {\n    if (!domainName) return;\n    try {\n      setLoading(true);\n      setError(null);\n      const response = await graphqlClient.request(GET_NAME_ACTIVITIES, {\n        name: domainName,\n        skip: (options === null || options === void 0 ? void 0 : options.skip) || 0,\n        take: (options === null || options === void 0 ? void 0 : options.take) || 20,\n        type: options === null || options === void 0 ? void 0 : options.type,\n        sortOrder: (options === null || options === void 0 ? void 0 : options.sortOrder) || 'DESC'\n      });\n      setData(response.nameActivities);\n    } catch (err) {\n      console.error('Error fetching name activities:', err);\n      setError(err instanceof Error ? err.message : 'Failed to fetch activities');\n    } finally {\n      setLoading(false);\n    }\n  }, [domainName, options]);\n  useEffect(() => {\n    fetchActivities();\n  }, [fetchActivities]);\n  return {\n    data,\n    loading,\n    error,\n    refetch: fetchActivities\n  };\n};\n\n// Custom hook for orderbook operations\n_s7(useNameActivities, \"TwHopfe+x3ilD+C/eOgV7sJFi0U=\");\nexport const useOrderbook = apiKey => {\n  _s8();\n  const [apiClient] = useState(() => new DomaAPIClient(apiKey));\n  const [loading, setLoading] = useState(false);\n  const [error, setError] = useState(null);\n  const createListing = useCallback(async params => {\n    try {\n      setLoading(true);\n      setError(null);\n      return await apiClient.createListing(params);\n    } catch (err) {\n      const errorMessage = err instanceof Error ? err.message : 'Failed to create listing';\n      setError(errorMessage);\n      throw new Error(errorMessage);\n    } finally {\n      setLoading(false);\n    }\n  }, [apiClient]);\n  const createOffer = useCallback(async params => {\n    try {\n      setLoading(true);\n      setError(null);\n      return await apiClient.createOffer(params);\n    } catch (err) {\n      const errorMessage = err instanceof Error ? err.message : 'Failed to create offer';\n      setError(errorMessage);\n      throw new Error(errorMessage);\n    } finally {\n      setLoading(false);\n    }\n  }, [apiClient]);\n  const getOrderbookFees = useCallback(async (orderbook, chainId, contractAddress) => {\n    try {\n      setLoading(true);\n      setError(null);\n      return await apiClient.getOrderbookFees(orderbook, chainId, contractAddress);\n    } catch (err) {\n      const errorMessage = err instanceof Error ? err.message : 'Failed to fetch fees';\n      setError(errorMessage);\n      throw new Error(errorMessage);\n    } finally {\n      setLoading(false);\n    }\n  }, [apiClient]);\n  const getSupportedCurrencies = useCallback(async (chainId, contractAddress, orderbook) => {\n    try {\n      setLoading(true);\n      setError(null);\n      return await apiClient.getSupportedCurrencies(chainId, contractAddress, orderbook);\n    } catch (err) {\n      const errorMessage = err instanceof Error ? err.message : 'Failed to fetch currencies';\n      setError(errorMessage);\n      throw new Error(errorMessage);\n    } finally {\n      setLoading(false);\n    }\n  }, [apiClient]);\n  return {\n    createListing,\n    createOffer,\n    getOrderbookFees,\n    getSupportedCurrencies,\n    loading,\n    error\n  };\n};\n\n// Custom hook for real-time events\n_s8(useOrderbook, \"wkWy2M9FoFnpT2ZTkxIglIC/nP0=\");\nexport const useRealtimeEvents = (apiKey, eventTypes) => {\n  _s9();\n  const [apiClient] = useState(() => new DomaAPIClient(apiKey));\n  const [events, setEvents] = useState([]);\n  const [loading, setLoading] = useState(false);\n  const [error, setError] = useState(null);\n  const pollEvents = useCallback(async () => {\n    try {\n      setLoading(true);\n      setError(null);\n      const response = await apiClient.pollEvents({\n        eventTypes,\n        limit: 10,\n        finalizedOnly: true\n      });\n      if (response.events.length > 0) {\n        setEvents(prev => [...response.events, ...prev]);\n\n        // Acknowledge the events\n        await apiClient.acknowledgeEvents(response.lastId);\n      }\n      return response;\n    } catch (err) {\n      console.error('Error polling events:', err);\n      setError(err instanceof Error ? err.message : 'Failed to poll events');\n    } finally {\n      setLoading(false);\n    }\n  }, [apiClient, eventTypes]);\n\n  // Auto-poll every 30 seconds\n  useEffect(() => {\n    if (!apiKey) return; // Only poll if we have an API key\n\n    pollEvents();\n    const interval = setInterval(pollEvents, 30000);\n    return () => clearInterval(interval);\n  }, [pollEvents, apiKey]);\n  return {\n    events,\n    loading,\n    error,\n    pollEvents\n  };\n};\n_s9(useRealtimeEvents, \"mdKftnO/11JJLhccdUHkm4zVwpk=\");","map":{"version":3,"names":["useState","useEffect","useCallback","graphqlClient","DomaAPIClient","GET_DOMAINS","GET_DOMAIN","GET_LISTINGS","GET_OFFERS","GET_DOMAIN_STATISTICS","GET_TOKEN_ACTIVITIES","GET_NAME_ACTIVITIES","useDomains","options","_s","data","setData","loading","setLoading","error","setError","fetchDomains","response","request","skip","take","claimStatus","tlds","sortOrder","names","err","console","Error","message","refetch","useDomain","domainName","_s2","fetchDomain","name","useDomainStatistics","tokenId","_s3","fetchStatistics","nameStatistics","useMarketplaceListings","_s4","fetchListings","createdSince","networkIds","listings","useOffers","_s5","fetchOffers","status","offers","useTokenActivities","_s6","fetchActivities","type","tokenActivities","useNameActivities","_s7","nameActivities","useOrderbook","apiKey","_s8","apiClient","createListing","params","errorMessage","createOffer","getOrderbookFees","orderbook","chainId","contractAddress","getSupportedCurrencies","useRealtimeEvents","eventTypes","_s9","events","setEvents","pollEvents","limit","finalizedOnly","length","prev","acknowledgeEvents","lastId","interval","setInterval","clearInterval"],"sources":["/Users/kaelabbott/Downloads/autozama/doma/src/hooks/useDomainData.ts"],"sourcesContent":["import { useState, useEffect, useCallback } from 'react';\nimport { graphqlClient, DomaAPIClient } from '../lib/doma-client';\nimport { \n  GET_DOMAINS, \n  GET_DOMAIN, \n  GET_LISTINGS, \n  GET_OFFERS, \n  GET_DOMAIN_STATISTICS,\n  GET_TOKEN_ACTIVITIES,\n  GET_NAME_ACTIVITIES\n} from '../lib/graphql-queries';\n\n// Types for the hook responses\nexport interface DomainToken {\n  tokenId: string;\n  networkId: string;\n  ownerAddress: string;\n  type: string;\n  expiresAt: string;\n  explorerUrl: string;\n  tokenAddress: string;\n  createdAt: string;\n  chain: {\n    name: string;\n    networkId: string;\n  };\n  listings: Array<{\n    id: string;\n    price: string;\n    currency: {\n      symbol: string;\n      decimals: number;\n    };\n    expiresAt: string;\n    orderbook: string;\n  }>;\n}\n\nexport interface Domain {\n  name: string;\n  expiresAt: string;\n  tokenizedAt: string;\n  eoi: boolean;\n  claimedBy?: string;\n  transferLock?: boolean;\n  registrar: {\n    name: string;\n    ianaId: string;\n    websiteUrl?: string;\n  };\n  tokens: DomainToken[];\n}\n\nexport interface DomainListResponse {\n  items: Domain[];\n  totalCount: number;\n  currentPage: number;\n  totalPages: number;\n  hasNextPage: boolean;\n  hasPreviousPage: boolean;\n}\n\nexport interface DomainStatistics {\n  name: string;\n  activeOffers: number;\n  offersLast3Days: number;\n  highestOffer?: {\n    id: string;\n    price: string;\n    currency: {\n      symbol: string;\n      decimals: number;\n    };\n    offererAddress: string;\n    expiresAt: string;\n  };\n}\n\n// Custom hook for fetching domains\nexport const useDomains = (options?: {\n  skip?: number;\n  take?: number;\n  claimStatus?: 'CLAIMED' | 'UNCLAIMED' | 'ALL';\n  tlds?: string[];\n  sortOrder?: 'ASC' | 'DESC';\n}) => {\n  const [data, setData] = useState<DomainListResponse | null>(null);\n  const [loading, setLoading] = useState(false);\n  const [error, setError] = useState<string | null>(null);\n\n  const fetchDomains = useCallback(async () => {\n    try {\n      setLoading(true);\n      setError(null);\n      \n      const response = await graphqlClient.request(GET_DOMAINS, {\n        skip: options?.skip || 0,\n        take: options?.take || 20,\n        claimStatus: options?.claimStatus || 'ALL',\n        tlds: options?.tlds,\n        sortOrder: options?.sortOrder || 'DESC'\n      }) as { names: DomainListResponse };\n      \n      setData(response.names);\n    } catch (err) {\n      console.error('Error fetching domains:', err);\n      setError(err instanceof Error ? err.message : 'Failed to fetch domains');\n    } finally {\n      setLoading(false);\n    }\n  }, [options]);\n\n  useEffect(() => {\n    fetchDomains();\n  }, [fetchDomains]);\n\n  return { data, loading, error, refetch: fetchDomains };\n};\n\n// Custom hook for fetching a specific domain\nexport const useDomain = (domainName: string) => {\n  const [data, setData] = useState<Domain | null>(null);\n  const [loading, setLoading] = useState(false);\n  const [error, setError] = useState<string | null>(null);\n\n  const fetchDomain = useCallback(async () => {\n    if (!domainName) return;\n    \n    try {\n      setLoading(true);\n      setError(null);\n      \n      const response = await graphqlClient.request(GET_DOMAIN, {\n        name: domainName\n      }) as { name: Domain };\n      \n      setData(response.name);\n    } catch (err) {\n      console.error('Error fetching domain:', err);\n      setError(err instanceof Error ? err.message : 'Failed to fetch domain');\n    } finally {\n      setLoading(false);\n    }\n  }, [domainName]);\n\n  useEffect(() => {\n    fetchDomain();\n  }, [fetchDomain]);\n\n  return { data, loading, error, refetch: fetchDomain };\n};\n\n// Custom hook for fetching domain statistics\nexport const useDomainStatistics = (tokenId: string) => {\n  const [data, setData] = useState<DomainStatistics | null>(null);\n  const [loading, setLoading] = useState(false);\n  const [error, setError] = useState<string | null>(null);\n\n  const fetchStatistics = useCallback(async () => {\n    if (!tokenId) return;\n    \n    try {\n      setLoading(true);\n      setError(null);\n      \n      const response = await graphqlClient.request(GET_DOMAIN_STATISTICS, {\n        tokenId\n      }) as { nameStatistics: DomainStatistics };\n      \n      setData(response.nameStatistics);\n    } catch (err) {\n      console.error('Error fetching domain statistics:', err);\n      setError(err instanceof Error ? err.message : 'Failed to fetch statistics');\n    } finally {\n      setLoading(false);\n    }\n  }, [tokenId]);\n\n  useEffect(() => {\n    fetchStatistics();\n  }, [fetchStatistics]);\n\n  return { data, loading, error, refetch: fetchStatistics };\n};\n\n// Custom hook for fetching marketplace listings\nexport const useMarketplaceListings = (options?: {\n  skip?: number;\n  take?: number;\n  tlds?: string[];\n  createdSince?: string;\n  networkIds?: string[];\n}) => {\n  const [data, setData] = useState<any>(null);\n  const [loading, setLoading] = useState(false);\n  const [error, setError] = useState<string | null>(null);\n\n  const fetchListings = useCallback(async () => {\n    try {\n      setLoading(true);\n      setError(null);\n      \n      const response = await graphqlClient.request(GET_LISTINGS, {\n        skip: options?.skip || 0,\n        take: options?.take || 20,\n        tlds: options?.tlds,\n        createdSince: options?.createdSince,\n        networkIds: options?.networkIds\n      }) as { listings: any };\n      \n      setData(response.listings);\n    } catch (err) {\n      console.error('Error fetching listings:', err);\n      setError(err instanceof Error ? err.message : 'Failed to fetch listings');\n    } finally {\n      setLoading(false);\n    }\n  }, [options]);\n\n  useEffect(() => {\n    fetchListings();\n  }, [fetchListings]);\n\n  return { data, loading, error, refetch: fetchListings };\n};\n\n// Custom hook for fetching offers\nexport const useOffers = (tokenId?: string, options?: {\n  skip?: number;\n  take?: number;\n  status?: 'ACTIVE' | 'EXPIRED' | 'All';\n  sortOrder?: 'ASC' | 'DESC';\n}) => {\n  const [data, setData] = useState<any>(null);\n  const [loading, setLoading] = useState(false);\n  const [error, setError] = useState<string | null>(null);\n\n  const fetchOffers = useCallback(async () => {\n    try {\n      setLoading(true);\n      setError(null);\n      \n      const response = await graphqlClient.request(GET_OFFERS, {\n        tokenId,\n        skip: options?.skip || 0,\n        take: options?.take || 20,\n        status: options?.status || 'All',\n        sortOrder: options?.sortOrder || 'DESC'\n      }) as { offers: any };\n      \n      setData(response.offers);\n    } catch (err) {\n      console.error('Error fetching offers:', err);\n      setError(err instanceof Error ? err.message : 'Failed to fetch offers');\n    } finally {\n      setLoading(false);\n    }\n  }, [tokenId, options]);\n\n  useEffect(() => {\n    fetchOffers();\n  }, [fetchOffers]);\n\n  return { data, loading, error, refetch: fetchOffers };\n};\n\n// Custom hook for token activities\nexport const useTokenActivities = (tokenId: string, options?: {\n  skip?: number;\n  take?: number;\n  type?: string;\n  sortOrder?: 'ASC' | 'DESC';\n}) => {\n  const [data, setData] = useState<any>(null);\n  const [loading, setLoading] = useState(false);\n  const [error, setError] = useState<string | null>(null);\n\n  const fetchActivities = useCallback(async () => {\n    if (!tokenId) return;\n    \n    try {\n      setLoading(true);\n      setError(null);\n      \n      const response = await graphqlClient.request(GET_TOKEN_ACTIVITIES, {\n        tokenId,\n        skip: options?.skip || 0,\n        take: options?.take || 20,\n        type: options?.type,\n        sortOrder: options?.sortOrder || 'DESC'\n      }) as { tokenActivities: any };\n      \n      setData(response.tokenActivities);\n    } catch (err) {\n      console.error('Error fetching token activities:', err);\n      setError(err instanceof Error ? err.message : 'Failed to fetch activities');\n    } finally {\n      setLoading(false);\n    }\n  }, [tokenId, options]);\n\n  useEffect(() => {\n    fetchActivities();\n  }, [fetchActivities]);\n\n  return { data, loading, error, refetch: fetchActivities };\n};\n\n// Custom hook for name activities\nexport const useNameActivities = (domainName: string, options?: {\n  skip?: number;\n  take?: number;\n  type?: string;\n  sortOrder?: 'ASC' | 'DESC';\n}) => {\n  const [data, setData] = useState<any>(null);\n  const [loading, setLoading] = useState(false);\n  const [error, setError] = useState<string | null>(null);\n\n  const fetchActivities = useCallback(async () => {\n    if (!domainName) return;\n    \n    try {\n      setLoading(true);\n      setError(null);\n      \n      const response = await graphqlClient.request(GET_NAME_ACTIVITIES, {\n        name: domainName,\n        skip: options?.skip || 0,\n        take: options?.take || 20,\n        type: options?.type,\n        sortOrder: options?.sortOrder || 'DESC'\n      }) as { nameActivities: any };\n      \n      setData(response.nameActivities);\n    } catch (err) {\n      console.error('Error fetching name activities:', err);\n      setError(err instanceof Error ? err.message : 'Failed to fetch activities');\n    } finally {\n      setLoading(false);\n    }\n  }, [domainName, options]);\n\n  useEffect(() => {\n    fetchActivities();\n  }, [fetchActivities]);\n\n  return { data, loading, error, refetch: fetchActivities };\n};\n\n// Custom hook for orderbook operations\nexport const useOrderbook = (apiKey?: string) => {\n  const [apiClient] = useState(() => new DomaAPIClient(apiKey));\n  const [loading, setLoading] = useState(false);\n  const [error, setError] = useState<string | null>(null);\n\n  const createListing = useCallback(async (params: {\n    orderbook: string;\n    chainId: string;\n    parameters: any;\n    signature: string;\n  }) => {\n    try {\n      setLoading(true);\n      setError(null);\n      return await apiClient.createListing(params);\n    } catch (err) {\n      const errorMessage = err instanceof Error ? err.message : 'Failed to create listing';\n      setError(errorMessage);\n      throw new Error(errorMessage);\n    } finally {\n      setLoading(false);\n    }\n  }, [apiClient]);\n\n  const createOffer = useCallback(async (params: {\n    orderbook: string;\n    chainId: string;\n    parameters: any;\n    signature: string;\n  }) => {\n    try {\n      setLoading(true);\n      setError(null);\n      return await apiClient.createOffer(params);\n    } catch (err) {\n      const errorMessage = err instanceof Error ? err.message : 'Failed to create offer';\n      setError(errorMessage);\n      throw new Error(errorMessage);\n    } finally {\n      setLoading(false);\n    }\n  }, [apiClient]);\n\n  const getOrderbookFees = useCallback(async (\n    orderbook: string, \n    chainId: string, \n    contractAddress: string\n  ) => {\n    try {\n      setLoading(true);\n      setError(null);\n      return await apiClient.getOrderbookFees(orderbook, chainId, contractAddress);\n    } catch (err) {\n      const errorMessage = err instanceof Error ? err.message : 'Failed to fetch fees';\n      setError(errorMessage);\n      throw new Error(errorMessage);\n    } finally {\n      setLoading(false);\n    }\n  }, [apiClient]);\n\n  const getSupportedCurrencies = useCallback(async (\n    chainId: string, \n    contractAddress: string, \n    orderbook: string\n  ) => {\n    try {\n      setLoading(true);\n      setError(null);\n      return await apiClient.getSupportedCurrencies(chainId, contractAddress, orderbook);\n    } catch (err) {\n      const errorMessage = err instanceof Error ? err.message : 'Failed to fetch currencies';\n      setError(errorMessage);\n      throw new Error(errorMessage);\n    } finally {\n      setLoading(false);\n    }\n  }, [apiClient]);\n\n  return {\n    createListing,\n    createOffer,\n    getOrderbookFees,\n    getSupportedCurrencies,\n    loading,\n    error\n  };\n};\n\n// Custom hook for real-time events\nexport const useRealtimeEvents = (apiKey?: string, eventTypes?: string[]) => {\n  const [apiClient] = useState(() => new DomaAPIClient(apiKey));\n  const [events, setEvents] = useState<any[]>([]);\n  const [loading, setLoading] = useState(false);\n  const [error, setError] = useState<string | null>(null);\n\n  const pollEvents = useCallback(async () => {\n    try {\n      setLoading(true);\n      setError(null);\n      \n      const response = await apiClient.pollEvents({\n        eventTypes,\n        limit: 10,\n        finalizedOnly: true\n      });\n      \n      if (response.events.length > 0) {\n        setEvents(prev => [...response.events, ...prev]);\n        \n        // Acknowledge the events\n        await apiClient.acknowledgeEvents(response.lastId);\n      }\n      \n      return response;\n    } catch (err) {\n      console.error('Error polling events:', err);\n      setError(err instanceof Error ? err.message : 'Failed to poll events');\n    } finally {\n      setLoading(false);\n    }\n  }, [apiClient, eventTypes]);\n\n  // Auto-poll every 30 seconds\n  useEffect(() => {\n    if (!apiKey) return; // Only poll if we have an API key\n    \n    pollEvents();\n    const interval = setInterval(pollEvents, 30000);\n    \n    return () => clearInterval(interval);\n  }, [pollEvents, apiKey]);\n\n  return { events, loading, error, pollEvents };\n};\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}