{"ast":null,"code":"var _s = $RefreshSig$(),\n  _s2 = $RefreshSig$();\nimport { useState, useEffect } from 'react';\nimport domaApi, { transformDomainData } from '../lib/doma-api';\nexport function useDomains(limit = 20, offset = 0) {\n  _s();\n  const [domains, setDomains] = useState([]);\n  const [loading, setLoading] = useState(true);\n  const [error, setError] = useState(null);\n  useEffect(() => {\n    async function fetchDomains() {\n      try {\n        var _response$data, _response$data$names;\n        setLoading(true);\n        setError(null);\n        const response = await domaApi.getDomains(limit, offset);\n        if (response.errors && response.errors.length > 0) {\n          // If API fails, use mock data (e.g., no API key or network issues)\n          console.warn('Doma API request failed, using mock data:', response.errors[0].message);\n          setDomains(getMockDomains());\n        } else if ((_response$data = response.data) !== null && _response$data !== void 0 && (_response$data$names = _response$data.names) !== null && _response$data$names !== void 0 && _response$data$names.items) {\n          // Transform API data to our format\n          const transformedDomains = response.data.names.items.map(transformDomainData);\n          setDomains(transformedDomains);\n        } else {\n          // Fallback to mock data\n          setDomains(getMockDomains());\n        }\n      } catch (err) {\n        console.error('Error fetching domains:', err);\n        setError(err instanceof Error ? err.message : 'Unknown error');\n        setDomains(getMockDomains()); // Fallback to mock data\n      } finally {\n        setLoading(false);\n      }\n    }\n    fetchDomains();\n  }, [limit, offset]);\n  return {\n    domains,\n    loading,\n    error\n  };\n}\n_s(useDomains, \"ZNuJMf8nZm2h19e8dI78tGgTINA=\");\nexport function useMarketStats() {\n  _s2();\n  const [stats, setStats] = useState(null);\n  const [loading, setLoading] = useState(true);\n  const [error, setError] = useState(null);\n  useEffect(() => {\n    async function fetchStats() {\n      try {\n        var _response$data2;\n        setLoading(true);\n        setError(null);\n        const response = await domaApi.getMarketStatistics();\n        if (response.errors && response.errors.length > 0) {\n          console.warn('Market stats API failed, using mock data:', response.errors[0].message);\n          setStats(getMockStats());\n        } else if ((_response$data2 = response.data) !== null && _response$data2 !== void 0 && _response$data2.statistics) {\n          setStats(response.data.statistics);\n        } else {\n          setStats(getMockStats());\n        }\n      } catch (err) {\n        console.error('Error fetching market stats:', err);\n        setError(err instanceof Error ? err.message : 'Unknown error');\n        setStats(getMockStats());\n      } finally {\n        setLoading(false);\n      }\n    }\n    fetchStats();\n  }, []);\n  return {\n    stats,\n    loading,\n    error\n  };\n}\n\n// Mock data for development and fallback\n_s2(useMarketStats, \"wn5GnbEWSpy3babVhLIjrKhKWKg=\");\nfunction getMockDomains() {\n  return [{\n    id: '1',\n    name: 'crypto.doma',\n    price: '5.5',\n    currency: 'ETH',\n    description: 'Premium crypto domain perfect for DeFi projects',\n    category: 'Finance',\n    views: 1250,\n    likes: 89,\n    isVerified: true\n  }, {\n    id: '2',\n    name: 'nft.doma',\n    price: '3.2',\n    currency: 'ETH',\n    description: 'Ideal for NFT marketplaces and collections',\n    category: 'NFT',\n    views: 980,\n    likes: 67,\n    isVerified: true\n  }, {\n    id: '3',\n    name: 'gaming.doma',\n    price: '2.8',\n    currency: 'ETH',\n    description: 'Perfect domain for Web3 gaming platforms',\n    category: 'Gaming',\n    views: 756,\n    likes: 45,\n    isVerified: false\n  }, {\n    id: '4',\n    name: 'defi.doma',\n    price: '7.1',\n    currency: 'ETH',\n    description: 'Premium DeFi domain with high brand value',\n    category: 'Finance',\n    views: 1580,\n    likes: 123,\n    isVerified: true\n  }, {\n    id: '5',\n    name: 'web3.doma',\n    price: '4.6',\n    currency: 'ETH',\n    description: 'Essential Web3 domain for blockchain projects',\n    category: 'Technology',\n    views: 1120,\n    likes: 78,\n    isVerified: true\n  }, {\n    id: '6',\n    name: 'art.doma',\n    price: '2.9',\n    currency: 'ETH',\n    description: 'Perfect for digital art and creative platforms',\n    category: 'NFT',\n    views: 894,\n    likes: 56,\n    isVerified: false\n  }];\n}\nfunction getMockStats() {\n  return {\n    totalDomains: 2847,\n    totalVolume: 156.7,\n    averagePrice: 2.34,\n    activeListings: 1234\n  };\n}","map":{"version":3,"names":["useState","useEffect","domaApi","transformDomainData","useDomains","limit","offset","_s","domains","setDomains","loading","setLoading","error","setError","fetchDomains","_response$data","_response$data$names","response","getDomains","errors","length","console","warn","message","getMockDomains","data","names","items","transformedDomains","map","err","Error","useMarketStats","_s2","stats","setStats","fetchStats","_response$data2","getMarketStatistics","getMockStats","statistics","id","name","price","currency","description","category","views","likes","isVerified","totalDomains","totalVolume","averagePrice","activeListings"],"sources":["/Users/kaelabbott/Downloads/autozama/doma/src/hooks/useDomains.ts"],"sourcesContent":["import { useState, useEffect } from 'react';\nimport domaApi, { transformDomainData } from '../lib/doma-api';\n\ninterface Domain {\n  id: string;\n  name: string;\n  price: string;\n  currency: string;\n  description: string;\n  category: string;\n  views: number;\n  likes: number;\n  isVerified: boolean;\n}\n\nexport function useDomains(limit = 20, offset = 0) {\n  const [domains, setDomains] = useState<Domain[]>([]);\n  const [loading, setLoading] = useState(true);\n  const [error, setError] = useState<string | null>(null);\n\n  useEffect(() => {\n    async function fetchDomains() {\n      try {\n        setLoading(true);\n        setError(null);\n\n        const response = await domaApi.getDomains(limit, offset);\n\n        if (response.errors && response.errors.length > 0) {\n          // If API fails, use mock data (e.g., no API key or network issues)\n          console.warn('Doma API request failed, using mock data:', response.errors[0].message);\n          setDomains(getMockDomains());\n        } else if (response.data?.names?.items) {\n          // Transform API data to our format\n          const transformedDomains = response.data.names.items.map(transformDomainData);\n          setDomains(transformedDomains);\n        } else {\n          // Fallback to mock data\n          setDomains(getMockDomains());\n        }\n      } catch (err) {\n        console.error('Error fetching domains:', err);\n        setError(err instanceof Error ? err.message : 'Unknown error');\n        setDomains(getMockDomains()); // Fallback to mock data\n      } finally {\n        setLoading(false);\n      }\n    }\n\n    fetchDomains();\n  }, [limit, offset]);\n\n  return { domains, loading, error };\n}\n\nexport function useMarketStats() {\n  const [stats, setStats] = useState<any>(null);\n  const [loading, setLoading] = useState(true);\n  const [error, setError] = useState<string | null>(null);\n\n  useEffect(() => {\n    async function fetchStats() {\n      try {\n        setLoading(true);\n        setError(null);\n\n        const response = await domaApi.getMarketStatistics();\n\n        if (response.errors && response.errors.length > 0) {\n          console.warn('Market stats API failed, using mock data:', response.errors[0].message);\n          setStats(getMockStats());\n        } else if (response.data?.statistics) {\n          setStats(response.data.statistics);\n        } else {\n          setStats(getMockStats());\n        }\n      } catch (err) {\n        console.error('Error fetching market stats:', err);\n        setError(err instanceof Error ? err.message : 'Unknown error');\n        setStats(getMockStats());\n      } finally {\n        setLoading(false);\n      }\n    }\n\n    fetchStats();\n  }, []);\n\n  return { stats, loading, error };\n}\n\n// Mock data for development and fallback\nfunction getMockDomains(): Domain[] {\n  return [\n    {\n      id: '1',\n      name: 'crypto.doma',\n      price: '5.5',\n      currency: 'ETH',\n      description: 'Premium crypto domain perfect for DeFi projects',\n      category: 'Finance',\n      views: 1250,\n      likes: 89,\n      isVerified: true,\n    },\n    {\n      id: '2',\n      name: 'nft.doma',\n      price: '3.2',\n      currency: 'ETH',\n      description: 'Ideal for NFT marketplaces and collections',\n      category: 'NFT',\n      views: 980,\n      likes: 67,\n      isVerified: true,\n    },\n    {\n      id: '3',\n      name: 'gaming.doma',\n      price: '2.8',\n      currency: 'ETH',\n      description: 'Perfect domain for Web3 gaming platforms',\n      category: 'Gaming',\n      views: 756,\n      likes: 45,\n      isVerified: false,\n    },\n    {\n      id: '4',\n      name: 'defi.doma',\n      price: '7.1',\n      currency: 'ETH',\n      description: 'Premium DeFi domain with high brand value',\n      category: 'Finance',\n      views: 1580,\n      likes: 123,\n      isVerified: true,\n    },\n    {\n      id: '5',\n      name: 'web3.doma',\n      price: '4.6',\n      currency: 'ETH',\n      description: 'Essential Web3 domain for blockchain projects',\n      category: 'Technology',\n      views: 1120,\n      likes: 78,\n      isVerified: true,\n    },\n    {\n      id: '6',\n      name: 'art.doma',\n      price: '2.9',\n      currency: 'ETH',\n      description: 'Perfect for digital art and creative platforms',\n      category: 'NFT',\n      views: 894,\n      likes: 56,\n      isVerified: false,\n    },\n  ];\n}\n\nfunction getMockStats() {\n  return {\n    totalDomains: 2847,\n    totalVolume: 156.7,\n    averagePrice: 2.34,\n    activeListings: 1234,\n  };\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}