{"ast":null,"code":"import axios from 'axios';\n\n// Enhanced Doma Protocol API Client\n// Provides similar functionality to the official SDK but using REST API directly\n\n// Types and Interfaces\n\n// Progress tracking\n\n// Enhanced Doma API Client Class\nexport class EnhancedDomaClient {\n  constructor(config) {\n    this.apiClient = void 0;\n    this.config = void 0;\n    this.config = config;\n    this.apiClient = axios.create({\n      baseURL: config.baseUrl,\n      headers: {\n        'Content-Type': 'application/json',\n        ...(config.apiKey && {\n          'Api-Key': config.apiKey\n        })\n      }\n    });\n  }\n\n  /**\n   * Create a domain listing (simulation for hackathon)\n   */\n  async createListing(params, onProgress) {\n    try {\n      if (onProgress) {\n        onProgress('Validating parameters', 10);\n        await this.delay(500);\n        onProgress('Preparing listing data', 30);\n        await this.delay(500);\n        onProgress('Calculating marketplace fees', 50);\n        await this.delay(500);\n        onProgress('Creating order signature', 70);\n        await this.delay(500);\n        onProgress('Submitting to orderbook', 90);\n        await this.delay(500);\n        onProgress('Listing created successfully', 100);\n      }\n\n      // For hackathon: simulate successful listing creation\n      const mockOrderId = `listing_${Date.now()}_${Math.random().toString(36).substr(2, 9)}`;\n      if (this.config.apiKey) {\n        // TODO: Real API call would go here\n        // const response = await this.apiClient.post('/v1/orderbook/list', listingData);\n        console.log('Real listing creation would happen here with:', params);\n      }\n      return {\n        success: true,\n        orderId: mockOrderId,\n        data: {\n          orderId: mockOrderId,\n          tokenId: params.tokenId,\n          price: params.price,\n          currency: params.currency || 'ETH',\n          status: 'active',\n          createdAt: new Date().toISOString()\n        }\n      };\n    } catch (error) {\n      return this.handleError(error, 'createListing');\n    }\n  }\n\n  /**\n   * Create a domain offer (simulation for hackathon)\n   */\n  async createOffer(params, onProgress) {\n    try {\n      if (onProgress) {\n        onProgress('Validating offer parameters', 15);\n        await this.delay(500);\n        onProgress('Checking currency approval', 35);\n        await this.delay(500);\n        onProgress('Calculating total cost', 55);\n        await this.delay(500);\n        onProgress('Creating offer signature', 75);\n        await this.delay(500);\n        onProgress('Submitting offer', 95);\n        await this.delay(500);\n        onProgress('Offer created successfully', 100);\n      }\n\n      // For hackathon: simulate successful offer creation\n      const mockOrderId = `offer_${Date.now()}_${Math.random().toString(36).substr(2, 9)}`;\n      if (this.config.apiKey) {\n        // TODO: Real API call would go here\n        // const response = await this.apiClient.post('/v1/orderbook/offer', offerData);\n        console.log('Real offer creation would happen here with:', params);\n      }\n      return {\n        success: true,\n        orderId: mockOrderId,\n        data: {\n          orderId: mockOrderId,\n          tokenId: params.tokenId,\n          price: params.price,\n          currency: params.currency || 'ETH',\n          expiresAt: new Date(Date.now() + (params.expirationTime || 86400) * 1000).toISOString(),\n          status: 'active',\n          createdAt: new Date().toISOString()\n        }\n      };\n    } catch (error) {\n      return this.handleError(error, 'createOffer');\n    }\n  }\n\n  /**\n   * Get marketplace fees for a contract\n   */\n  async getOrderbookFees(contractAddress, orderbook = 'DOMA') {\n    try {\n      if (this.config.apiKey) {\n        // Real API call\n        const response = await this.apiClient.get(`/v1/orderbook/fee/${orderbook}/${this.config.chainId}/${contractAddress}`);\n        return {\n          success: true,\n          data: response.data\n        };\n      } else {\n        // Mock response for demo\n        return {\n          success: true,\n          data: {\n            marketplaceFees: [{\n              recipient: '0x2E7cC63800e77BB8c662c45Ef33D1cCc23861532',\n              basisPoints: 50,\n              // 0.5%\n              feeType: 'DOMA'\n            }]\n          }\n        };\n      }\n    } catch (error) {\n      return this.handleError(error, 'getOrderbookFees');\n    }\n  }\n\n  /**\n   * Get supported currencies for trading\n   */\n  async getSupportedCurrencies(contractAddress, orderbook = 'DOMA') {\n    try {\n      if (this.config.apiKey) {\n        // Real API call\n        const response = await this.apiClient.get(`/v1/orderbook/currencies/${this.config.chainId}/${contractAddress}/${orderbook}`);\n        return {\n          success: true,\n          data: response.data\n        };\n      } else {\n        // Mock response for demo\n        return {\n          success: true,\n          data: {\n            currencies: [{\n              contractAddress: '0x0000000000000000000000000000000000000000',\n              symbol: 'ETH',\n              name: 'Ethereum',\n              decimals: 18\n            }, {\n              contractAddress: '0x2f3463756C59387D6Cd55b034100caf7ECfc757b',\n              symbol: 'USDC',\n              name: 'USD Coin',\n              decimals: 6\n            }, {\n              contractAddress: '0x6f898cd313dcEe4D28A87F675BD93C471868B0Ac',\n              symbol: 'WETH',\n              name: 'Wrapped Ethereum',\n              decimals: 18\n            }]\n          }\n        };\n      }\n    } catch (error) {\n      return this.handleError(error, 'getSupportedCurrencies');\n    }\n  }\n\n  /**\n   * Cancel a listing (simulation for hackathon)\n   */\n  async cancelListing(orderId, onProgress) {\n    try {\n      if (onProgress) {\n        onProgress('Preparing cancellation', 25);\n        await this.delay(300);\n        onProgress('Creating cancellation signature', 60);\n        await this.delay(300);\n        onProgress('Submitting cancellation', 90);\n        await this.delay(300);\n        onProgress('Listing cancelled successfully', 100);\n      }\n      if (this.config.apiKey) {\n        // TODO: Real API call would go here\n        console.log('Real listing cancellation would happen here for:', orderId);\n      }\n      return {\n        success: true,\n        data: {\n          orderId,\n          status: 'cancelled',\n          cancelledAt: new Date().toISOString()\n        }\n      };\n    } catch (error) {\n      return this.handleError(error, 'cancelListing');\n    }\n  }\n\n  /**\n   * Cancel an offer (simulation for hackathon)\n   */\n  async cancelOffer(orderId, onProgress) {\n    try {\n      if (onProgress) {\n        onProgress('Preparing cancellation', 25);\n        await this.delay(300);\n        onProgress('Creating cancellation signature', 60);\n        await this.delay(300);\n        onProgress('Submitting cancellation', 90);\n        await this.delay(300);\n        onProgress('Offer cancelled successfully', 100);\n      }\n      if (this.config.apiKey) {\n        // TODO: Real API call would go here\n        console.log('Real offer cancellation would happen here for:', orderId);\n      }\n      return {\n        success: true,\n        data: {\n          orderId,\n          status: 'cancelled',\n          cancelledAt: new Date().toISOString()\n        }\n      };\n    } catch (error) {\n      return this.handleError(error, 'cancelOffer');\n    }\n  }\n\n  /**\n   * Handle API errors with user-friendly messages\n   */\n  handleError(error, operation) {\n    console.error(`Enhanced Doma Client ${operation} error:`, error);\n    if (axios.isAxiosError(error)) {\n      var _error$response, _error$response2, _error$response3, _error$response3$data;\n      if (((_error$response = error.response) === null || _error$response === void 0 ? void 0 : _error$response.status) === 401) {\n        return {\n          success: false,\n          error: 'API key is missing or invalid. Please check your configuration.'\n        };\n      } else if (((_error$response2 = error.response) === null || _error$response2 === void 0 ? void 0 : _error$response2.status) === 429) {\n        return {\n          success: false,\n          error: 'Rate limit exceeded. Please try again later.'\n        };\n      } else if ((_error$response3 = error.response) !== null && _error$response3 !== void 0 && (_error$response3$data = _error$response3.data) !== null && _error$response3$data !== void 0 && _error$response3$data.message) {\n        return {\n          success: false,\n          error: error.response.data.message\n        };\n      }\n    }\n    return {\n      success: false,\n      error: `${operation} failed. Please try again.`\n    };\n  }\n\n  /**\n   * Utility function to add delay for progress simulation\n   */\n  delay(ms) {\n    return new Promise(resolve => setTimeout(resolve, ms));\n  }\n\n  /**\n   * Check if the client is configured with an API key\n   */\n  isConfigured() {\n    return !!this.config.apiKey;\n  }\n}\n\n// Create default client instance\nconst createEnhancedDomaClient = () => {\n  const config = {\n    baseUrl: process.env.REACT_APP_DOMA_API_BASE_URL || 'https://api-testnet.doma.xyz',\n    apiKey: process.env.REACT_APP_DOMA_API_KEY,\n    chainId: process.env.REACT_APP_DOMA_CHAIN_ID || '97476'\n  };\n  return new EnhancedDomaClient(config);\n};\n\n// Export singleton instance\nexport const enhancedDomaClient = createEnhancedDomaClient();\n\n// Export utilities\nexport const formatChainId = chainId => {\n  return `eip155:${chainId}`;\n};\nexport const parseChainId = caipChainId => {\n  return caipChainId.split(':')[1] || '97476';\n};\nexport const getChainName = chainId => {\n  switch (chainId) {\n    case '1':\n      return 'Ethereum Mainnet';\n    case '97476':\n      return 'Doma Testnet';\n    case '137':\n      return 'Polygon';\n    case '42161':\n      return 'Arbitrum';\n    case '10':\n      return 'Optimism';\n    default:\n      return `Chain ${chainId}`;\n  }\n};","map":{"version":3,"names":["axios","EnhancedDomaClient","constructor","config","apiClient","create","baseURL","baseUrl","headers","apiKey","createListing","params","onProgress","delay","mockOrderId","Date","now","Math","random","toString","substr","console","log","success","orderId","data","tokenId","price","currency","status","createdAt","toISOString","error","handleError","createOffer","expiresAt","expirationTime","getOrderbookFees","contractAddress","orderbook","response","get","chainId","marketplaceFees","recipient","basisPoints","feeType","getSupportedCurrencies","currencies","symbol","name","decimals","cancelListing","cancelledAt","cancelOffer","operation","isAxiosError","_error$response","_error$response2","_error$response3","_error$response3$data","message","ms","Promise","resolve","setTimeout","isConfigured","createEnhancedDomaClient","process","env","REACT_APP_DOMA_API_BASE_URL","REACT_APP_DOMA_API_KEY","REACT_APP_DOMA_CHAIN_ID","enhancedDomaClient","formatChainId","parseChainId","caipChainId","split","getChainName"],"sources":["/Users/kaelabbott/Downloads/autozama/doma/src/lib/enhanced-doma-client.ts"],"sourcesContent":["import axios, { AxiosInstance } from 'axios';\n\n// Enhanced Doma Protocol API Client\n// Provides similar functionality to the official SDK but using REST API directly\n\n// Types and Interfaces\nexport interface OrderbookConfig {\n  baseUrl: string;\n  apiKey?: string;\n  chainId: string;\n}\n\nexport interface CreateListingParams {\n  tokenId: string;\n  contractAddress: string;\n  price: string; // in wei\n  currency?: string;\n  duration?: number; // in hours\n  orderbook?: string;\n}\n\nexport interface CreateOfferParams {\n  tokenId: string;\n  contractAddress: string;\n  price: string; // in wei\n  currency?: string;\n  expirationTime?: number; // unix timestamp\n  isPrivate?: boolean;\n  orderbook?: string;\n}\n\nexport interface OrderbookFeeResponse {\n  marketplaceFees: Array<{\n    recipient: string;\n    basisPoints: number;\n    feeType: string;\n  }>;\n}\n\nexport interface SupportedCurrenciesResponse {\n  currencies: Array<{\n    contractAddress: string;\n    symbol: string;\n    name: string;\n    decimals: number;\n  }>;\n}\n\nexport interface ApiResponse<T> {\n  success: boolean;\n  data?: T;\n  error?: string;\n  orderId?: string;\n}\n\n// Progress tracking\nexport type ProgressCallback = (step: string, progress: number) => void;\n\n// Enhanced Doma API Client Class\nexport class EnhancedDomaClient {\n  private apiClient: AxiosInstance;\n  private config: OrderbookConfig;\n\n  constructor(config: OrderbookConfig) {\n    this.config = config;\n    this.apiClient = axios.create({\n      baseURL: config.baseUrl,\n      headers: {\n        'Content-Type': 'application/json',\n        ...(config.apiKey && { 'Api-Key': config.apiKey }),\n      },\n    });\n  }\n\n  /**\n   * Create a domain listing (simulation for hackathon)\n   */\n  async createListing(\n    params: CreateListingParams,\n    onProgress?: ProgressCallback\n  ): Promise<ApiResponse<any>> {\n    try {\n      if (onProgress) {\n        onProgress('Validating parameters', 10);\n        await this.delay(500);\n        onProgress('Preparing listing data', 30);\n        await this.delay(500);\n        onProgress('Calculating marketplace fees', 50);\n        await this.delay(500);\n        onProgress('Creating order signature', 70);\n        await this.delay(500);\n        onProgress('Submitting to orderbook', 90);\n        await this.delay(500);\n        onProgress('Listing created successfully', 100);\n      }\n\n      // For hackathon: simulate successful listing creation\n      const mockOrderId = `listing_${Date.now()}_${Math.random().toString(36).substr(2, 9)}`;\n      \n      if (this.config.apiKey) {\n        // TODO: Real API call would go here\n        // const response = await this.apiClient.post('/v1/orderbook/list', listingData);\n        console.log('Real listing creation would happen here with:', params);\n      }\n\n      return {\n        success: true,\n        orderId: mockOrderId,\n        data: {\n          orderId: mockOrderId,\n          tokenId: params.tokenId,\n          price: params.price,\n          currency: params.currency || 'ETH',\n          status: 'active',\n          createdAt: new Date().toISOString(),\n        },\n      };\n    } catch (error) {\n      return this.handleError(error, 'createListing');\n    }\n  }\n\n  /**\n   * Create a domain offer (simulation for hackathon)\n   */\n  async createOffer(\n    params: CreateOfferParams,\n    onProgress?: ProgressCallback\n  ): Promise<ApiResponse<any>> {\n    try {\n      if (onProgress) {\n        onProgress('Validating offer parameters', 15);\n        await this.delay(500);\n        onProgress('Checking currency approval', 35);\n        await this.delay(500);\n        onProgress('Calculating total cost', 55);\n        await this.delay(500);\n        onProgress('Creating offer signature', 75);\n        await this.delay(500);\n        onProgress('Submitting offer', 95);\n        await this.delay(500);\n        onProgress('Offer created successfully', 100);\n      }\n\n      // For hackathon: simulate successful offer creation\n      const mockOrderId = `offer_${Date.now()}_${Math.random().toString(36).substr(2, 9)}`;\n      \n      if (this.config.apiKey) {\n        // TODO: Real API call would go here\n        // const response = await this.apiClient.post('/v1/orderbook/offer', offerData);\n        console.log('Real offer creation would happen here with:', params);\n      }\n\n      return {\n        success: true,\n        orderId: mockOrderId,\n        data: {\n          orderId: mockOrderId,\n          tokenId: params.tokenId,\n          price: params.price,\n          currency: params.currency || 'ETH',\n          expiresAt: new Date(Date.now() + (params.expirationTime || 86400) * 1000).toISOString(),\n          status: 'active',\n          createdAt: new Date().toISOString(),\n        },\n      };\n    } catch (error) {\n      return this.handleError(error, 'createOffer');\n    }\n  }\n\n  /**\n   * Get marketplace fees for a contract\n   */\n  async getOrderbookFees(\n    contractAddress: string,\n    orderbook: string = 'DOMA'\n  ): Promise<ApiResponse<OrderbookFeeResponse>> {\n    try {\n      if (this.config.apiKey) {\n        // Real API call\n        const response = await this.apiClient.get(\n          `/v1/orderbook/fee/${orderbook}/${this.config.chainId}/${contractAddress}`\n        );\n        return { success: true, data: response.data };\n      } else {\n        // Mock response for demo\n        return {\n          success: true,\n          data: {\n            marketplaceFees: [\n              {\n                recipient: '0x2E7cC63800e77BB8c662c45Ef33D1cCc23861532',\n                basisPoints: 50, // 0.5%\n                feeType: 'DOMA',\n              },\n            ],\n          },\n        };\n      }\n    } catch (error) {\n      return this.handleError(error, 'getOrderbookFees');\n    }\n  }\n\n  /**\n   * Get supported currencies for trading\n   */\n  async getSupportedCurrencies(\n    contractAddress: string,\n    orderbook: string = 'DOMA'\n  ): Promise<ApiResponse<SupportedCurrenciesResponse>> {\n    try {\n      if (this.config.apiKey) {\n        // Real API call\n        const response = await this.apiClient.get(\n          `/v1/orderbook/currencies/${this.config.chainId}/${contractAddress}/${orderbook}`\n        );\n        return { success: true, data: response.data };\n      } else {\n        // Mock response for demo\n        return {\n          success: true,\n          data: {\n            currencies: [\n              {\n                contractAddress: '0x0000000000000000000000000000000000000000',\n                symbol: 'ETH',\n                name: 'Ethereum',\n                decimals: 18,\n              },\n              {\n                contractAddress: '0x2f3463756C59387D6Cd55b034100caf7ECfc757b',\n                symbol: 'USDC',\n                name: 'USD Coin',\n                decimals: 6,\n              },\n              {\n                contractAddress: '0x6f898cd313dcEe4D28A87F675BD93C471868B0Ac',\n                symbol: 'WETH',\n                name: 'Wrapped Ethereum',\n                decimals: 18,\n              },\n            ],\n          },\n        };\n      }\n    } catch (error) {\n      return this.handleError(error, 'getSupportedCurrencies');\n    }\n  }\n\n  /**\n   * Cancel a listing (simulation for hackathon)\n   */\n  async cancelListing(\n    orderId: string,\n    onProgress?: ProgressCallback\n  ): Promise<ApiResponse<any>> {\n    try {\n      if (onProgress) {\n        onProgress('Preparing cancellation', 25);\n        await this.delay(300);\n        onProgress('Creating cancellation signature', 60);\n        await this.delay(300);\n        onProgress('Submitting cancellation', 90);\n        await this.delay(300);\n        onProgress('Listing cancelled successfully', 100);\n      }\n\n      if (this.config.apiKey) {\n        // TODO: Real API call would go here\n        console.log('Real listing cancellation would happen here for:', orderId);\n      }\n\n      return {\n        success: true,\n        data: {\n          orderId,\n          status: 'cancelled',\n          cancelledAt: new Date().toISOString(),\n        },\n      };\n    } catch (error) {\n      return this.handleError(error, 'cancelListing');\n    }\n  }\n\n  /**\n   * Cancel an offer (simulation for hackathon)\n   */\n  async cancelOffer(\n    orderId: string,\n    onProgress?: ProgressCallback\n  ): Promise<ApiResponse<any>> {\n    try {\n      if (onProgress) {\n        onProgress('Preparing cancellation', 25);\n        await this.delay(300);\n        onProgress('Creating cancellation signature', 60);\n        await this.delay(300);\n        onProgress('Submitting cancellation', 90);\n        await this.delay(300);\n        onProgress('Offer cancelled successfully', 100);\n      }\n\n      if (this.config.apiKey) {\n        // TODO: Real API call would go here\n        console.log('Real offer cancellation would happen here for:', orderId);\n      }\n\n      return {\n        success: true,\n        data: {\n          orderId,\n          status: 'cancelled',\n          cancelledAt: new Date().toISOString(),\n        },\n      };\n    } catch (error) {\n      return this.handleError(error, 'cancelOffer');\n    }\n  }\n\n  /**\n   * Handle API errors with user-friendly messages\n   */\n  private handleError(error: any, operation: string): ApiResponse<any> {\n    console.error(`Enhanced Doma Client ${operation} error:`, error);\n\n    if (axios.isAxiosError(error)) {\n      if (error.response?.status === 401) {\n        return {\n          success: false,\n          error: 'API key is missing or invalid. Please check your configuration.',\n        };\n      } else if (error.response?.status === 429) {\n        return {\n          success: false,\n          error: 'Rate limit exceeded. Please try again later.',\n        };\n      } else if (error.response?.data?.message) {\n        return {\n          success: false,\n          error: error.response.data.message,\n        };\n      }\n    }\n\n    return {\n      success: false,\n      error: `${operation} failed. Please try again.`,\n    };\n  }\n\n  /**\n   * Utility function to add delay for progress simulation\n   */\n  private delay(ms: number): Promise<void> {\n    return new Promise(resolve => setTimeout(resolve, ms));\n  }\n\n  /**\n   * Check if the client is configured with an API key\n   */\n  isConfigured(): boolean {\n    return !!this.config.apiKey;\n  }\n}\n\n// Create default client instance\nconst createEnhancedDomaClient = () => {\n  const config: OrderbookConfig = {\n    baseUrl: process.env.REACT_APP_DOMA_API_BASE_URL || 'https://api-testnet.doma.xyz',\n    apiKey: process.env.REACT_APP_DOMA_API_KEY,\n    chainId: process.env.REACT_APP_DOMA_CHAIN_ID || '97476',\n  };\n\n  return new EnhancedDomaClient(config);\n};\n\n// Export singleton instance\nexport const enhancedDomaClient = createEnhancedDomaClient();\n\n// Export utilities\nexport const formatChainId = (chainId: string): string => {\n  return `eip155:${chainId}`;\n};\n\nexport const parseChainId = (caipChainId: string): string => {\n  return caipChainId.split(':')[1] || '97476';\n};\n\nexport const getChainName = (chainId: string): string => {\n  switch (chainId) {\n    case '1':\n      return 'Ethereum Mainnet';\n    case '97476':\n      return 'Doma Testnet';\n    case '137':\n      return 'Polygon';\n    case '42161':\n      return 'Arbitrum';\n    case '10':\n      return 'Optimism';\n    default:\n      return `Chain ${chainId}`;\n  }\n};\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}